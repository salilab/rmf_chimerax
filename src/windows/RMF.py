# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RMF
else:
    import _RMF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class RMF_SwigPyIterator(object):
    r"""Proxy of C++ swig::RMF_SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RMF.delete_RMF_SwigPyIterator

    def value(self):
        r"""value(RMF_SwigPyIterator self) -> PyObject *"""
        return _RMF.RMF_SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(RMF_SwigPyIterator self, size_t n=1) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(RMF_SwigPyIterator self, size_t n=1) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(RMF_SwigPyIterator self, RMF_SwigPyIterator x) -> ptrdiff_t"""
        return _RMF.RMF_SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(RMF_SwigPyIterator self, RMF_SwigPyIterator x) -> bool"""
        return _RMF.RMF_SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(RMF_SwigPyIterator self) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator_copy(self)

    def next(self):
        r"""next(RMF_SwigPyIterator self) -> PyObject *"""
        return _RMF.RMF_SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(RMF_SwigPyIterator self) -> PyObject *"""
        return _RMF.RMF_SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(RMF_SwigPyIterator self) -> PyObject *"""
        return _RMF.RMF_SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(RMF_SwigPyIterator self, ptrdiff_t n) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(RMF_SwigPyIterator self, RMF_SwigPyIterator x) -> bool"""
        return _RMF.RMF_SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(RMF_SwigPyIterator self, RMF_SwigPyIterator x) -> bool"""
        return _RMF.RMF_SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(RMF_SwigPyIterator self, ptrdiff_t n) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(RMF_SwigPyIterator self, ptrdiff_t n) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(RMF_SwigPyIterator self, ptrdiff_t n) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(RMF_SwigPyIterator self, ptrdiff_t n) -> RMF_SwigPyIterator
        __sub__(RMF_SwigPyIterator self, RMF_SwigPyIterator x) -> ptrdiff_t
        """
        return _RMF.RMF_SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register RMF_SwigPyIterator in _RMF:
_RMF.RMF_SwigPyIterator_swigregister(RMF_SwigPyIterator)

RMF_VERSION_MAJOR = _RMF.RMF_VERSION_MAJOR

RMF_VERSION_MINOR = _RMF.RMF_VERSION_MINOR

RMF_VERSION_MICRO = _RMF.RMF_VERSION_MICRO

RMF_HAS_LOG4CXX = _RMF.RMF_HAS_LOG4CXX

RMF_HAS_NUMPY = _RMF.RMF_HAS_NUMPY

RMF_HAS_DEPRECATED_BACKENDS = _RMF.RMF_HAS_DEPRECATED_BACKENDS

class FrameTag(object):
    r"""Proxy of C++ RMF::FrameTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def get_tag():
        r"""get_tag() -> std::string"""
        return _RMF.FrameTag_get_tag()

    def __init__(self):
        r"""__init__(FrameTag self) -> FrameTag"""
        _RMF.FrameTag_swiginit(self, _RMF.new_FrameTag())
    __swig_destroy__ = _RMF.delete_FrameTag

# Register FrameTag in _RMF:
_RMF.FrameTag_swigregister(FrameTag)

def FrameTag_get_tag():
    r"""FrameTag_get_tag() -> std::string"""
    return _RMF.FrameTag_get_tag()

class NodeTag(object):
    r"""Proxy of C++ RMF::NodeTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def get_tag():
        r"""get_tag() -> std::string"""
        return _RMF.NodeTag_get_tag()

    def __init__(self):
        r"""__init__(NodeTag self) -> NodeTag"""
        _RMF.NodeTag_swiginit(self, _RMF.new_NodeTag())
    __swig_destroy__ = _RMF.delete_NodeTag

# Register NodeTag in _RMF:
_RMF.NodeTag_swigregister(NodeTag)

def NodeTag_get_tag():
    r"""NodeTag_get_tag() -> std::string"""
    return _RMF.NodeTag_get_tag()

class CategoryTag(object):
    r"""Proxy of C++ RMF::CategoryTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def get_tag():
        r"""get_tag() -> std::string"""
        return _RMF.CategoryTag_get_tag()

    def __init__(self):
        r"""__init__(CategoryTag self) -> CategoryTag"""
        _RMF.CategoryTag_swiginit(self, _RMF.new_CategoryTag())
    __swig_destroy__ = _RMF.delete_CategoryTag

# Register CategoryTag in _RMF:
_RMF.CategoryTag_swigregister(CategoryTag)

def CategoryTag_get_tag():
    r"""CategoryTag_get_tag() -> std::string"""
    return _RMF.CategoryTag_get_tag()

class FrameID(object):
    r"""Proxy of C++ RMF::ID< RMF::FrameTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(FrameID self, unsigned int i) -> FrameID
        __init__(FrameID self) -> FrameID
        """
        _RMF.FrameID_swiginit(self, _RMF.new_FrameID(*args))

    def get_index(self):
        r"""get_index(FrameID self) -> unsigned int"""
        return _RMF.FrameID_get_index(self)

    def __eq__(self, o):
        r"""__eq__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___ge__(self, o)

    def __le__(self, o):
        r"""__le__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___le__(self, o)

    def __hash__(self):
        r"""__hash__(FrameID self) -> std::size_t"""
        return _RMF.FrameID___hash__(self)

    def __str__(self):
        r"""__str__(FrameID self) -> std::string"""
        return _RMF.FrameID___str__(self)

    def __repr__(self):
        r"""__repr__(FrameID self) -> std::string"""
        return _RMF.FrameID___repr__(self)
    __swig_destroy__ = _RMF.delete_FrameID

# Register FrameID in _RMF:
_RMF.FrameID_swigregister(FrameID)

class NodeID(object):
    r"""Proxy of C++ RMF::ID< RMF::NodeTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(NodeID self, unsigned int i) -> NodeID
        __init__(NodeID self) -> NodeID
        """
        _RMF.NodeID_swiginit(self, _RMF.new_NodeID(*args))

    def get_index(self):
        r"""get_index(NodeID self) -> unsigned int"""
        return _RMF.NodeID_get_index(self)

    def __eq__(self, o):
        r"""__eq__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___ge__(self, o)

    def __le__(self, o):
        r"""__le__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___le__(self, o)

    def __hash__(self):
        r"""__hash__(NodeID self) -> std::size_t"""
        return _RMF.NodeID___hash__(self)

    def __str__(self):
        r"""__str__(NodeID self) -> std::string"""
        return _RMF.NodeID___str__(self)

    def __repr__(self):
        r"""__repr__(NodeID self) -> std::string"""
        return _RMF.NodeID___repr__(self)
    __swig_destroy__ = _RMF.delete_NodeID

# Register NodeID in _RMF:
_RMF.NodeID_swigregister(NodeID)

class Category(object):
    r"""Proxy of C++ RMF::ID< RMF::CategoryTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(Category self, unsigned int i) -> Category
        __init__(Category self) -> Category
        """
        _RMF.Category_swiginit(self, _RMF.new_Category(*args))

    def get_index(self):
        r"""get_index(Category self) -> unsigned int"""
        return _RMF.Category_get_index(self)

    def __eq__(self, o):
        r"""__eq__(Category self, Category o) -> bool"""
        return _RMF.Category___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(Category self, Category o) -> bool"""
        return _RMF.Category___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(Category self, Category o) -> bool"""
        return _RMF.Category___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(Category self, Category o) -> bool"""
        return _RMF.Category___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(Category self, Category o) -> bool"""
        return _RMF.Category___ge__(self, o)

    def __le__(self, o):
        r"""__le__(Category self, Category o) -> bool"""
        return _RMF.Category___le__(self, o)

    def __hash__(self):
        r"""__hash__(Category self) -> std::size_t"""
        return _RMF.Category___hash__(self)

    def __str__(self):
        r"""__str__(Category self) -> std::string"""
        return _RMF.Category___str__(self)

    def __repr__(self):
        r"""__repr__(Category self) -> std::string"""
        return _RMF.Category___repr__(self)
    __swig_destroy__ = _RMF.delete_Category

# Register Category in _RMF:
_RMF.Category_swigregister(Category)

class FrameIDs(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::FrameTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(FrameIDs self) -> RMF_SwigPyIterator"""
        return _RMF.FrameIDs_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FrameIDs self) -> bool"""
        return _RMF.FrameIDs___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FrameIDs self) -> bool"""
        return _RMF.FrameIDs___bool__(self)

    def __len__(self):
        r"""__len__(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::size_type"""
        return _RMF.FrameIDs___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i, std::vector< RMF::ID< RMF::FrameTag > >::difference_type j) -> FrameIDs"""
        return _RMF.FrameIDs___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i, std::vector< RMF::ID< RMF::FrameTag > >::difference_type j)
        __setslice__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i, std::vector< RMF::ID< RMF::FrameTag > >::difference_type j, FrameIDs v)
        """
        return _RMF.FrameIDs___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i, std::vector< RMF::ID< RMF::FrameTag > >::difference_type j)"""
        return _RMF.FrameIDs___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i)
        __delitem__(FrameIDs self, PySliceObject * slice)
        """
        return _RMF.FrameIDs___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FrameIDs self, PySliceObject * slice) -> FrameIDs
        __getitem__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i) -> FrameID
        """
        return _RMF.FrameIDs___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FrameIDs self, PySliceObject * slice, FrameIDs v)
        __setitem__(FrameIDs self, PySliceObject * slice)
        __setitem__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i, FrameID x)
        """
        return _RMF.FrameIDs___setitem__(self, *args)

    def pop(self):
        r"""pop(FrameIDs self) -> FrameID"""
        return _RMF.FrameIDs_pop(self)

    def append(self, x):
        r"""append(FrameIDs self, FrameID x)"""
        return _RMF.FrameIDs_append(self, x)

    def empty(self):
        r"""empty(FrameIDs self) -> bool"""
        return _RMF.FrameIDs_empty(self)

    def size(self):
        r"""size(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::size_type"""
        return _RMF.FrameIDs_size(self)

    def swap(self, v):
        r"""swap(FrameIDs self, FrameIDs v)"""
        return _RMF.FrameIDs_swap(self, v)

    def begin(self):
        r"""begin(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::iterator"""
        return _RMF.FrameIDs_begin(self)

    def end(self):
        r"""end(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::iterator"""
        return _RMF.FrameIDs_end(self)

    def rbegin(self):
        r"""rbegin(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::reverse_iterator"""
        return _RMF.FrameIDs_rbegin(self)

    def rend(self):
        r"""rend(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::reverse_iterator"""
        return _RMF.FrameIDs_rend(self)

    def clear(self):
        r"""clear(FrameIDs self)"""
        return _RMF.FrameIDs_clear(self)

    def get_allocator(self):
        r"""get_allocator(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::allocator_type"""
        return _RMF.FrameIDs_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FrameIDs self)"""
        return _RMF.FrameIDs_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::iterator pos) -> std::vector< RMF::ID< RMF::FrameTag > >::iterator
        erase(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::iterator first, std::vector< RMF::ID< RMF::FrameTag > >::iterator last) -> std::vector< RMF::ID< RMF::FrameTag > >::iterator
        """
        return _RMF.FrameIDs_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FrameIDs self) -> FrameIDs
        __init__(FrameIDs self, FrameIDs other) -> FrameIDs
        __init__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::size_type size) -> FrameIDs
        __init__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::size_type size, FrameID value) -> FrameIDs
        """
        _RMF.FrameIDs_swiginit(self, _RMF.new_FrameIDs(*args))

    def push_back(self, x):
        r"""push_back(FrameIDs self, FrameID x)"""
        return _RMF.FrameIDs_push_back(self, x)

    def front(self):
        r"""front(FrameIDs self) -> FrameID"""
        return _RMF.FrameIDs_front(self)

    def back(self):
        r"""back(FrameIDs self) -> FrameID"""
        return _RMF.FrameIDs_back(self)

    def assign(self, n, x):
        r"""assign(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::size_type n, FrameID x)"""
        return _RMF.FrameIDs_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::size_type new_size)
        resize(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::size_type new_size, FrameID x)
        """
        return _RMF.FrameIDs_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::iterator pos, FrameID x) -> std::vector< RMF::ID< RMF::FrameTag > >::iterator
        insert(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::iterator pos, std::vector< RMF::ID< RMF::FrameTag > >::size_type n, FrameID x)
        """
        return _RMF.FrameIDs_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::size_type n)"""
        return _RMF.FrameIDs_reserve(self, n)

    def capacity(self):
        r"""capacity(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::size_type"""
        return _RMF.FrameIDs_capacity(self)

    def __str__(self):
        r"""__str__(FrameIDs self) -> std::string"""
        return _RMF.FrameIDs___str__(self)

    def __repr__(self):
        r"""__repr__(FrameIDs self) -> std::string"""
        return _RMF.FrameIDs___repr__(self)
    __swig_destroy__ = _RMF.delete_FrameIDs

# Register FrameIDs in _RMF:
_RMF.FrameIDs_swigregister(FrameIDs)

class NodeIDs(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::NodeTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(NodeIDs self) -> RMF_SwigPyIterator"""
        return _RMF.NodeIDs_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(NodeIDs self) -> bool"""
        return _RMF.NodeIDs___nonzero__(self)

    def __bool__(self):
        r"""__bool__(NodeIDs self) -> bool"""
        return _RMF.NodeIDs___bool__(self)

    def __len__(self):
        r"""__len__(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::size_type"""
        return _RMF.NodeIDs___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i, std::vector< RMF::ID< RMF::NodeTag > >::difference_type j) -> NodeIDs"""
        return _RMF.NodeIDs___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i, std::vector< RMF::ID< RMF::NodeTag > >::difference_type j)
        __setslice__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i, std::vector< RMF::ID< RMF::NodeTag > >::difference_type j, NodeIDs v)
        """
        return _RMF.NodeIDs___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i, std::vector< RMF::ID< RMF::NodeTag > >::difference_type j)"""
        return _RMF.NodeIDs___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i)
        __delitem__(NodeIDs self, PySliceObject * slice)
        """
        return _RMF.NodeIDs___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(NodeIDs self, PySliceObject * slice) -> NodeIDs
        __getitem__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i) -> NodeID
        """
        return _RMF.NodeIDs___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(NodeIDs self, PySliceObject * slice, NodeIDs v)
        __setitem__(NodeIDs self, PySliceObject * slice)
        __setitem__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i, NodeID x)
        """
        return _RMF.NodeIDs___setitem__(self, *args)

    def pop(self):
        r"""pop(NodeIDs self) -> NodeID"""
        return _RMF.NodeIDs_pop(self)

    def append(self, x):
        r"""append(NodeIDs self, NodeID x)"""
        return _RMF.NodeIDs_append(self, x)

    def empty(self):
        r"""empty(NodeIDs self) -> bool"""
        return _RMF.NodeIDs_empty(self)

    def size(self):
        r"""size(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::size_type"""
        return _RMF.NodeIDs_size(self)

    def swap(self, v):
        r"""swap(NodeIDs self, NodeIDs v)"""
        return _RMF.NodeIDs_swap(self, v)

    def begin(self):
        r"""begin(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::iterator"""
        return _RMF.NodeIDs_begin(self)

    def end(self):
        r"""end(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::iterator"""
        return _RMF.NodeIDs_end(self)

    def rbegin(self):
        r"""rbegin(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::reverse_iterator"""
        return _RMF.NodeIDs_rbegin(self)

    def rend(self):
        r"""rend(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::reverse_iterator"""
        return _RMF.NodeIDs_rend(self)

    def clear(self):
        r"""clear(NodeIDs self)"""
        return _RMF.NodeIDs_clear(self)

    def get_allocator(self):
        r"""get_allocator(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::allocator_type"""
        return _RMF.NodeIDs_get_allocator(self)

    def pop_back(self):
        r"""pop_back(NodeIDs self)"""
        return _RMF.NodeIDs_pop_back(self)

    def erase(self, *args):
        r"""
        erase(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::iterator pos) -> std::vector< RMF::ID< RMF::NodeTag > >::iterator
        erase(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::iterator first, std::vector< RMF::ID< RMF::NodeTag > >::iterator last) -> std::vector< RMF::ID< RMF::NodeTag > >::iterator
        """
        return _RMF.NodeIDs_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(NodeIDs self) -> NodeIDs
        __init__(NodeIDs self, NodeIDs other) -> NodeIDs
        __init__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::size_type size) -> NodeIDs
        __init__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::size_type size, NodeID value) -> NodeIDs
        """
        _RMF.NodeIDs_swiginit(self, _RMF.new_NodeIDs(*args))

    def push_back(self, x):
        r"""push_back(NodeIDs self, NodeID x)"""
        return _RMF.NodeIDs_push_back(self, x)

    def front(self):
        r"""front(NodeIDs self) -> NodeID"""
        return _RMF.NodeIDs_front(self)

    def back(self):
        r"""back(NodeIDs self) -> NodeID"""
        return _RMF.NodeIDs_back(self)

    def assign(self, n, x):
        r"""assign(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::size_type n, NodeID x)"""
        return _RMF.NodeIDs_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::size_type new_size)
        resize(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::size_type new_size, NodeID x)
        """
        return _RMF.NodeIDs_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::iterator pos, NodeID x) -> std::vector< RMF::ID< RMF::NodeTag > >::iterator
        insert(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::iterator pos, std::vector< RMF::ID< RMF::NodeTag > >::size_type n, NodeID x)
        """
        return _RMF.NodeIDs_insert(self, *args)

    def reserve(self, n):
        r"""reserve(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::size_type n)"""
        return _RMF.NodeIDs_reserve(self, n)

    def capacity(self):
        r"""capacity(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::size_type"""
        return _RMF.NodeIDs_capacity(self)

    def __str__(self):
        r"""__str__(NodeIDs self) -> std::string"""
        return _RMF.NodeIDs___str__(self)

    def __repr__(self):
        r"""__repr__(NodeIDs self) -> std::string"""
        return _RMF.NodeIDs___repr__(self)
    __swig_destroy__ = _RMF.delete_NodeIDs

# Register NodeIDs in _RMF:
_RMF.NodeIDs_swigregister(NodeIDs)

class Categories(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::CategoryTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Categories self) -> RMF_SwigPyIterator"""
        return _RMF.Categories_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Categories self) -> bool"""
        return _RMF.Categories___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Categories self) -> bool"""
        return _RMF.Categories___bool__(self)

    def __len__(self):
        r"""__len__(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::size_type"""
        return _RMF.Categories___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type j) -> Categories"""
        return _RMF.Categories___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type j)
        __setslice__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type j, Categories v)
        """
        return _RMF.Categories___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type j)"""
        return _RMF.Categories___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i)
        __delitem__(Categories self, PySliceObject * slice)
        """
        return _RMF.Categories___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Categories self, PySliceObject * slice) -> Categories
        __getitem__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i) -> Category
        """
        return _RMF.Categories___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Categories self, PySliceObject * slice, Categories v)
        __setitem__(Categories self, PySliceObject * slice)
        __setitem__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i, Category x)
        """
        return _RMF.Categories___setitem__(self, *args)

    def pop(self):
        r"""pop(Categories self) -> Category"""
        return _RMF.Categories_pop(self)

    def append(self, x):
        r"""append(Categories self, Category x)"""
        return _RMF.Categories_append(self, x)

    def empty(self):
        r"""empty(Categories self) -> bool"""
        return _RMF.Categories_empty(self)

    def size(self):
        r"""size(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::size_type"""
        return _RMF.Categories_size(self)

    def swap(self, v):
        r"""swap(Categories self, Categories v)"""
        return _RMF.Categories_swap(self, v)

    def begin(self):
        r"""begin(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::iterator"""
        return _RMF.Categories_begin(self)

    def end(self):
        r"""end(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::iterator"""
        return _RMF.Categories_end(self)

    def rbegin(self):
        r"""rbegin(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::reverse_iterator"""
        return _RMF.Categories_rbegin(self)

    def rend(self):
        r"""rend(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::reverse_iterator"""
        return _RMF.Categories_rend(self)

    def clear(self):
        r"""clear(Categories self)"""
        return _RMF.Categories_clear(self)

    def get_allocator(self):
        r"""get_allocator(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::allocator_type"""
        return _RMF.Categories_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Categories self)"""
        return _RMF.Categories_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::iterator pos) -> std::vector< RMF::ID< RMF::CategoryTag > >::iterator
        erase(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::iterator first, std::vector< RMF::ID< RMF::CategoryTag > >::iterator last) -> std::vector< RMF::ID< RMF::CategoryTag > >::iterator
        """
        return _RMF.Categories_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Categories self) -> Categories
        __init__(Categories self, Categories other) -> Categories
        __init__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type size) -> Categories
        __init__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type size, Category value) -> Categories
        """
        _RMF.Categories_swiginit(self, _RMF.new_Categories(*args))

    def push_back(self, x):
        r"""push_back(Categories self, Category x)"""
        return _RMF.Categories_push_back(self, x)

    def front(self):
        r"""front(Categories self) -> Category"""
        return _RMF.Categories_front(self)

    def back(self):
        r"""back(Categories self) -> Category"""
        return _RMF.Categories_back(self)

    def assign(self, n, x):
        r"""assign(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type n, Category x)"""
        return _RMF.Categories_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type new_size)
        resize(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type new_size, Category x)
        """
        return _RMF.Categories_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::iterator pos, Category x) -> std::vector< RMF::ID< RMF::CategoryTag > >::iterator
        insert(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::iterator pos, std::vector< RMF::ID< RMF::CategoryTag > >::size_type n, Category x)
        """
        return _RMF.Categories_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type n)"""
        return _RMF.Categories_reserve(self, n)

    def capacity(self):
        r"""capacity(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::size_type"""
        return _RMF.Categories_capacity(self)

    def __str__(self):
        r"""__str__(Categories self) -> std::string"""
        return _RMF.Categories___str__(self)

    def __repr__(self):
        r"""__repr__(Categories self) -> std::string"""
        return _RMF.Categories___repr__(self)
    __swig_destroy__ = _RMF.delete_Categories

# Register Categories in _RMF:
_RMF.Categories_swigregister(Categories)

class Vector3(object):
    r"""Proxy of C++ RMF::Vector< 3U > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Vector3 self) -> Vector3
        __init__(Vector3 self, Vector3 o) -> Vector3
        __init__(Vector3 self, float x, float y, float z) -> Vector3
        """
        _RMF.Vector3_swiginit(self, _RMF.new_Vector3(*args))

    def __getitem__(self, i):
        r"""__getitem__(Vector3 self, unsigned int i) -> float"""
        return _RMF.Vector3___getitem__(self, i)

    def __len__(self):
        r"""__len__(Vector3 self) -> unsigned int"""
        return _RMF.Vector3___len__(self)

    @staticmethod
    def get_dimension():
        r"""get_dimension() -> unsigned int"""
        return _RMF.Vector3_get_dimension()

    def __eq__(self, o):
        r"""__eq__(Vector3 self, Vector3 o) -> bool"""
        return _RMF.Vector3___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(Vector3 self, Vector3 o) -> bool"""
        return _RMF.Vector3___ne__(self, o)

    def __str__(self):
       return str([x for x in self])
    def __repr__(self):
         return self.__str__()

    __swig_destroy__ = _RMF.delete_Vector3

# Register Vector3 in _RMF:
_RMF.Vector3_swigregister(Vector3)

def Vector3_get_dimension():
    r"""Vector3_get_dimension() -> unsigned int"""
    return _RMF.Vector3_get_dimension()

class Vector4(object):
    r"""Proxy of C++ RMF::Vector< 4U > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Vector4 self) -> Vector4
        __init__(Vector4 self, Vector4 o) -> Vector4
        __init__(Vector4 self, float w, float x, float y, float z) -> Vector4
        """
        _RMF.Vector4_swiginit(self, _RMF.new_Vector4(*args))

    def __getitem__(self, i):
        r"""__getitem__(Vector4 self, unsigned int i) -> float"""
        return _RMF.Vector4___getitem__(self, i)

    def __len__(self):
        r"""__len__(Vector4 self) -> unsigned int"""
        return _RMF.Vector4___len__(self)

    @staticmethod
    def get_dimension():
        r"""get_dimension() -> unsigned int"""
        return _RMF.Vector4_get_dimension()

    def __eq__(self, o):
        r"""__eq__(Vector4 self, Vector4 o) -> bool"""
        return _RMF.Vector4___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(Vector4 self, Vector4 o) -> bool"""
        return _RMF.Vector4___ne__(self, o)

    def __str__(self):
       return str([x for x in self])
    def __repr__(self):
         return self.__str__()

    __swig_destroy__ = _RMF.delete_Vector4

# Register Vector4 in _RMF:
_RMF.Vector4_swigregister(Vector4)

def Vector4_get_dimension():
    r"""Vector4_get_dimension() -> unsigned int"""
    return _RMF.Vector4_get_dimension()

class IntRange(object):
    r"""Proxy of C++ std::array< int,2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IntRange self) -> IntRange"""
        _RMF.IntRange_swiginit(self, _RMF.new_IntRange())

    def at(self, i):
        r"""at(IntRange self, int i) -> int"""
        return _RMF.IntRange_at(self, i)

    def size(self):
        r"""size(IntRange self) -> int"""
        return _RMF.IntRange_size(self)

    def __getitem__(self, d):
      if d >= self.size() or d < 0:
        raise IndexError()
      return self.at(d)

    def __len__(self):
      return self.size()

    __swig_destroy__ = _RMF.delete_IntRange

# Register IntRange in _RMF:
_RMF.IntRange_swigregister(IntRange)

class Ints(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Ints self) -> RMF_SwigPyIterator"""
        return _RMF.Ints_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Ints self) -> bool"""
        return _RMF.Ints___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Ints self) -> bool"""
        return _RMF.Ints___bool__(self)

    def __len__(self):
        r"""__len__(Ints self) -> std::vector< int >::size_type"""
        return _RMF.Ints___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Ints self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> Ints"""
        return _RMF.Ints___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Ints self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(Ints self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, Ints v)
        """
        return _RMF.Ints___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Ints self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _RMF.Ints___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Ints self, std::vector< int >::difference_type i)
        __delitem__(Ints self, PySliceObject * slice)
        """
        return _RMF.Ints___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Ints self, PySliceObject * slice) -> Ints
        __getitem__(Ints self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _RMF.Ints___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Ints self, PySliceObject * slice, Ints v)
        __setitem__(Ints self, PySliceObject * slice)
        __setitem__(Ints self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _RMF.Ints___setitem__(self, *args)

    def pop(self):
        r"""pop(Ints self) -> std::vector< int >::value_type"""
        return _RMF.Ints_pop(self)

    def append(self, x):
        r"""append(Ints self, std::vector< int >::value_type const & x)"""
        return _RMF.Ints_append(self, x)

    def empty(self):
        r"""empty(Ints self) -> bool"""
        return _RMF.Ints_empty(self)

    def size(self):
        r"""size(Ints self) -> std::vector< int >::size_type"""
        return _RMF.Ints_size(self)

    def swap(self, v):
        r"""swap(Ints self, Ints v)"""
        return _RMF.Ints_swap(self, v)

    def begin(self):
        r"""begin(Ints self) -> std::vector< int >::iterator"""
        return _RMF.Ints_begin(self)

    def end(self):
        r"""end(Ints self) -> std::vector< int >::iterator"""
        return _RMF.Ints_end(self)

    def rbegin(self):
        r"""rbegin(Ints self) -> std::vector< int >::reverse_iterator"""
        return _RMF.Ints_rbegin(self)

    def rend(self):
        r"""rend(Ints self) -> std::vector< int >::reverse_iterator"""
        return _RMF.Ints_rend(self)

    def clear(self):
        r"""clear(Ints self)"""
        return _RMF.Ints_clear(self)

    def get_allocator(self):
        r"""get_allocator(Ints self) -> std::vector< int >::allocator_type"""
        return _RMF.Ints_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Ints self)"""
        return _RMF.Ints_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Ints self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(Ints self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _RMF.Ints_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Ints self) -> Ints
        __init__(Ints self, Ints other) -> Ints
        __init__(Ints self, std::vector< int >::size_type size) -> Ints
        __init__(Ints self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> Ints
        """
        _RMF.Ints_swiginit(self, _RMF.new_Ints(*args))

    def push_back(self, x):
        r"""push_back(Ints self, std::vector< int >::value_type const & x)"""
        return _RMF.Ints_push_back(self, x)

    def front(self):
        r"""front(Ints self) -> std::vector< int >::value_type const &"""
        return _RMF.Ints_front(self)

    def back(self):
        r"""back(Ints self) -> std::vector< int >::value_type const &"""
        return _RMF.Ints_back(self)

    def assign(self, n, x):
        r"""assign(Ints self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _RMF.Ints_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Ints self, std::vector< int >::size_type new_size)
        resize(Ints self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _RMF.Ints_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Ints self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(Ints self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _RMF.Ints_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Ints self, std::vector< int >::size_type n)"""
        return _RMF.Ints_reserve(self, n)

    def capacity(self):
        r"""capacity(Ints self) -> std::vector< int >::size_type"""
        return _RMF.Ints_capacity(self)

    def __str__(self):
        r"""__str__(Ints self) -> std::string"""
        return _RMF.Ints___str__(self)

    def __repr__(self):
        r"""__repr__(Ints self) -> std::string"""
        return _RMF.Ints___repr__(self)
    __swig_destroy__ = _RMF.delete_Ints

# Register Ints in _RMF:
_RMF.Ints_swigregister(Ints)

class Floats(object):
    r"""Proxy of C++ std::vector< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Floats self) -> RMF_SwigPyIterator"""
        return _RMF.Floats_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Floats self) -> bool"""
        return _RMF.Floats___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Floats self) -> bool"""
        return _RMF.Floats___bool__(self)

    def __len__(self):
        r"""__len__(Floats self) -> std::vector< float >::size_type"""
        return _RMF.Floats___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Floats self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> Floats"""
        return _RMF.Floats___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Floats self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)
        __setslice__(Floats self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, Floats v)
        """
        return _RMF.Floats___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Floats self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"""
        return _RMF.Floats___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Floats self, std::vector< float >::difference_type i)
        __delitem__(Floats self, PySliceObject * slice)
        """
        return _RMF.Floats___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Floats self, PySliceObject * slice) -> Floats
        __getitem__(Floats self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &
        """
        return _RMF.Floats___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Floats self, PySliceObject * slice, Floats v)
        __setitem__(Floats self, PySliceObject * slice)
        __setitem__(Floats self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)
        """
        return _RMF.Floats___setitem__(self, *args)

    def pop(self):
        r"""pop(Floats self) -> std::vector< float >::value_type"""
        return _RMF.Floats_pop(self)

    def append(self, x):
        r"""append(Floats self, std::vector< float >::value_type const & x)"""
        return _RMF.Floats_append(self, x)

    def empty(self):
        r"""empty(Floats self) -> bool"""
        return _RMF.Floats_empty(self)

    def size(self):
        r"""size(Floats self) -> std::vector< float >::size_type"""
        return _RMF.Floats_size(self)

    def swap(self, v):
        r"""swap(Floats self, Floats v)"""
        return _RMF.Floats_swap(self, v)

    def begin(self):
        r"""begin(Floats self) -> std::vector< float >::iterator"""
        return _RMF.Floats_begin(self)

    def end(self):
        r"""end(Floats self) -> std::vector< float >::iterator"""
        return _RMF.Floats_end(self)

    def rbegin(self):
        r"""rbegin(Floats self) -> std::vector< float >::reverse_iterator"""
        return _RMF.Floats_rbegin(self)

    def rend(self):
        r"""rend(Floats self) -> std::vector< float >::reverse_iterator"""
        return _RMF.Floats_rend(self)

    def clear(self):
        r"""clear(Floats self)"""
        return _RMF.Floats_clear(self)

    def get_allocator(self):
        r"""get_allocator(Floats self) -> std::vector< float >::allocator_type"""
        return _RMF.Floats_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Floats self)"""
        return _RMF.Floats_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Floats self, std::vector< float >::iterator pos) -> std::vector< float >::iterator
        erase(Floats self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator
        """
        return _RMF.Floats_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Floats self) -> Floats
        __init__(Floats self, Floats other) -> Floats
        __init__(Floats self, std::vector< float >::size_type size) -> Floats
        __init__(Floats self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> Floats
        """
        _RMF.Floats_swiginit(self, _RMF.new_Floats(*args))

    def push_back(self, x):
        r"""push_back(Floats self, std::vector< float >::value_type const & x)"""
        return _RMF.Floats_push_back(self, x)

    def front(self):
        r"""front(Floats self) -> std::vector< float >::value_type const &"""
        return _RMF.Floats_front(self)

    def back(self):
        r"""back(Floats self) -> std::vector< float >::value_type const &"""
        return _RMF.Floats_back(self)

    def assign(self, n, x):
        r"""assign(Floats self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"""
        return _RMF.Floats_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Floats self, std::vector< float >::size_type new_size)
        resize(Floats self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)
        """
        return _RMF.Floats_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Floats self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator
        insert(Floats self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)
        """
        return _RMF.Floats_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Floats self, std::vector< float >::size_type n)"""
        return _RMF.Floats_reserve(self, n)

    def capacity(self):
        r"""capacity(Floats self) -> std::vector< float >::size_type"""
        return _RMF.Floats_capacity(self)

    def __str__(self):
        r"""__str__(Floats self) -> std::string"""
        return _RMF.Floats___str__(self)

    def __repr__(self):
        r"""__repr__(Floats self) -> std::string"""
        return _RMF.Floats___repr__(self)
    __swig_destroy__ = _RMF.delete_Floats

# Register Floats in _RMF:
_RMF.Floats_swigregister(Floats)

class Strings(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Strings self) -> RMF_SwigPyIterator"""
        return _RMF.Strings_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Strings self) -> bool"""
        return _RMF.Strings___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Strings self) -> bool"""
        return _RMF.Strings___bool__(self)

    def __len__(self):
        r"""__len__(Strings self) -> std::vector< std::string >::size_type"""
        return _RMF.Strings___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Strings self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> Strings"""
        return _RMF.Strings___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Strings self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(Strings self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, Strings v)
        """
        return _RMF.Strings___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Strings self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _RMF.Strings___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Strings self, std::vector< std::string >::difference_type i)
        __delitem__(Strings self, PySliceObject * slice)
        """
        return _RMF.Strings___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Strings self, PySliceObject * slice) -> Strings
        __getitem__(Strings self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _RMF.Strings___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Strings self, PySliceObject * slice, Strings v)
        __setitem__(Strings self, PySliceObject * slice)
        __setitem__(Strings self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _RMF.Strings___setitem__(self, *args)

    def pop(self):
        r"""pop(Strings self) -> std::vector< std::string >::value_type"""
        return _RMF.Strings_pop(self)

    def append(self, x):
        r"""append(Strings self, std::vector< std::string >::value_type const & x)"""
        return _RMF.Strings_append(self, x)

    def empty(self):
        r"""empty(Strings self) -> bool"""
        return _RMF.Strings_empty(self)

    def size(self):
        r"""size(Strings self) -> std::vector< std::string >::size_type"""
        return _RMF.Strings_size(self)

    def swap(self, v):
        r"""swap(Strings self, Strings v)"""
        return _RMF.Strings_swap(self, v)

    def begin(self):
        r"""begin(Strings self) -> std::vector< std::string >::iterator"""
        return _RMF.Strings_begin(self)

    def end(self):
        r"""end(Strings self) -> std::vector< std::string >::iterator"""
        return _RMF.Strings_end(self)

    def rbegin(self):
        r"""rbegin(Strings self) -> std::vector< std::string >::reverse_iterator"""
        return _RMF.Strings_rbegin(self)

    def rend(self):
        r"""rend(Strings self) -> std::vector< std::string >::reverse_iterator"""
        return _RMF.Strings_rend(self)

    def clear(self):
        r"""clear(Strings self)"""
        return _RMF.Strings_clear(self)

    def get_allocator(self):
        r"""get_allocator(Strings self) -> std::vector< std::string >::allocator_type"""
        return _RMF.Strings_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Strings self)"""
        return _RMF.Strings_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Strings self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(Strings self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _RMF.Strings_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Strings self) -> Strings
        __init__(Strings self, Strings other) -> Strings
        __init__(Strings self, std::vector< std::string >::size_type size) -> Strings
        __init__(Strings self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> Strings
        """
        _RMF.Strings_swiginit(self, _RMF.new_Strings(*args))

    def push_back(self, x):
        r"""push_back(Strings self, std::vector< std::string >::value_type const & x)"""
        return _RMF.Strings_push_back(self, x)

    def front(self):
        r"""front(Strings self) -> std::vector< std::string >::value_type const &"""
        return _RMF.Strings_front(self)

    def back(self):
        r"""back(Strings self) -> std::vector< std::string >::value_type const &"""
        return _RMF.Strings_back(self)

    def assign(self, n, x):
        r"""assign(Strings self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _RMF.Strings_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Strings self, std::vector< std::string >::size_type new_size)
        resize(Strings self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _RMF.Strings_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Strings self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(Strings self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _RMF.Strings_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Strings self, std::vector< std::string >::size_type n)"""
        return _RMF.Strings_reserve(self, n)

    def capacity(self):
        r"""capacity(Strings self) -> std::vector< std::string >::size_type"""
        return _RMF.Strings_capacity(self)

    def __str__(self):
        r"""__str__(Strings self) -> std::string"""
        return _RMF.Strings___str__(self)

    def __repr__(self):
        r"""__repr__(Strings self) -> std::string"""
        return _RMF.Strings___repr__(self)
    __swig_destroy__ = _RMF.delete_Strings

# Register Strings in _RMF:
_RMF.Strings_swigregister(Strings)

class Vector3s(object):
    r"""Proxy of C++ std::vector< RMF::Vector< 3U > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Vector3s self) -> RMF_SwigPyIterator"""
        return _RMF.Vector3s_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vector3s self) -> bool"""
        return _RMF.Vector3s___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vector3s self) -> bool"""
        return _RMF.Vector3s___bool__(self)

    def __len__(self):
        r"""__len__(Vector3s self) -> std::vector< RMF::Vector< 3U > >::size_type"""
        return _RMF.Vector3s___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i, std::vector< RMF::Vector< 3U > >::difference_type j) -> Vector3s"""
        return _RMF.Vector3s___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i, std::vector< RMF::Vector< 3U > >::difference_type j)
        __setslice__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i, std::vector< RMF::Vector< 3U > >::difference_type j, Vector3s v)
        """
        return _RMF.Vector3s___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i, std::vector< RMF::Vector< 3U > >::difference_type j)"""
        return _RMF.Vector3s___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i)
        __delitem__(Vector3s self, PySliceObject * slice)
        """
        return _RMF.Vector3s___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vector3s self, PySliceObject * slice) -> Vector3s
        __getitem__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i) -> Vector3
        """
        return _RMF.Vector3s___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vector3s self, PySliceObject * slice, Vector3s v)
        __setitem__(Vector3s self, PySliceObject * slice)
        __setitem__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i, Vector3 x)
        """
        return _RMF.Vector3s___setitem__(self, *args)

    def pop(self):
        r"""pop(Vector3s self) -> Vector3"""
        return _RMF.Vector3s_pop(self)

    def append(self, x):
        r"""append(Vector3s self, Vector3 x)"""
        return _RMF.Vector3s_append(self, x)

    def empty(self):
        r"""empty(Vector3s self) -> bool"""
        return _RMF.Vector3s_empty(self)

    def size(self):
        r"""size(Vector3s self) -> std::vector< RMF::Vector< 3U > >::size_type"""
        return _RMF.Vector3s_size(self)

    def swap(self, v):
        r"""swap(Vector3s self, Vector3s v)"""
        return _RMF.Vector3s_swap(self, v)

    def begin(self):
        r"""begin(Vector3s self) -> std::vector< RMF::Vector< 3U > >::iterator"""
        return _RMF.Vector3s_begin(self)

    def end(self):
        r"""end(Vector3s self) -> std::vector< RMF::Vector< 3U > >::iterator"""
        return _RMF.Vector3s_end(self)

    def rbegin(self):
        r"""rbegin(Vector3s self) -> std::vector< RMF::Vector< 3U > >::reverse_iterator"""
        return _RMF.Vector3s_rbegin(self)

    def rend(self):
        r"""rend(Vector3s self) -> std::vector< RMF::Vector< 3U > >::reverse_iterator"""
        return _RMF.Vector3s_rend(self)

    def clear(self):
        r"""clear(Vector3s self)"""
        return _RMF.Vector3s_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vector3s self) -> std::vector< RMF::Vector< 3U > >::allocator_type"""
        return _RMF.Vector3s_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vector3s self)"""
        return _RMF.Vector3s_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vector3s self, std::vector< RMF::Vector< 3U > >::iterator pos) -> std::vector< RMF::Vector< 3U > >::iterator
        erase(Vector3s self, std::vector< RMF::Vector< 3U > >::iterator first, std::vector< RMF::Vector< 3U > >::iterator last) -> std::vector< RMF::Vector< 3U > >::iterator
        """
        return _RMF.Vector3s_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vector3s self) -> Vector3s
        __init__(Vector3s self, Vector3s other) -> Vector3s
        __init__(Vector3s self, std::vector< RMF::Vector< 3U > >::size_type size) -> Vector3s
        __init__(Vector3s self, std::vector< RMF::Vector< 3U > >::size_type size, Vector3 value) -> Vector3s
        """
        _RMF.Vector3s_swiginit(self, _RMF.new_Vector3s(*args))

    def push_back(self, x):
        r"""push_back(Vector3s self, Vector3 x)"""
        return _RMF.Vector3s_push_back(self, x)

    def front(self):
        r"""front(Vector3s self) -> Vector3"""
        return _RMF.Vector3s_front(self)

    def back(self):
        r"""back(Vector3s self) -> Vector3"""
        return _RMF.Vector3s_back(self)

    def assign(self, n, x):
        r"""assign(Vector3s self, std::vector< RMF::Vector< 3U > >::size_type n, Vector3 x)"""
        return _RMF.Vector3s_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vector3s self, std::vector< RMF::Vector< 3U > >::size_type new_size)
        resize(Vector3s self, std::vector< RMF::Vector< 3U > >::size_type new_size, Vector3 x)
        """
        return _RMF.Vector3s_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vector3s self, std::vector< RMF::Vector< 3U > >::iterator pos, Vector3 x) -> std::vector< RMF::Vector< 3U > >::iterator
        insert(Vector3s self, std::vector< RMF::Vector< 3U > >::iterator pos, std::vector< RMF::Vector< 3U > >::size_type n, Vector3 x)
        """
        return _RMF.Vector3s_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Vector3s self, std::vector< RMF::Vector< 3U > >::size_type n)"""
        return _RMF.Vector3s_reserve(self, n)

    def capacity(self):
        r"""capacity(Vector3s self) -> std::vector< RMF::Vector< 3U > >::size_type"""
        return _RMF.Vector3s_capacity(self)

    def __str__(self):
        r"""__str__(Vector3s self) -> std::string"""
        return _RMF.Vector3s___str__(self)

    def __repr__(self):
        r"""__repr__(Vector3s self) -> std::string"""
        return _RMF.Vector3s___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector3s

# Register Vector3s in _RMF:
_RMF.Vector3s_swigregister(Vector3s)

class Vector4s(object):
    r"""Proxy of C++ std::vector< RMF::Vector< 4U > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Vector4s self) -> RMF_SwigPyIterator"""
        return _RMF.Vector4s_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vector4s self) -> bool"""
        return _RMF.Vector4s___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vector4s self) -> bool"""
        return _RMF.Vector4s___bool__(self)

    def __len__(self):
        r"""__len__(Vector4s self) -> std::vector< RMF::Vector< 4U > >::size_type"""
        return _RMF.Vector4s___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i, std::vector< RMF::Vector< 4U > >::difference_type j) -> Vector4s"""
        return _RMF.Vector4s___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i, std::vector< RMF::Vector< 4U > >::difference_type j)
        __setslice__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i, std::vector< RMF::Vector< 4U > >::difference_type j, Vector4s v)
        """
        return _RMF.Vector4s___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i, std::vector< RMF::Vector< 4U > >::difference_type j)"""
        return _RMF.Vector4s___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i)
        __delitem__(Vector4s self, PySliceObject * slice)
        """
        return _RMF.Vector4s___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vector4s self, PySliceObject * slice) -> Vector4s
        __getitem__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i) -> Vector4
        """
        return _RMF.Vector4s___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vector4s self, PySliceObject * slice, Vector4s v)
        __setitem__(Vector4s self, PySliceObject * slice)
        __setitem__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i, Vector4 x)
        """
        return _RMF.Vector4s___setitem__(self, *args)

    def pop(self):
        r"""pop(Vector4s self) -> Vector4"""
        return _RMF.Vector4s_pop(self)

    def append(self, x):
        r"""append(Vector4s self, Vector4 x)"""
        return _RMF.Vector4s_append(self, x)

    def empty(self):
        r"""empty(Vector4s self) -> bool"""
        return _RMF.Vector4s_empty(self)

    def size(self):
        r"""size(Vector4s self) -> std::vector< RMF::Vector< 4U > >::size_type"""
        return _RMF.Vector4s_size(self)

    def swap(self, v):
        r"""swap(Vector4s self, Vector4s v)"""
        return _RMF.Vector4s_swap(self, v)

    def begin(self):
        r"""begin(Vector4s self) -> std::vector< RMF::Vector< 4U > >::iterator"""
        return _RMF.Vector4s_begin(self)

    def end(self):
        r"""end(Vector4s self) -> std::vector< RMF::Vector< 4U > >::iterator"""
        return _RMF.Vector4s_end(self)

    def rbegin(self):
        r"""rbegin(Vector4s self) -> std::vector< RMF::Vector< 4U > >::reverse_iterator"""
        return _RMF.Vector4s_rbegin(self)

    def rend(self):
        r"""rend(Vector4s self) -> std::vector< RMF::Vector< 4U > >::reverse_iterator"""
        return _RMF.Vector4s_rend(self)

    def clear(self):
        r"""clear(Vector4s self)"""
        return _RMF.Vector4s_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vector4s self) -> std::vector< RMF::Vector< 4U > >::allocator_type"""
        return _RMF.Vector4s_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vector4s self)"""
        return _RMF.Vector4s_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vector4s self, std::vector< RMF::Vector< 4U > >::iterator pos) -> std::vector< RMF::Vector< 4U > >::iterator
        erase(Vector4s self, std::vector< RMF::Vector< 4U > >::iterator first, std::vector< RMF::Vector< 4U > >::iterator last) -> std::vector< RMF::Vector< 4U > >::iterator
        """
        return _RMF.Vector4s_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vector4s self) -> Vector4s
        __init__(Vector4s self, Vector4s other) -> Vector4s
        __init__(Vector4s self, std::vector< RMF::Vector< 4U > >::size_type size) -> Vector4s
        __init__(Vector4s self, std::vector< RMF::Vector< 4U > >::size_type size, Vector4 value) -> Vector4s
        """
        _RMF.Vector4s_swiginit(self, _RMF.new_Vector4s(*args))

    def push_back(self, x):
        r"""push_back(Vector4s self, Vector4 x)"""
        return _RMF.Vector4s_push_back(self, x)

    def front(self):
        r"""front(Vector4s self) -> Vector4"""
        return _RMF.Vector4s_front(self)

    def back(self):
        r"""back(Vector4s self) -> Vector4"""
        return _RMF.Vector4s_back(self)

    def assign(self, n, x):
        r"""assign(Vector4s self, std::vector< RMF::Vector< 4U > >::size_type n, Vector4 x)"""
        return _RMF.Vector4s_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vector4s self, std::vector< RMF::Vector< 4U > >::size_type new_size)
        resize(Vector4s self, std::vector< RMF::Vector< 4U > >::size_type new_size, Vector4 x)
        """
        return _RMF.Vector4s_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vector4s self, std::vector< RMF::Vector< 4U > >::iterator pos, Vector4 x) -> std::vector< RMF::Vector< 4U > >::iterator
        insert(Vector4s self, std::vector< RMF::Vector< 4U > >::iterator pos, std::vector< RMF::Vector< 4U > >::size_type n, Vector4 x)
        """
        return _RMF.Vector4s_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Vector4s self, std::vector< RMF::Vector< 4U > >::size_type n)"""
        return _RMF.Vector4s_reserve(self, n)

    def capacity(self):
        r"""capacity(Vector4s self) -> std::vector< RMF::Vector< 4U > >::size_type"""
        return _RMF.Vector4s_capacity(self)

    def __str__(self):
        r"""__str__(Vector4s self) -> std::string"""
        return _RMF.Vector4s___str__(self)

    def __repr__(self):
        r"""__repr__(Vector4s self) -> std::string"""
        return _RMF.Vector4s___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector4s

# Register Vector4s in _RMF:
_RMF.Vector4s_swigregister(Vector4s)

class IntsList(object):
    r"""Proxy of C++ std::vector< std::vector< int > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(IntsList self) -> RMF_SwigPyIterator"""
        return _RMF.IntsList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(IntsList self) -> bool"""
        return _RMF.IntsList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(IntsList self) -> bool"""
        return _RMF.IntsList___bool__(self)

    def __len__(self):
        r"""__len__(IntsList self) -> std::vector< std::vector< int > >::size_type"""
        return _RMF.IntsList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(IntsList self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j) -> IntsList"""
        return _RMF.IntsList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(IntsList self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)
        __setslice__(IntsList self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j, IntsList v)
        """
        return _RMF.IntsList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(IntsList self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)"""
        return _RMF.IntsList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(IntsList self, std::vector< std::vector< int > >::difference_type i)
        __delitem__(IntsList self, PySliceObject * slice)
        """
        return _RMF.IntsList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(IntsList self, PySliceObject * slice) -> IntsList
        __getitem__(IntsList self, std::vector< std::vector< int > >::difference_type i) -> Ints
        """
        return _RMF.IntsList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(IntsList self, PySliceObject * slice, IntsList v)
        __setitem__(IntsList self, PySliceObject * slice)
        __setitem__(IntsList self, std::vector< std::vector< int > >::difference_type i, Ints x)
        """
        return _RMF.IntsList___setitem__(self, *args)

    def pop(self):
        r"""pop(IntsList self) -> Ints"""
        return _RMF.IntsList_pop(self)

    def append(self, x):
        r"""append(IntsList self, Ints x)"""
        return _RMF.IntsList_append(self, x)

    def empty(self):
        r"""empty(IntsList self) -> bool"""
        return _RMF.IntsList_empty(self)

    def size(self):
        r"""size(IntsList self) -> std::vector< std::vector< int > >::size_type"""
        return _RMF.IntsList_size(self)

    def swap(self, v):
        r"""swap(IntsList self, IntsList v)"""
        return _RMF.IntsList_swap(self, v)

    def begin(self):
        r"""begin(IntsList self) -> std::vector< std::vector< int > >::iterator"""
        return _RMF.IntsList_begin(self)

    def end(self):
        r"""end(IntsList self) -> std::vector< std::vector< int > >::iterator"""
        return _RMF.IntsList_end(self)

    def rbegin(self):
        r"""rbegin(IntsList self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _RMF.IntsList_rbegin(self)

    def rend(self):
        r"""rend(IntsList self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _RMF.IntsList_rend(self)

    def clear(self):
        r"""clear(IntsList self)"""
        return _RMF.IntsList_clear(self)

    def get_allocator(self):
        r"""get_allocator(IntsList self) -> std::vector< std::vector< int > >::allocator_type"""
        return _RMF.IntsList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(IntsList self)"""
        return _RMF.IntsList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(IntsList self, std::vector< std::vector< int > >::iterator pos) -> std::vector< std::vector< int > >::iterator
        erase(IntsList self, std::vector< std::vector< int > >::iterator first, std::vector< std::vector< int > >::iterator last) -> std::vector< std::vector< int > >::iterator
        """
        return _RMF.IntsList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntsList self) -> IntsList
        __init__(IntsList self, IntsList other) -> IntsList
        __init__(IntsList self, std::vector< std::vector< int > >::size_type size) -> IntsList
        __init__(IntsList self, std::vector< std::vector< int > >::size_type size, Ints value) -> IntsList
        """
        _RMF.IntsList_swiginit(self, _RMF.new_IntsList(*args))

    def push_back(self, x):
        r"""push_back(IntsList self, Ints x)"""
        return _RMF.IntsList_push_back(self, x)

    def front(self):
        r"""front(IntsList self) -> Ints"""
        return _RMF.IntsList_front(self)

    def back(self):
        r"""back(IntsList self) -> Ints"""
        return _RMF.IntsList_back(self)

    def assign(self, n, x):
        r"""assign(IntsList self, std::vector< std::vector< int > >::size_type n, Ints x)"""
        return _RMF.IntsList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(IntsList self, std::vector< std::vector< int > >::size_type new_size)
        resize(IntsList self, std::vector< std::vector< int > >::size_type new_size, Ints x)
        """
        return _RMF.IntsList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(IntsList self, std::vector< std::vector< int > >::iterator pos, Ints x) -> std::vector< std::vector< int > >::iterator
        insert(IntsList self, std::vector< std::vector< int > >::iterator pos, std::vector< std::vector< int > >::size_type n, Ints x)
        """
        return _RMF.IntsList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(IntsList self, std::vector< std::vector< int > >::size_type n)"""
        return _RMF.IntsList_reserve(self, n)

    def capacity(self):
        r"""capacity(IntsList self) -> std::vector< std::vector< int > >::size_type"""
        return _RMF.IntsList_capacity(self)

    def __str__(self):
        r"""__str__(IntsList self) -> std::string"""
        return _RMF.IntsList___str__(self)

    def __repr__(self):
        r"""__repr__(IntsList self) -> std::string"""
        return _RMF.IntsList___repr__(self)
    __swig_destroy__ = _RMF.delete_IntsList

# Register IntsList in _RMF:
_RMF.IntsList_swigregister(IntsList)

class FloatsList(object):
    r"""Proxy of C++ std::vector< std::vector< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(FloatsList self) -> RMF_SwigPyIterator"""
        return _RMF.FloatsList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FloatsList self) -> bool"""
        return _RMF.FloatsList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FloatsList self) -> bool"""
        return _RMF.FloatsList___bool__(self)

    def __len__(self):
        r"""__len__(FloatsList self) -> std::vector< std::vector< float > >::size_type"""
        return _RMF.FloatsList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FloatsList self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j) -> FloatsList"""
        return _RMF.FloatsList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FloatsList self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)
        __setslice__(FloatsList self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j, FloatsList v)
        """
        return _RMF.FloatsList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FloatsList self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)"""
        return _RMF.FloatsList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FloatsList self, std::vector< std::vector< float > >::difference_type i)
        __delitem__(FloatsList self, PySliceObject * slice)
        """
        return _RMF.FloatsList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FloatsList self, PySliceObject * slice) -> FloatsList
        __getitem__(FloatsList self, std::vector< std::vector< float > >::difference_type i) -> Floats
        """
        return _RMF.FloatsList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FloatsList self, PySliceObject * slice, FloatsList v)
        __setitem__(FloatsList self, PySliceObject * slice)
        __setitem__(FloatsList self, std::vector< std::vector< float > >::difference_type i, Floats x)
        """
        return _RMF.FloatsList___setitem__(self, *args)

    def pop(self):
        r"""pop(FloatsList self) -> Floats"""
        return _RMF.FloatsList_pop(self)

    def append(self, x):
        r"""append(FloatsList self, Floats x)"""
        return _RMF.FloatsList_append(self, x)

    def empty(self):
        r"""empty(FloatsList self) -> bool"""
        return _RMF.FloatsList_empty(self)

    def size(self):
        r"""size(FloatsList self) -> std::vector< std::vector< float > >::size_type"""
        return _RMF.FloatsList_size(self)

    def swap(self, v):
        r"""swap(FloatsList self, FloatsList v)"""
        return _RMF.FloatsList_swap(self, v)

    def begin(self):
        r"""begin(FloatsList self) -> std::vector< std::vector< float > >::iterator"""
        return _RMF.FloatsList_begin(self)

    def end(self):
        r"""end(FloatsList self) -> std::vector< std::vector< float > >::iterator"""
        return _RMF.FloatsList_end(self)

    def rbegin(self):
        r"""rbegin(FloatsList self) -> std::vector< std::vector< float > >::reverse_iterator"""
        return _RMF.FloatsList_rbegin(self)

    def rend(self):
        r"""rend(FloatsList self) -> std::vector< std::vector< float > >::reverse_iterator"""
        return _RMF.FloatsList_rend(self)

    def clear(self):
        r"""clear(FloatsList self)"""
        return _RMF.FloatsList_clear(self)

    def get_allocator(self):
        r"""get_allocator(FloatsList self) -> std::vector< std::vector< float > >::allocator_type"""
        return _RMF.FloatsList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FloatsList self)"""
        return _RMF.FloatsList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FloatsList self, std::vector< std::vector< float > >::iterator pos) -> std::vector< std::vector< float > >::iterator
        erase(FloatsList self, std::vector< std::vector< float > >::iterator first, std::vector< std::vector< float > >::iterator last) -> std::vector< std::vector< float > >::iterator
        """
        return _RMF.FloatsList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatsList self) -> FloatsList
        __init__(FloatsList self, FloatsList other) -> FloatsList
        __init__(FloatsList self, std::vector< std::vector< float > >::size_type size) -> FloatsList
        __init__(FloatsList self, std::vector< std::vector< float > >::size_type size, Floats value) -> FloatsList
        """
        _RMF.FloatsList_swiginit(self, _RMF.new_FloatsList(*args))

    def push_back(self, x):
        r"""push_back(FloatsList self, Floats x)"""
        return _RMF.FloatsList_push_back(self, x)

    def front(self):
        r"""front(FloatsList self) -> Floats"""
        return _RMF.FloatsList_front(self)

    def back(self):
        r"""back(FloatsList self) -> Floats"""
        return _RMF.FloatsList_back(self)

    def assign(self, n, x):
        r"""assign(FloatsList self, std::vector< std::vector< float > >::size_type n, Floats x)"""
        return _RMF.FloatsList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FloatsList self, std::vector< std::vector< float > >::size_type new_size)
        resize(FloatsList self, std::vector< std::vector< float > >::size_type new_size, Floats x)
        """
        return _RMF.FloatsList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FloatsList self, std::vector< std::vector< float > >::iterator pos, Floats x) -> std::vector< std::vector< float > >::iterator
        insert(FloatsList self, std::vector< std::vector< float > >::iterator pos, std::vector< std::vector< float > >::size_type n, Floats x)
        """
        return _RMF.FloatsList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FloatsList self, std::vector< std::vector< float > >::size_type n)"""
        return _RMF.FloatsList_reserve(self, n)

    def capacity(self):
        r"""capacity(FloatsList self) -> std::vector< std::vector< float > >::size_type"""
        return _RMF.FloatsList_capacity(self)

    def __str__(self):
        r"""__str__(FloatsList self) -> std::string"""
        return _RMF.FloatsList___str__(self)

    def __repr__(self):
        r"""__repr__(FloatsList self) -> std::string"""
        return _RMF.FloatsList___repr__(self)
    __swig_destroy__ = _RMF.delete_FloatsList

# Register FloatsList in _RMF:
_RMF.FloatsList_swigregister(FloatsList)

class StringsList(object):
    r"""Proxy of C++ std::vector< std::vector< std::string > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(StringsList self) -> RMF_SwigPyIterator"""
        return _RMF.StringsList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringsList self) -> bool"""
        return _RMF.StringsList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringsList self) -> bool"""
        return _RMF.StringsList___bool__(self)

    def __len__(self):
        r"""__len__(StringsList self) -> std::vector< std::vector< std::string > >::size_type"""
        return _RMF.StringsList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(StringsList self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j) -> StringsList"""
        return _RMF.StringsList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StringsList self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j)
        __setslice__(StringsList self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j, StringsList v)
        """
        return _RMF.StringsList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(StringsList self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j)"""
        return _RMF.StringsList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StringsList self, std::vector< std::vector< std::string > >::difference_type i)
        __delitem__(StringsList self, PySliceObject * slice)
        """
        return _RMF.StringsList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StringsList self, PySliceObject * slice) -> StringsList
        __getitem__(StringsList self, std::vector< std::vector< std::string > >::difference_type i) -> Strings
        """
        return _RMF.StringsList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringsList self, PySliceObject * slice, StringsList v)
        __setitem__(StringsList self, PySliceObject * slice)
        __setitem__(StringsList self, std::vector< std::vector< std::string > >::difference_type i, Strings x)
        """
        return _RMF.StringsList___setitem__(self, *args)

    def pop(self):
        r"""pop(StringsList self) -> Strings"""
        return _RMF.StringsList_pop(self)

    def append(self, x):
        r"""append(StringsList self, Strings x)"""
        return _RMF.StringsList_append(self, x)

    def empty(self):
        r"""empty(StringsList self) -> bool"""
        return _RMF.StringsList_empty(self)

    def size(self):
        r"""size(StringsList self) -> std::vector< std::vector< std::string > >::size_type"""
        return _RMF.StringsList_size(self)

    def swap(self, v):
        r"""swap(StringsList self, StringsList v)"""
        return _RMF.StringsList_swap(self, v)

    def begin(self):
        r"""begin(StringsList self) -> std::vector< std::vector< std::string > >::iterator"""
        return _RMF.StringsList_begin(self)

    def end(self):
        r"""end(StringsList self) -> std::vector< std::vector< std::string > >::iterator"""
        return _RMF.StringsList_end(self)

    def rbegin(self):
        r"""rbegin(StringsList self) -> std::vector< std::vector< std::string > >::reverse_iterator"""
        return _RMF.StringsList_rbegin(self)

    def rend(self):
        r"""rend(StringsList self) -> std::vector< std::vector< std::string > >::reverse_iterator"""
        return _RMF.StringsList_rend(self)

    def clear(self):
        r"""clear(StringsList self)"""
        return _RMF.StringsList_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringsList self) -> std::vector< std::vector< std::string > >::allocator_type"""
        return _RMF.StringsList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StringsList self)"""
        return _RMF.StringsList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StringsList self, std::vector< std::vector< std::string > >::iterator pos) -> std::vector< std::vector< std::string > >::iterator
        erase(StringsList self, std::vector< std::vector< std::string > >::iterator first, std::vector< std::vector< std::string > >::iterator last) -> std::vector< std::vector< std::string > >::iterator
        """
        return _RMF.StringsList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringsList self) -> StringsList
        __init__(StringsList self, StringsList other) -> StringsList
        __init__(StringsList self, std::vector< std::vector< std::string > >::size_type size) -> StringsList
        __init__(StringsList self, std::vector< std::vector< std::string > >::size_type size, Strings value) -> StringsList
        """
        _RMF.StringsList_swiginit(self, _RMF.new_StringsList(*args))

    def push_back(self, x):
        r"""push_back(StringsList self, Strings x)"""
        return _RMF.StringsList_push_back(self, x)

    def front(self):
        r"""front(StringsList self) -> Strings"""
        return _RMF.StringsList_front(self)

    def back(self):
        r"""back(StringsList self) -> Strings"""
        return _RMF.StringsList_back(self)

    def assign(self, n, x):
        r"""assign(StringsList self, std::vector< std::vector< std::string > >::size_type n, Strings x)"""
        return _RMF.StringsList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StringsList self, std::vector< std::vector< std::string > >::size_type new_size)
        resize(StringsList self, std::vector< std::vector< std::string > >::size_type new_size, Strings x)
        """
        return _RMF.StringsList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StringsList self, std::vector< std::vector< std::string > >::iterator pos, Strings x) -> std::vector< std::vector< std::string > >::iterator
        insert(StringsList self, std::vector< std::vector< std::string > >::iterator pos, std::vector< std::vector< std::string > >::size_type n, Strings x)
        """
        return _RMF.StringsList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(StringsList self, std::vector< std::vector< std::string > >::size_type n)"""
        return _RMF.StringsList_reserve(self, n)

    def capacity(self):
        r"""capacity(StringsList self) -> std::vector< std::vector< std::string > >::size_type"""
        return _RMF.StringsList_capacity(self)

    def __str__(self):
        r"""__str__(StringsList self) -> std::string"""
        return _RMF.StringsList___str__(self)

    def __repr__(self):
        r"""__repr__(StringsList self) -> std::string"""
        return _RMF.StringsList___repr__(self)
    __swig_destroy__ = _RMF.delete_StringsList

# Register StringsList in _RMF:
_RMF.StringsList_swigregister(StringsList)

class Vector3sList(object):
    r"""Proxy of C++ std::vector< std::vector< RMF::Vector< 3U > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Vector3sList self) -> RMF_SwigPyIterator"""
        return _RMF.Vector3sList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vector3sList self) -> bool"""
        return _RMF.Vector3sList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vector3sList self) -> bool"""
        return _RMF.Vector3sList___bool__(self)

    def __len__(self):
        r"""__len__(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::size_type"""
        return _RMF.Vector3sList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type j) -> Vector3sList"""
        return _RMF.Vector3sList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type j)
        __setslice__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type j, Vector3sList v)
        """
        return _RMF.Vector3sList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type j)"""
        return _RMF.Vector3sList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i)
        __delitem__(Vector3sList self, PySliceObject * slice)
        """
        return _RMF.Vector3sList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vector3sList self, PySliceObject * slice) -> Vector3sList
        __getitem__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i) -> Vector3s
        """
        return _RMF.Vector3sList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vector3sList self, PySliceObject * slice, Vector3sList v)
        __setitem__(Vector3sList self, PySliceObject * slice)
        __setitem__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i, Vector3s x)
        """
        return _RMF.Vector3sList___setitem__(self, *args)

    def pop(self):
        r"""pop(Vector3sList self) -> Vector3s"""
        return _RMF.Vector3sList_pop(self)

    def append(self, x):
        r"""append(Vector3sList self, Vector3s x)"""
        return _RMF.Vector3sList_append(self, x)

    def empty(self):
        r"""empty(Vector3sList self) -> bool"""
        return _RMF.Vector3sList_empty(self)

    def size(self):
        r"""size(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::size_type"""
        return _RMF.Vector3sList_size(self)

    def swap(self, v):
        r"""swap(Vector3sList self, Vector3sList v)"""
        return _RMF.Vector3sList_swap(self, v)

    def begin(self):
        r"""begin(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::iterator"""
        return _RMF.Vector3sList_begin(self)

    def end(self):
        r"""end(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::iterator"""
        return _RMF.Vector3sList_end(self)

    def rbegin(self):
        r"""rbegin(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::reverse_iterator"""
        return _RMF.Vector3sList_rbegin(self)

    def rend(self):
        r"""rend(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::reverse_iterator"""
        return _RMF.Vector3sList_rend(self)

    def clear(self):
        r"""clear(Vector3sList self)"""
        return _RMF.Vector3sList_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::allocator_type"""
        return _RMF.Vector3sList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vector3sList self)"""
        return _RMF.Vector3sList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::iterator pos) -> std::vector< std::vector< RMF::Vector< 3U > > >::iterator
        erase(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::iterator first, std::vector< std::vector< RMF::Vector< 3U > > >::iterator last) -> std::vector< std::vector< RMF::Vector< 3U > > >::iterator
        """
        return _RMF.Vector3sList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vector3sList self) -> Vector3sList
        __init__(Vector3sList self, Vector3sList other) -> Vector3sList
        __init__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type size) -> Vector3sList
        __init__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type size, Vector3s value) -> Vector3sList
        """
        _RMF.Vector3sList_swiginit(self, _RMF.new_Vector3sList(*args))

    def push_back(self, x):
        r"""push_back(Vector3sList self, Vector3s x)"""
        return _RMF.Vector3sList_push_back(self, x)

    def front(self):
        r"""front(Vector3sList self) -> Vector3s"""
        return _RMF.Vector3sList_front(self)

    def back(self):
        r"""back(Vector3sList self) -> Vector3s"""
        return _RMF.Vector3sList_back(self)

    def assign(self, n, x):
        r"""assign(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type n, Vector3s x)"""
        return _RMF.Vector3sList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type new_size)
        resize(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type new_size, Vector3s x)
        """
        return _RMF.Vector3sList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::iterator pos, Vector3s x) -> std::vector< std::vector< RMF::Vector< 3U > > >::iterator
        insert(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::iterator pos, std::vector< std::vector< RMF::Vector< 3U > > >::size_type n, Vector3s x)
        """
        return _RMF.Vector3sList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type n)"""
        return _RMF.Vector3sList_reserve(self, n)

    def capacity(self):
        r"""capacity(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::size_type"""
        return _RMF.Vector3sList_capacity(self)

    def __str__(self):
        r"""__str__(Vector3sList self) -> std::string"""
        return _RMF.Vector3sList___str__(self)

    def __repr__(self):
        r"""__repr__(Vector3sList self) -> std::string"""
        return _RMF.Vector3sList___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector3sList

# Register Vector3sList in _RMF:
_RMF.Vector3sList_swigregister(Vector3sList)

class IntTag(object):
    r"""Proxy of C++ RMF::IntTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IntTag self) -> IntTag"""
        _RMF.IntTag_swiginit(self, _RMF.new_IntTag())
    __swig_destroy__ = _RMF.delete_IntTag

# Register IntTag in _RMF:
_RMF.IntTag_swigregister(IntTag)

class FloatTag(object):
    r"""Proxy of C++ RMF::FloatTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FloatTag self) -> FloatTag"""
        _RMF.FloatTag_swiginit(self, _RMF.new_FloatTag())
    __swig_destroy__ = _RMF.delete_FloatTag

# Register FloatTag in _RMF:
_RMF.FloatTag_swigregister(FloatTag)

class StringTag(object):
    r"""Proxy of C++ RMF::StringTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(StringTag self) -> StringTag"""
        _RMF.StringTag_swiginit(self, _RMF.new_StringTag())
    __swig_destroy__ = _RMF.delete_StringTag

# Register StringTag in _RMF:
_RMF.StringTag_swigregister(StringTag)

class Vector3Tag(object):
    r"""Proxy of C++ RMF::Vector3Tag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vector3Tag self) -> Vector3Tag"""
        _RMF.Vector3Tag_swiginit(self, _RMF.new_Vector3Tag())
    __swig_destroy__ = _RMF.delete_Vector3Tag

# Register Vector3Tag in _RMF:
_RMF.Vector3Tag_swigregister(Vector3Tag)

class Vector4Tag(object):
    r"""Proxy of C++ RMF::Vector4Tag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vector4Tag self) -> Vector4Tag"""
        _RMF.Vector4Tag_swiginit(self, _RMF.new_Vector4Tag())
    __swig_destroy__ = _RMF.delete_Vector4Tag

# Register Vector4Tag in _RMF:
_RMF.Vector4Tag_swigregister(Vector4Tag)

class IntsTag(object):
    r"""Proxy of C++ RMF::IntsTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IntsTag self) -> IntsTag"""
        _RMF.IntsTag_swiginit(self, _RMF.new_IntsTag())
    __swig_destroy__ = _RMF.delete_IntsTag

# Register IntsTag in _RMF:
_RMF.IntsTag_swigregister(IntsTag)

class FloatsTag(object):
    r"""Proxy of C++ RMF::FloatsTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FloatsTag self) -> FloatsTag"""
        _RMF.FloatsTag_swiginit(self, _RMF.new_FloatsTag())
    __swig_destroy__ = _RMF.delete_FloatsTag

# Register FloatsTag in _RMF:
_RMF.FloatsTag_swigregister(FloatsTag)

class StringsTag(object):
    r"""Proxy of C++ RMF::StringsTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(StringsTag self) -> StringsTag"""
        _RMF.StringsTag_swiginit(self, _RMF.new_StringsTag())
    __swig_destroy__ = _RMF.delete_StringsTag

# Register StringsTag in _RMF:
_RMF.StringsTag_swigregister(StringsTag)

class Vector3sTag(object):
    r"""Proxy of C++ RMF::Vector3sTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vector3sTag self) -> Vector3sTag"""
        _RMF.Vector3sTag_swiginit(self, _RMF.new_Vector3sTag())
    __swig_destroy__ = _RMF.delete_Vector3sTag

# Register Vector3sTag in _RMF:
_RMF.Vector3sTag_swigregister(Vector3sTag)

class Vector4sTag(object):
    r"""Proxy of C++ RMF::Vector4sTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vector4sTag self) -> Vector4sTag"""
        _RMF.Vector4sTag_swiginit(self, _RMF.new_Vector4sTag())
    __swig_destroy__ = _RMF.delete_Vector4sTag

# Register Vector4sTag in _RMF:
_RMF.Vector4sTag_swigregister(Vector4sTag)


int_tag = IntTag()
float_tag = FloatTag()
string_tag = StringTag()
vector3_tag = Vector3Tag()
vector4_tag = Vector4Tag()
ints_tag = IntsTag()
floats_tag = FloatsTag()
strings_tag = StringsTag()
vector3s_tag = Vector3sTag()
#vector4s_tag = Vector4sTag()
_tag_list = [int_tag, float_tag, string_tag, vector3_tag, vector4_tag,ints_tag, floats_tag, strings_tag, vector3s_tag]

class IntKey(object):
    r"""Proxy of C++ RMF::ID< RMF::IntTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(IntKey self, unsigned int i) -> IntKey
        __init__(IntKey self) -> IntKey
        """
        _RMF.IntKey_swiginit(self, _RMF.new_IntKey(*args))

    def get_index(self):
        r"""get_index(IntKey self) -> unsigned int"""
        return _RMF.IntKey_get_index(self)

    def __eq__(self, o):
        r"""__eq__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___ge__(self, o)

    def __le__(self, o):
        r"""__le__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___le__(self, o)

    def __hash__(self):
        r"""__hash__(IntKey self) -> std::size_t"""
        return _RMF.IntKey___hash__(self)

    def __str__(self):
        r"""__str__(IntKey self) -> std::string"""
        return _RMF.IntKey___str__(self)

    def __repr__(self):
        r"""__repr__(IntKey self) -> std::string"""
        return _RMF.IntKey___repr__(self)
    __swig_destroy__ = _RMF.delete_IntKey

# Register IntKey in _RMF:
_RMF.IntKey_swigregister(IntKey)

class FloatKey(object):
    r"""Proxy of C++ RMF::ID< RMF::FloatTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(FloatKey self, unsigned int i) -> FloatKey
        __init__(FloatKey self) -> FloatKey
        """
        _RMF.FloatKey_swiginit(self, _RMF.new_FloatKey(*args))

    def get_index(self):
        r"""get_index(FloatKey self) -> unsigned int"""
        return _RMF.FloatKey_get_index(self)

    def __eq__(self, o):
        r"""__eq__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___ge__(self, o)

    def __le__(self, o):
        r"""__le__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___le__(self, o)

    def __hash__(self):
        r"""__hash__(FloatKey self) -> std::size_t"""
        return _RMF.FloatKey___hash__(self)

    def __str__(self):
        r"""__str__(FloatKey self) -> std::string"""
        return _RMF.FloatKey___str__(self)

    def __repr__(self):
        r"""__repr__(FloatKey self) -> std::string"""
        return _RMF.FloatKey___repr__(self)
    __swig_destroy__ = _RMF.delete_FloatKey

# Register FloatKey in _RMF:
_RMF.FloatKey_swigregister(FloatKey)

class StringKey(object):
    r"""Proxy of C++ RMF::ID< RMF::StringTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(StringKey self, unsigned int i) -> StringKey
        __init__(StringKey self) -> StringKey
        """
        _RMF.StringKey_swiginit(self, _RMF.new_StringKey(*args))

    def get_index(self):
        r"""get_index(StringKey self) -> unsigned int"""
        return _RMF.StringKey_get_index(self)

    def __eq__(self, o):
        r"""__eq__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___ge__(self, o)

    def __le__(self, o):
        r"""__le__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___le__(self, o)

    def __hash__(self):
        r"""__hash__(StringKey self) -> std::size_t"""
        return _RMF.StringKey___hash__(self)

    def __str__(self):
        r"""__str__(StringKey self) -> std::string"""
        return _RMF.StringKey___str__(self)

    def __repr__(self):
        r"""__repr__(StringKey self) -> std::string"""
        return _RMF.StringKey___repr__(self)
    __swig_destroy__ = _RMF.delete_StringKey

# Register StringKey in _RMF:
_RMF.StringKey_swigregister(StringKey)

class Vector3Key(object):
    r"""Proxy of C++ RMF::ID< RMF::Vector3Tag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(Vector3Key self, unsigned int i) -> Vector3Key
        __init__(Vector3Key self) -> Vector3Key
        """
        _RMF.Vector3Key_swiginit(self, _RMF.new_Vector3Key(*args))

    def get_index(self):
        r"""get_index(Vector3Key self) -> unsigned int"""
        return _RMF.Vector3Key_get_index(self)

    def __eq__(self, o):
        r"""__eq__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___ge__(self, o)

    def __le__(self, o):
        r"""__le__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___le__(self, o)

    def __hash__(self):
        r"""__hash__(Vector3Key self) -> std::size_t"""
        return _RMF.Vector3Key___hash__(self)

    def __str__(self):
        r"""__str__(Vector3Key self) -> std::string"""
        return _RMF.Vector3Key___str__(self)

    def __repr__(self):
        r"""__repr__(Vector3Key self) -> std::string"""
        return _RMF.Vector3Key___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector3Key

# Register Vector3Key in _RMF:
_RMF.Vector3Key_swigregister(Vector3Key)

class Vector4Key(object):
    r"""Proxy of C++ RMF::ID< RMF::Vector4Tag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(Vector4Key self, unsigned int i) -> Vector4Key
        __init__(Vector4Key self) -> Vector4Key
        """
        _RMF.Vector4Key_swiginit(self, _RMF.new_Vector4Key(*args))

    def get_index(self):
        r"""get_index(Vector4Key self) -> unsigned int"""
        return _RMF.Vector4Key_get_index(self)

    def __eq__(self, o):
        r"""__eq__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___ge__(self, o)

    def __le__(self, o):
        r"""__le__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___le__(self, o)

    def __hash__(self):
        r"""__hash__(Vector4Key self) -> std::size_t"""
        return _RMF.Vector4Key___hash__(self)

    def __str__(self):
        r"""__str__(Vector4Key self) -> std::string"""
        return _RMF.Vector4Key___str__(self)

    def __repr__(self):
        r"""__repr__(Vector4Key self) -> std::string"""
        return _RMF.Vector4Key___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector4Key

# Register Vector4Key in _RMF:
_RMF.Vector4Key_swigregister(Vector4Key)

class IntsKey(object):
    r"""Proxy of C++ RMF::ID< RMF::IntsTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(IntsKey self, unsigned int i) -> IntsKey
        __init__(IntsKey self) -> IntsKey
        """
        _RMF.IntsKey_swiginit(self, _RMF.new_IntsKey(*args))

    def get_index(self):
        r"""get_index(IntsKey self) -> unsigned int"""
        return _RMF.IntsKey_get_index(self)

    def __eq__(self, o):
        r"""__eq__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___ge__(self, o)

    def __le__(self, o):
        r"""__le__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___le__(self, o)

    def __hash__(self):
        r"""__hash__(IntsKey self) -> std::size_t"""
        return _RMF.IntsKey___hash__(self)

    def __str__(self):
        r"""__str__(IntsKey self) -> std::string"""
        return _RMF.IntsKey___str__(self)

    def __repr__(self):
        r"""__repr__(IntsKey self) -> std::string"""
        return _RMF.IntsKey___repr__(self)
    __swig_destroy__ = _RMF.delete_IntsKey

# Register IntsKey in _RMF:
_RMF.IntsKey_swigregister(IntsKey)

class FloatsKey(object):
    r"""Proxy of C++ RMF::ID< RMF::FloatsTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(FloatsKey self, unsigned int i) -> FloatsKey
        __init__(FloatsKey self) -> FloatsKey
        """
        _RMF.FloatsKey_swiginit(self, _RMF.new_FloatsKey(*args))

    def get_index(self):
        r"""get_index(FloatsKey self) -> unsigned int"""
        return _RMF.FloatsKey_get_index(self)

    def __eq__(self, o):
        r"""__eq__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___ge__(self, o)

    def __le__(self, o):
        r"""__le__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___le__(self, o)

    def __hash__(self):
        r"""__hash__(FloatsKey self) -> std::size_t"""
        return _RMF.FloatsKey___hash__(self)

    def __str__(self):
        r"""__str__(FloatsKey self) -> std::string"""
        return _RMF.FloatsKey___str__(self)

    def __repr__(self):
        r"""__repr__(FloatsKey self) -> std::string"""
        return _RMF.FloatsKey___repr__(self)
    __swig_destroy__ = _RMF.delete_FloatsKey

# Register FloatsKey in _RMF:
_RMF.FloatsKey_swigregister(FloatsKey)

class StringsKey(object):
    r"""Proxy of C++ RMF::ID< RMF::StringsTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(StringsKey self, unsigned int i) -> StringsKey
        __init__(StringsKey self) -> StringsKey
        """
        _RMF.StringsKey_swiginit(self, _RMF.new_StringsKey(*args))

    def get_index(self):
        r"""get_index(StringsKey self) -> unsigned int"""
        return _RMF.StringsKey_get_index(self)

    def __eq__(self, o):
        r"""__eq__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___ge__(self, o)

    def __le__(self, o):
        r"""__le__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___le__(self, o)

    def __hash__(self):
        r"""__hash__(StringsKey self) -> std::size_t"""
        return _RMF.StringsKey___hash__(self)

    def __str__(self):
        r"""__str__(StringsKey self) -> std::string"""
        return _RMF.StringsKey___str__(self)

    def __repr__(self):
        r"""__repr__(StringsKey self) -> std::string"""
        return _RMF.StringsKey___repr__(self)
    __swig_destroy__ = _RMF.delete_StringsKey

# Register StringsKey in _RMF:
_RMF.StringsKey_swigregister(StringsKey)

class Vector3sKey(object):
    r"""Proxy of C++ RMF::ID< RMF::Vector3sTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(Vector3sKey self, unsigned int i) -> Vector3sKey
        __init__(Vector3sKey self) -> Vector3sKey
        """
        _RMF.Vector3sKey_swiginit(self, _RMF.new_Vector3sKey(*args))

    def get_index(self):
        r"""get_index(Vector3sKey self) -> unsigned int"""
        return _RMF.Vector3sKey_get_index(self)

    def __eq__(self, o):
        r"""__eq__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___ge__(self, o)

    def __le__(self, o):
        r"""__le__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___le__(self, o)

    def __hash__(self):
        r"""__hash__(Vector3sKey self) -> std::size_t"""
        return _RMF.Vector3sKey___hash__(self)

    def __str__(self):
        r"""__str__(Vector3sKey self) -> std::string"""
        return _RMF.Vector3sKey___str__(self)

    def __repr__(self):
        r"""__repr__(Vector3sKey self) -> std::string"""
        return _RMF.Vector3sKey___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector3sKey

# Register Vector3sKey in _RMF:
_RMF.Vector3sKey_swigregister(Vector3sKey)

class Vector4sKey(object):
    r"""Proxy of C++ RMF::ID< RMF::Vector4sTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(Vector4sKey self, unsigned int i) -> Vector4sKey
        __init__(Vector4sKey self) -> Vector4sKey
        """
        _RMF.Vector4sKey_swiginit(self, _RMF.new_Vector4sKey(*args))

    def get_index(self):
        r"""get_index(Vector4sKey self) -> unsigned int"""
        return _RMF.Vector4sKey_get_index(self)

    def __eq__(self, o):
        r"""__eq__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___ge__(self, o)

    def __le__(self, o):
        r"""__le__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___le__(self, o)

    def __hash__(self):
        r"""__hash__(Vector4sKey self) -> std::size_t"""
        return _RMF.Vector4sKey___hash__(self)

    def __str__(self):
        r"""__str__(Vector4sKey self) -> std::string"""
        return _RMF.Vector4sKey___str__(self)

    def __repr__(self):
        r"""__repr__(Vector4sKey self) -> std::string"""
        return _RMF.Vector4sKey___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector4sKey

# Register Vector4sKey in _RMF:
_RMF.Vector4sKey_swigregister(Vector4sKey)

class IntKeys(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::IntTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(IntKeys self) -> RMF_SwigPyIterator"""
        return _RMF.IntKeys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(IntKeys self) -> bool"""
        return _RMF.IntKeys___nonzero__(self)

    def __bool__(self):
        r"""__bool__(IntKeys self) -> bool"""
        return _RMF.IntKeys___bool__(self)

    def __len__(self):
        r"""__len__(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::size_type"""
        return _RMF.IntKeys___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i, std::vector< RMF::ID< RMF::IntTag > >::difference_type j) -> IntKeys"""
        return _RMF.IntKeys___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i, std::vector< RMF::ID< RMF::IntTag > >::difference_type j)
        __setslice__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i, std::vector< RMF::ID< RMF::IntTag > >::difference_type j, IntKeys v)
        """
        return _RMF.IntKeys___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i, std::vector< RMF::ID< RMF::IntTag > >::difference_type j)"""
        return _RMF.IntKeys___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i)
        __delitem__(IntKeys self, PySliceObject * slice)
        """
        return _RMF.IntKeys___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(IntKeys self, PySliceObject * slice) -> IntKeys
        __getitem__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i) -> IntKey
        """
        return _RMF.IntKeys___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(IntKeys self, PySliceObject * slice, IntKeys v)
        __setitem__(IntKeys self, PySliceObject * slice)
        __setitem__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i, IntKey x)
        """
        return _RMF.IntKeys___setitem__(self, *args)

    def pop(self):
        r"""pop(IntKeys self) -> IntKey"""
        return _RMF.IntKeys_pop(self)

    def append(self, x):
        r"""append(IntKeys self, IntKey x)"""
        return _RMF.IntKeys_append(self, x)

    def empty(self):
        r"""empty(IntKeys self) -> bool"""
        return _RMF.IntKeys_empty(self)

    def size(self):
        r"""size(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::size_type"""
        return _RMF.IntKeys_size(self)

    def swap(self, v):
        r"""swap(IntKeys self, IntKeys v)"""
        return _RMF.IntKeys_swap(self, v)

    def begin(self):
        r"""begin(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::iterator"""
        return _RMF.IntKeys_begin(self)

    def end(self):
        r"""end(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::iterator"""
        return _RMF.IntKeys_end(self)

    def rbegin(self):
        r"""rbegin(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::reverse_iterator"""
        return _RMF.IntKeys_rbegin(self)

    def rend(self):
        r"""rend(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::reverse_iterator"""
        return _RMF.IntKeys_rend(self)

    def clear(self):
        r"""clear(IntKeys self)"""
        return _RMF.IntKeys_clear(self)

    def get_allocator(self):
        r"""get_allocator(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::allocator_type"""
        return _RMF.IntKeys_get_allocator(self)

    def pop_back(self):
        r"""pop_back(IntKeys self)"""
        return _RMF.IntKeys_pop_back(self)

    def erase(self, *args):
        r"""
        erase(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::iterator pos) -> std::vector< RMF::ID< RMF::IntTag > >::iterator
        erase(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::iterator first, std::vector< RMF::ID< RMF::IntTag > >::iterator last) -> std::vector< RMF::ID< RMF::IntTag > >::iterator
        """
        return _RMF.IntKeys_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntKeys self) -> IntKeys
        __init__(IntKeys self, IntKeys other) -> IntKeys
        __init__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::size_type size) -> IntKeys
        __init__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::size_type size, IntKey value) -> IntKeys
        """
        _RMF.IntKeys_swiginit(self, _RMF.new_IntKeys(*args))

    def push_back(self, x):
        r"""push_back(IntKeys self, IntKey x)"""
        return _RMF.IntKeys_push_back(self, x)

    def front(self):
        r"""front(IntKeys self) -> IntKey"""
        return _RMF.IntKeys_front(self)

    def back(self):
        r"""back(IntKeys self) -> IntKey"""
        return _RMF.IntKeys_back(self)

    def assign(self, n, x):
        r"""assign(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::size_type n, IntKey x)"""
        return _RMF.IntKeys_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::size_type new_size)
        resize(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::size_type new_size, IntKey x)
        """
        return _RMF.IntKeys_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::iterator pos, IntKey x) -> std::vector< RMF::ID< RMF::IntTag > >::iterator
        insert(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::iterator pos, std::vector< RMF::ID< RMF::IntTag > >::size_type n, IntKey x)
        """
        return _RMF.IntKeys_insert(self, *args)

    def reserve(self, n):
        r"""reserve(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::size_type n)"""
        return _RMF.IntKeys_reserve(self, n)

    def capacity(self):
        r"""capacity(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::size_type"""
        return _RMF.IntKeys_capacity(self)

    def __str__(self):
        r"""__str__(IntKeys self) -> std::string"""
        return _RMF.IntKeys___str__(self)

    def __repr__(self):
        r"""__repr__(IntKeys self) -> std::string"""
        return _RMF.IntKeys___repr__(self)
    __swig_destroy__ = _RMF.delete_IntKeys

# Register IntKeys in _RMF:
_RMF.IntKeys_swigregister(IntKeys)

class FloatKeys(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::FloatTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(FloatKeys self) -> RMF_SwigPyIterator"""
        return _RMF.FloatKeys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FloatKeys self) -> bool"""
        return _RMF.FloatKeys___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FloatKeys self) -> bool"""
        return _RMF.FloatKeys___bool__(self)

    def __len__(self):
        r"""__len__(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::size_type"""
        return _RMF.FloatKeys___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatTag > >::difference_type j) -> FloatKeys"""
        return _RMF.FloatKeys___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatTag > >::difference_type j)
        __setslice__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatTag > >::difference_type j, FloatKeys v)
        """
        return _RMF.FloatKeys___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatTag > >::difference_type j)"""
        return _RMF.FloatKeys___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i)
        __delitem__(FloatKeys self, PySliceObject * slice)
        """
        return _RMF.FloatKeys___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FloatKeys self, PySliceObject * slice) -> FloatKeys
        __getitem__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i) -> FloatKey
        """
        return _RMF.FloatKeys___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FloatKeys self, PySliceObject * slice, FloatKeys v)
        __setitem__(FloatKeys self, PySliceObject * slice)
        __setitem__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i, FloatKey x)
        """
        return _RMF.FloatKeys___setitem__(self, *args)

    def pop(self):
        r"""pop(FloatKeys self) -> FloatKey"""
        return _RMF.FloatKeys_pop(self)

    def append(self, x):
        r"""append(FloatKeys self, FloatKey x)"""
        return _RMF.FloatKeys_append(self, x)

    def empty(self):
        r"""empty(FloatKeys self) -> bool"""
        return _RMF.FloatKeys_empty(self)

    def size(self):
        r"""size(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::size_type"""
        return _RMF.FloatKeys_size(self)

    def swap(self, v):
        r"""swap(FloatKeys self, FloatKeys v)"""
        return _RMF.FloatKeys_swap(self, v)

    def begin(self):
        r"""begin(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::iterator"""
        return _RMF.FloatKeys_begin(self)

    def end(self):
        r"""end(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::iterator"""
        return _RMF.FloatKeys_end(self)

    def rbegin(self):
        r"""rbegin(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::reverse_iterator"""
        return _RMF.FloatKeys_rbegin(self)

    def rend(self):
        r"""rend(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::reverse_iterator"""
        return _RMF.FloatKeys_rend(self)

    def clear(self):
        r"""clear(FloatKeys self)"""
        return _RMF.FloatKeys_clear(self)

    def get_allocator(self):
        r"""get_allocator(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::allocator_type"""
        return _RMF.FloatKeys_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FloatKeys self)"""
        return _RMF.FloatKeys_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::iterator pos) -> std::vector< RMF::ID< RMF::FloatTag > >::iterator
        erase(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::iterator first, std::vector< RMF::ID< RMF::FloatTag > >::iterator last) -> std::vector< RMF::ID< RMF::FloatTag > >::iterator
        """
        return _RMF.FloatKeys_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatKeys self) -> FloatKeys
        __init__(FloatKeys self, FloatKeys other) -> FloatKeys
        __init__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::size_type size) -> FloatKeys
        __init__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::size_type size, FloatKey value) -> FloatKeys
        """
        _RMF.FloatKeys_swiginit(self, _RMF.new_FloatKeys(*args))

    def push_back(self, x):
        r"""push_back(FloatKeys self, FloatKey x)"""
        return _RMF.FloatKeys_push_back(self, x)

    def front(self):
        r"""front(FloatKeys self) -> FloatKey"""
        return _RMF.FloatKeys_front(self)

    def back(self):
        r"""back(FloatKeys self) -> FloatKey"""
        return _RMF.FloatKeys_back(self)

    def assign(self, n, x):
        r"""assign(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::size_type n, FloatKey x)"""
        return _RMF.FloatKeys_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::size_type new_size)
        resize(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::size_type new_size, FloatKey x)
        """
        return _RMF.FloatKeys_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::iterator pos, FloatKey x) -> std::vector< RMF::ID< RMF::FloatTag > >::iterator
        insert(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::iterator pos, std::vector< RMF::ID< RMF::FloatTag > >::size_type n, FloatKey x)
        """
        return _RMF.FloatKeys_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::size_type n)"""
        return _RMF.FloatKeys_reserve(self, n)

    def capacity(self):
        r"""capacity(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::size_type"""
        return _RMF.FloatKeys_capacity(self)

    def __str__(self):
        r"""__str__(FloatKeys self) -> std::string"""
        return _RMF.FloatKeys___str__(self)

    def __repr__(self):
        r"""__repr__(FloatKeys self) -> std::string"""
        return _RMF.FloatKeys___repr__(self)
    __swig_destroy__ = _RMF.delete_FloatKeys

# Register FloatKeys in _RMF:
_RMF.FloatKeys_swigregister(FloatKeys)

class StringKeys(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::StringTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(StringKeys self) -> RMF_SwigPyIterator"""
        return _RMF.StringKeys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringKeys self) -> bool"""
        return _RMF.StringKeys___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringKeys self) -> bool"""
        return _RMF.StringKeys___bool__(self)

    def __len__(self):
        r"""__len__(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::size_type"""
        return _RMF.StringKeys___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i, std::vector< RMF::ID< RMF::StringTag > >::difference_type j) -> StringKeys"""
        return _RMF.StringKeys___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i, std::vector< RMF::ID< RMF::StringTag > >::difference_type j)
        __setslice__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i, std::vector< RMF::ID< RMF::StringTag > >::difference_type j, StringKeys v)
        """
        return _RMF.StringKeys___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i, std::vector< RMF::ID< RMF::StringTag > >::difference_type j)"""
        return _RMF.StringKeys___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i)
        __delitem__(StringKeys self, PySliceObject * slice)
        """
        return _RMF.StringKeys___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StringKeys self, PySliceObject * slice) -> StringKeys
        __getitem__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i) -> StringKey
        """
        return _RMF.StringKeys___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringKeys self, PySliceObject * slice, StringKeys v)
        __setitem__(StringKeys self, PySliceObject * slice)
        __setitem__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i, StringKey x)
        """
        return _RMF.StringKeys___setitem__(self, *args)

    def pop(self):
        r"""pop(StringKeys self) -> StringKey"""
        return _RMF.StringKeys_pop(self)

    def append(self, x):
        r"""append(StringKeys self, StringKey x)"""
        return _RMF.StringKeys_append(self, x)

    def empty(self):
        r"""empty(StringKeys self) -> bool"""
        return _RMF.StringKeys_empty(self)

    def size(self):
        r"""size(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::size_type"""
        return _RMF.StringKeys_size(self)

    def swap(self, v):
        r"""swap(StringKeys self, StringKeys v)"""
        return _RMF.StringKeys_swap(self, v)

    def begin(self):
        r"""begin(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::iterator"""
        return _RMF.StringKeys_begin(self)

    def end(self):
        r"""end(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::iterator"""
        return _RMF.StringKeys_end(self)

    def rbegin(self):
        r"""rbegin(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::reverse_iterator"""
        return _RMF.StringKeys_rbegin(self)

    def rend(self):
        r"""rend(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::reverse_iterator"""
        return _RMF.StringKeys_rend(self)

    def clear(self):
        r"""clear(StringKeys self)"""
        return _RMF.StringKeys_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::allocator_type"""
        return _RMF.StringKeys_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StringKeys self)"""
        return _RMF.StringKeys_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::iterator pos) -> std::vector< RMF::ID< RMF::StringTag > >::iterator
        erase(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::iterator first, std::vector< RMF::ID< RMF::StringTag > >::iterator last) -> std::vector< RMF::ID< RMF::StringTag > >::iterator
        """
        return _RMF.StringKeys_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringKeys self) -> StringKeys
        __init__(StringKeys self, StringKeys other) -> StringKeys
        __init__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::size_type size) -> StringKeys
        __init__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::size_type size, StringKey value) -> StringKeys
        """
        _RMF.StringKeys_swiginit(self, _RMF.new_StringKeys(*args))

    def push_back(self, x):
        r"""push_back(StringKeys self, StringKey x)"""
        return _RMF.StringKeys_push_back(self, x)

    def front(self):
        r"""front(StringKeys self) -> StringKey"""
        return _RMF.StringKeys_front(self)

    def back(self):
        r"""back(StringKeys self) -> StringKey"""
        return _RMF.StringKeys_back(self)

    def assign(self, n, x):
        r"""assign(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::size_type n, StringKey x)"""
        return _RMF.StringKeys_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::size_type new_size)
        resize(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::size_type new_size, StringKey x)
        """
        return _RMF.StringKeys_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::iterator pos, StringKey x) -> std::vector< RMF::ID< RMF::StringTag > >::iterator
        insert(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::iterator pos, std::vector< RMF::ID< RMF::StringTag > >::size_type n, StringKey x)
        """
        return _RMF.StringKeys_insert(self, *args)

    def reserve(self, n):
        r"""reserve(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::size_type n)"""
        return _RMF.StringKeys_reserve(self, n)

    def capacity(self):
        r"""capacity(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::size_type"""
        return _RMF.StringKeys_capacity(self)

    def __str__(self):
        r"""__str__(StringKeys self) -> std::string"""
        return _RMF.StringKeys___str__(self)

    def __repr__(self):
        r"""__repr__(StringKeys self) -> std::string"""
        return _RMF.StringKeys___repr__(self)
    __swig_destroy__ = _RMF.delete_StringKeys

# Register StringKeys in _RMF:
_RMF.StringKeys_swigregister(StringKeys)

class Vector3Keys(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::Vector3Tag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Vector3Keys self) -> RMF_SwigPyIterator"""
        return _RMF.Vector3Keys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vector3Keys self) -> bool"""
        return _RMF.Vector3Keys___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vector3Keys self) -> bool"""
        return _RMF.Vector3Keys___bool__(self)

    def __len__(self):
        r"""__len__(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::size_type"""
        return _RMF.Vector3Keys___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type j) -> Vector3Keys"""
        return _RMF.Vector3Keys___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type j)
        __setslice__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type j, Vector3Keys v)
        """
        return _RMF.Vector3Keys___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type j)"""
        return _RMF.Vector3Keys___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i)
        __delitem__(Vector3Keys self, PySliceObject * slice)
        """
        return _RMF.Vector3Keys___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vector3Keys self, PySliceObject * slice) -> Vector3Keys
        __getitem__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i) -> Vector3Key
        """
        return _RMF.Vector3Keys___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vector3Keys self, PySliceObject * slice, Vector3Keys v)
        __setitem__(Vector3Keys self, PySliceObject * slice)
        __setitem__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i, Vector3Key x)
        """
        return _RMF.Vector3Keys___setitem__(self, *args)

    def pop(self):
        r"""pop(Vector3Keys self) -> Vector3Key"""
        return _RMF.Vector3Keys_pop(self)

    def append(self, x):
        r"""append(Vector3Keys self, Vector3Key x)"""
        return _RMF.Vector3Keys_append(self, x)

    def empty(self):
        r"""empty(Vector3Keys self) -> bool"""
        return _RMF.Vector3Keys_empty(self)

    def size(self):
        r"""size(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::size_type"""
        return _RMF.Vector3Keys_size(self)

    def swap(self, v):
        r"""swap(Vector3Keys self, Vector3Keys v)"""
        return _RMF.Vector3Keys_swap(self, v)

    def begin(self):
        r"""begin(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::iterator"""
        return _RMF.Vector3Keys_begin(self)

    def end(self):
        r"""end(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::iterator"""
        return _RMF.Vector3Keys_end(self)

    def rbegin(self):
        r"""rbegin(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::reverse_iterator"""
        return _RMF.Vector3Keys_rbegin(self)

    def rend(self):
        r"""rend(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::reverse_iterator"""
        return _RMF.Vector3Keys_rend(self)

    def clear(self):
        r"""clear(Vector3Keys self)"""
        return _RMF.Vector3Keys_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::allocator_type"""
        return _RMF.Vector3Keys_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vector3Keys self)"""
        return _RMF.Vector3Keys_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::iterator pos) -> std::vector< RMF::ID< RMF::Vector3Tag > >::iterator
        erase(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::iterator first, std::vector< RMF::ID< RMF::Vector3Tag > >::iterator last) -> std::vector< RMF::ID< RMF::Vector3Tag > >::iterator
        """
        return _RMF.Vector3Keys_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vector3Keys self) -> Vector3Keys
        __init__(Vector3Keys self, Vector3Keys other) -> Vector3Keys
        __init__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type size) -> Vector3Keys
        __init__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type size, Vector3Key value) -> Vector3Keys
        """
        _RMF.Vector3Keys_swiginit(self, _RMF.new_Vector3Keys(*args))

    def push_back(self, x):
        r"""push_back(Vector3Keys self, Vector3Key x)"""
        return _RMF.Vector3Keys_push_back(self, x)

    def front(self):
        r"""front(Vector3Keys self) -> Vector3Key"""
        return _RMF.Vector3Keys_front(self)

    def back(self):
        r"""back(Vector3Keys self) -> Vector3Key"""
        return _RMF.Vector3Keys_back(self)

    def assign(self, n, x):
        r"""assign(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type n, Vector3Key x)"""
        return _RMF.Vector3Keys_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type new_size)
        resize(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type new_size, Vector3Key x)
        """
        return _RMF.Vector3Keys_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::iterator pos, Vector3Key x) -> std::vector< RMF::ID< RMF::Vector3Tag > >::iterator
        insert(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::iterator pos, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type n, Vector3Key x)
        """
        return _RMF.Vector3Keys_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type n)"""
        return _RMF.Vector3Keys_reserve(self, n)

    def capacity(self):
        r"""capacity(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::size_type"""
        return _RMF.Vector3Keys_capacity(self)

    def __str__(self):
        r"""__str__(Vector3Keys self) -> std::string"""
        return _RMF.Vector3Keys___str__(self)

    def __repr__(self):
        r"""__repr__(Vector3Keys self) -> std::string"""
        return _RMF.Vector3Keys___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector3Keys

# Register Vector3Keys in _RMF:
_RMF.Vector3Keys_swigregister(Vector3Keys)

class Vector4Keys(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::Vector4Tag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Vector4Keys self) -> RMF_SwigPyIterator"""
        return _RMF.Vector4Keys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vector4Keys self) -> bool"""
        return _RMF.Vector4Keys___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vector4Keys self) -> bool"""
        return _RMF.Vector4Keys___bool__(self)

    def __len__(self):
        r"""__len__(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::size_type"""
        return _RMF.Vector4Keys___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type j) -> Vector4Keys"""
        return _RMF.Vector4Keys___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type j)
        __setslice__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type j, Vector4Keys v)
        """
        return _RMF.Vector4Keys___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type j)"""
        return _RMF.Vector4Keys___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i)
        __delitem__(Vector4Keys self, PySliceObject * slice)
        """
        return _RMF.Vector4Keys___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vector4Keys self, PySliceObject * slice) -> Vector4Keys
        __getitem__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i) -> Vector4Key
        """
        return _RMF.Vector4Keys___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vector4Keys self, PySliceObject * slice, Vector4Keys v)
        __setitem__(Vector4Keys self, PySliceObject * slice)
        __setitem__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i, Vector4Key x)
        """
        return _RMF.Vector4Keys___setitem__(self, *args)

    def pop(self):
        r"""pop(Vector4Keys self) -> Vector4Key"""
        return _RMF.Vector4Keys_pop(self)

    def append(self, x):
        r"""append(Vector4Keys self, Vector4Key x)"""
        return _RMF.Vector4Keys_append(self, x)

    def empty(self):
        r"""empty(Vector4Keys self) -> bool"""
        return _RMF.Vector4Keys_empty(self)

    def size(self):
        r"""size(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::size_type"""
        return _RMF.Vector4Keys_size(self)

    def swap(self, v):
        r"""swap(Vector4Keys self, Vector4Keys v)"""
        return _RMF.Vector4Keys_swap(self, v)

    def begin(self):
        r"""begin(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::iterator"""
        return _RMF.Vector4Keys_begin(self)

    def end(self):
        r"""end(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::iterator"""
        return _RMF.Vector4Keys_end(self)

    def rbegin(self):
        r"""rbegin(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::reverse_iterator"""
        return _RMF.Vector4Keys_rbegin(self)

    def rend(self):
        r"""rend(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::reverse_iterator"""
        return _RMF.Vector4Keys_rend(self)

    def clear(self):
        r"""clear(Vector4Keys self)"""
        return _RMF.Vector4Keys_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::allocator_type"""
        return _RMF.Vector4Keys_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vector4Keys self)"""
        return _RMF.Vector4Keys_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::iterator pos) -> std::vector< RMF::ID< RMF::Vector4Tag > >::iterator
        erase(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::iterator first, std::vector< RMF::ID< RMF::Vector4Tag > >::iterator last) -> std::vector< RMF::ID< RMF::Vector4Tag > >::iterator
        """
        return _RMF.Vector4Keys_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vector4Keys self) -> Vector4Keys
        __init__(Vector4Keys self, Vector4Keys other) -> Vector4Keys
        __init__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type size) -> Vector4Keys
        __init__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type size, Vector4Key value) -> Vector4Keys
        """
        _RMF.Vector4Keys_swiginit(self, _RMF.new_Vector4Keys(*args))

    def push_back(self, x):
        r"""push_back(Vector4Keys self, Vector4Key x)"""
        return _RMF.Vector4Keys_push_back(self, x)

    def front(self):
        r"""front(Vector4Keys self) -> Vector4Key"""
        return _RMF.Vector4Keys_front(self)

    def back(self):
        r"""back(Vector4Keys self) -> Vector4Key"""
        return _RMF.Vector4Keys_back(self)

    def assign(self, n, x):
        r"""assign(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type n, Vector4Key x)"""
        return _RMF.Vector4Keys_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type new_size)
        resize(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type new_size, Vector4Key x)
        """
        return _RMF.Vector4Keys_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::iterator pos, Vector4Key x) -> std::vector< RMF::ID< RMF::Vector4Tag > >::iterator
        insert(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::iterator pos, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type n, Vector4Key x)
        """
        return _RMF.Vector4Keys_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type n)"""
        return _RMF.Vector4Keys_reserve(self, n)

    def capacity(self):
        r"""capacity(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::size_type"""
        return _RMF.Vector4Keys_capacity(self)

    def __str__(self):
        r"""__str__(Vector4Keys self) -> std::string"""
        return _RMF.Vector4Keys___str__(self)

    def __repr__(self):
        r"""__repr__(Vector4Keys self) -> std::string"""
        return _RMF.Vector4Keys___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector4Keys

# Register Vector4Keys in _RMF:
_RMF.Vector4Keys_swigregister(Vector4Keys)

class IntsKeys(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::IntsTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(IntsKeys self) -> RMF_SwigPyIterator"""
        return _RMF.IntsKeys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(IntsKeys self) -> bool"""
        return _RMF.IntsKeys___nonzero__(self)

    def __bool__(self):
        r"""__bool__(IntsKeys self) -> bool"""
        return _RMF.IntsKeys___bool__(self)

    def __len__(self):
        r"""__len__(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::size_type"""
        return _RMF.IntsKeys___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i, std::vector< RMF::ID< RMF::IntsTag > >::difference_type j) -> IntsKeys"""
        return _RMF.IntsKeys___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i, std::vector< RMF::ID< RMF::IntsTag > >::difference_type j)
        __setslice__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i, std::vector< RMF::ID< RMF::IntsTag > >::difference_type j, IntsKeys v)
        """
        return _RMF.IntsKeys___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i, std::vector< RMF::ID< RMF::IntsTag > >::difference_type j)"""
        return _RMF.IntsKeys___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i)
        __delitem__(IntsKeys self, PySliceObject * slice)
        """
        return _RMF.IntsKeys___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(IntsKeys self, PySliceObject * slice) -> IntsKeys
        __getitem__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i) -> IntsKey
        """
        return _RMF.IntsKeys___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(IntsKeys self, PySliceObject * slice, IntsKeys v)
        __setitem__(IntsKeys self, PySliceObject * slice)
        __setitem__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i, IntsKey x)
        """
        return _RMF.IntsKeys___setitem__(self, *args)

    def pop(self):
        r"""pop(IntsKeys self) -> IntsKey"""
        return _RMF.IntsKeys_pop(self)

    def append(self, x):
        r"""append(IntsKeys self, IntsKey x)"""
        return _RMF.IntsKeys_append(self, x)

    def empty(self):
        r"""empty(IntsKeys self) -> bool"""
        return _RMF.IntsKeys_empty(self)

    def size(self):
        r"""size(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::size_type"""
        return _RMF.IntsKeys_size(self)

    def swap(self, v):
        r"""swap(IntsKeys self, IntsKeys v)"""
        return _RMF.IntsKeys_swap(self, v)

    def begin(self):
        r"""begin(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::iterator"""
        return _RMF.IntsKeys_begin(self)

    def end(self):
        r"""end(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::iterator"""
        return _RMF.IntsKeys_end(self)

    def rbegin(self):
        r"""rbegin(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::reverse_iterator"""
        return _RMF.IntsKeys_rbegin(self)

    def rend(self):
        r"""rend(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::reverse_iterator"""
        return _RMF.IntsKeys_rend(self)

    def clear(self):
        r"""clear(IntsKeys self)"""
        return _RMF.IntsKeys_clear(self)

    def get_allocator(self):
        r"""get_allocator(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::allocator_type"""
        return _RMF.IntsKeys_get_allocator(self)

    def pop_back(self):
        r"""pop_back(IntsKeys self)"""
        return _RMF.IntsKeys_pop_back(self)

    def erase(self, *args):
        r"""
        erase(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::iterator pos) -> std::vector< RMF::ID< RMF::IntsTag > >::iterator
        erase(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::iterator first, std::vector< RMF::ID< RMF::IntsTag > >::iterator last) -> std::vector< RMF::ID< RMF::IntsTag > >::iterator
        """
        return _RMF.IntsKeys_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntsKeys self) -> IntsKeys
        __init__(IntsKeys self, IntsKeys other) -> IntsKeys
        __init__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::size_type size) -> IntsKeys
        __init__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::size_type size, IntsKey value) -> IntsKeys
        """
        _RMF.IntsKeys_swiginit(self, _RMF.new_IntsKeys(*args))

    def push_back(self, x):
        r"""push_back(IntsKeys self, IntsKey x)"""
        return _RMF.IntsKeys_push_back(self, x)

    def front(self):
        r"""front(IntsKeys self) -> IntsKey"""
        return _RMF.IntsKeys_front(self)

    def back(self):
        r"""back(IntsKeys self) -> IntsKey"""
        return _RMF.IntsKeys_back(self)

    def assign(self, n, x):
        r"""assign(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::size_type n, IntsKey x)"""
        return _RMF.IntsKeys_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::size_type new_size)
        resize(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::size_type new_size, IntsKey x)
        """
        return _RMF.IntsKeys_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::iterator pos, IntsKey x) -> std::vector< RMF::ID< RMF::IntsTag > >::iterator
        insert(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::iterator pos, std::vector< RMF::ID< RMF::IntsTag > >::size_type n, IntsKey x)
        """
        return _RMF.IntsKeys_insert(self, *args)

    def reserve(self, n):
        r"""reserve(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::size_type n)"""
        return _RMF.IntsKeys_reserve(self, n)

    def capacity(self):
        r"""capacity(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::size_type"""
        return _RMF.IntsKeys_capacity(self)

    def __str__(self):
        r"""__str__(IntsKeys self) -> std::string"""
        return _RMF.IntsKeys___str__(self)

    def __repr__(self):
        r"""__repr__(IntsKeys self) -> std::string"""
        return _RMF.IntsKeys___repr__(self)
    __swig_destroy__ = _RMF.delete_IntsKeys

# Register IntsKeys in _RMF:
_RMF.IntsKeys_swigregister(IntsKeys)

class FloatsKeys(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::FloatsTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(FloatsKeys self) -> RMF_SwigPyIterator"""
        return _RMF.FloatsKeys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FloatsKeys self) -> bool"""
        return _RMF.FloatsKeys___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FloatsKeys self) -> bool"""
        return _RMF.FloatsKeys___bool__(self)

    def __len__(self):
        r"""__len__(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::size_type"""
        return _RMF.FloatsKeys___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type j) -> FloatsKeys"""
        return _RMF.FloatsKeys___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type j)
        __setslice__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type j, FloatsKeys v)
        """
        return _RMF.FloatsKeys___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type j)"""
        return _RMF.FloatsKeys___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i)
        __delitem__(FloatsKeys self, PySliceObject * slice)
        """
        return _RMF.FloatsKeys___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FloatsKeys self, PySliceObject * slice) -> FloatsKeys
        __getitem__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i) -> FloatsKey
        """
        return _RMF.FloatsKeys___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FloatsKeys self, PySliceObject * slice, FloatsKeys v)
        __setitem__(FloatsKeys self, PySliceObject * slice)
        __setitem__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i, FloatsKey x)
        """
        return _RMF.FloatsKeys___setitem__(self, *args)

    def pop(self):
        r"""pop(FloatsKeys self) -> FloatsKey"""
        return _RMF.FloatsKeys_pop(self)

    def append(self, x):
        r"""append(FloatsKeys self, FloatsKey x)"""
        return _RMF.FloatsKeys_append(self, x)

    def empty(self):
        r"""empty(FloatsKeys self) -> bool"""
        return _RMF.FloatsKeys_empty(self)

    def size(self):
        r"""size(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::size_type"""
        return _RMF.FloatsKeys_size(self)

    def swap(self, v):
        r"""swap(FloatsKeys self, FloatsKeys v)"""
        return _RMF.FloatsKeys_swap(self, v)

    def begin(self):
        r"""begin(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::iterator"""
        return _RMF.FloatsKeys_begin(self)

    def end(self):
        r"""end(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::iterator"""
        return _RMF.FloatsKeys_end(self)

    def rbegin(self):
        r"""rbegin(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::reverse_iterator"""
        return _RMF.FloatsKeys_rbegin(self)

    def rend(self):
        r"""rend(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::reverse_iterator"""
        return _RMF.FloatsKeys_rend(self)

    def clear(self):
        r"""clear(FloatsKeys self)"""
        return _RMF.FloatsKeys_clear(self)

    def get_allocator(self):
        r"""get_allocator(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::allocator_type"""
        return _RMF.FloatsKeys_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FloatsKeys self)"""
        return _RMF.FloatsKeys_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::iterator pos) -> std::vector< RMF::ID< RMF::FloatsTag > >::iterator
        erase(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::iterator first, std::vector< RMF::ID< RMF::FloatsTag > >::iterator last) -> std::vector< RMF::ID< RMF::FloatsTag > >::iterator
        """
        return _RMF.FloatsKeys_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatsKeys self) -> FloatsKeys
        __init__(FloatsKeys self, FloatsKeys other) -> FloatsKeys
        __init__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type size) -> FloatsKeys
        __init__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type size, FloatsKey value) -> FloatsKeys
        """
        _RMF.FloatsKeys_swiginit(self, _RMF.new_FloatsKeys(*args))

    def push_back(self, x):
        r"""push_back(FloatsKeys self, FloatsKey x)"""
        return _RMF.FloatsKeys_push_back(self, x)

    def front(self):
        r"""front(FloatsKeys self) -> FloatsKey"""
        return _RMF.FloatsKeys_front(self)

    def back(self):
        r"""back(FloatsKeys self) -> FloatsKey"""
        return _RMF.FloatsKeys_back(self)

    def assign(self, n, x):
        r"""assign(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type n, FloatsKey x)"""
        return _RMF.FloatsKeys_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type new_size)
        resize(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type new_size, FloatsKey x)
        """
        return _RMF.FloatsKeys_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::iterator pos, FloatsKey x) -> std::vector< RMF::ID< RMF::FloatsTag > >::iterator
        insert(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::iterator pos, std::vector< RMF::ID< RMF::FloatsTag > >::size_type n, FloatsKey x)
        """
        return _RMF.FloatsKeys_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type n)"""
        return _RMF.FloatsKeys_reserve(self, n)

    def capacity(self):
        r"""capacity(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::size_type"""
        return _RMF.FloatsKeys_capacity(self)

    def __str__(self):
        r"""__str__(FloatsKeys self) -> std::string"""
        return _RMF.FloatsKeys___str__(self)

    def __repr__(self):
        r"""__repr__(FloatsKeys self) -> std::string"""
        return _RMF.FloatsKeys___repr__(self)
    __swig_destroy__ = _RMF.delete_FloatsKeys

# Register FloatsKeys in _RMF:
_RMF.FloatsKeys_swigregister(FloatsKeys)

class StringsKeys(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::StringsTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(StringsKeys self) -> RMF_SwigPyIterator"""
        return _RMF.StringsKeys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringsKeys self) -> bool"""
        return _RMF.StringsKeys___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringsKeys self) -> bool"""
        return _RMF.StringsKeys___bool__(self)

    def __len__(self):
        r"""__len__(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::size_type"""
        return _RMF.StringsKeys___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i, std::vector< RMF::ID< RMF::StringsTag > >::difference_type j) -> StringsKeys"""
        return _RMF.StringsKeys___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i, std::vector< RMF::ID< RMF::StringsTag > >::difference_type j)
        __setslice__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i, std::vector< RMF::ID< RMF::StringsTag > >::difference_type j, StringsKeys v)
        """
        return _RMF.StringsKeys___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i, std::vector< RMF::ID< RMF::StringsTag > >::difference_type j)"""
        return _RMF.StringsKeys___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i)
        __delitem__(StringsKeys self, PySliceObject * slice)
        """
        return _RMF.StringsKeys___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StringsKeys self, PySliceObject * slice) -> StringsKeys
        __getitem__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i) -> StringsKey
        """
        return _RMF.StringsKeys___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringsKeys self, PySliceObject * slice, StringsKeys v)
        __setitem__(StringsKeys self, PySliceObject * slice)
        __setitem__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i, StringsKey x)
        """
        return _RMF.StringsKeys___setitem__(self, *args)

    def pop(self):
        r"""pop(StringsKeys self) -> StringsKey"""
        return _RMF.StringsKeys_pop(self)

    def append(self, x):
        r"""append(StringsKeys self, StringsKey x)"""
        return _RMF.StringsKeys_append(self, x)

    def empty(self):
        r"""empty(StringsKeys self) -> bool"""
        return _RMF.StringsKeys_empty(self)

    def size(self):
        r"""size(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::size_type"""
        return _RMF.StringsKeys_size(self)

    def swap(self, v):
        r"""swap(StringsKeys self, StringsKeys v)"""
        return _RMF.StringsKeys_swap(self, v)

    def begin(self):
        r"""begin(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::iterator"""
        return _RMF.StringsKeys_begin(self)

    def end(self):
        r"""end(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::iterator"""
        return _RMF.StringsKeys_end(self)

    def rbegin(self):
        r"""rbegin(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::reverse_iterator"""
        return _RMF.StringsKeys_rbegin(self)

    def rend(self):
        r"""rend(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::reverse_iterator"""
        return _RMF.StringsKeys_rend(self)

    def clear(self):
        r"""clear(StringsKeys self)"""
        return _RMF.StringsKeys_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::allocator_type"""
        return _RMF.StringsKeys_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StringsKeys self)"""
        return _RMF.StringsKeys_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::iterator pos) -> std::vector< RMF::ID< RMF::StringsTag > >::iterator
        erase(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::iterator first, std::vector< RMF::ID< RMF::StringsTag > >::iterator last) -> std::vector< RMF::ID< RMF::StringsTag > >::iterator
        """
        return _RMF.StringsKeys_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringsKeys self) -> StringsKeys
        __init__(StringsKeys self, StringsKeys other) -> StringsKeys
        __init__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::size_type size) -> StringsKeys
        __init__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::size_type size, StringsKey value) -> StringsKeys
        """
        _RMF.StringsKeys_swiginit(self, _RMF.new_StringsKeys(*args))

    def push_back(self, x):
        r"""push_back(StringsKeys self, StringsKey x)"""
        return _RMF.StringsKeys_push_back(self, x)

    def front(self):
        r"""front(StringsKeys self) -> StringsKey"""
        return _RMF.StringsKeys_front(self)

    def back(self):
        r"""back(StringsKeys self) -> StringsKey"""
        return _RMF.StringsKeys_back(self)

    def assign(self, n, x):
        r"""assign(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::size_type n, StringsKey x)"""
        return _RMF.StringsKeys_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::size_type new_size)
        resize(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::size_type new_size, StringsKey x)
        """
        return _RMF.StringsKeys_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::iterator pos, StringsKey x) -> std::vector< RMF::ID< RMF::StringsTag > >::iterator
        insert(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::iterator pos, std::vector< RMF::ID< RMF::StringsTag > >::size_type n, StringsKey x)
        """
        return _RMF.StringsKeys_insert(self, *args)

    def reserve(self, n):
        r"""reserve(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::size_type n)"""
        return _RMF.StringsKeys_reserve(self, n)

    def capacity(self):
        r"""capacity(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::size_type"""
        return _RMF.StringsKeys_capacity(self)

    def __str__(self):
        r"""__str__(StringsKeys self) -> std::string"""
        return _RMF.StringsKeys___str__(self)

    def __repr__(self):
        r"""__repr__(StringsKeys self) -> std::string"""
        return _RMF.StringsKeys___repr__(self)
    __swig_destroy__ = _RMF.delete_StringsKeys

# Register StringsKeys in _RMF:
_RMF.StringsKeys_swigregister(StringsKeys)

class Vector3sKeys(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::Vector3sTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Vector3sKeys self) -> RMF_SwigPyIterator"""
        return _RMF.Vector3sKeys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vector3sKeys self) -> bool"""
        return _RMF.Vector3sKeys___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vector3sKeys self) -> bool"""
        return _RMF.Vector3sKeys___bool__(self)

    def __len__(self):
        r"""__len__(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::size_type"""
        return _RMF.Vector3sKeys___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type j) -> Vector3sKeys"""
        return _RMF.Vector3sKeys___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type j)
        __setslice__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type j, Vector3sKeys v)
        """
        return _RMF.Vector3sKeys___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type j)"""
        return _RMF.Vector3sKeys___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i)
        __delitem__(Vector3sKeys self, PySliceObject * slice)
        """
        return _RMF.Vector3sKeys___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vector3sKeys self, PySliceObject * slice) -> Vector3sKeys
        __getitem__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i) -> Vector3sKey
        """
        return _RMF.Vector3sKeys___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vector3sKeys self, PySliceObject * slice, Vector3sKeys v)
        __setitem__(Vector3sKeys self, PySliceObject * slice)
        __setitem__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i, Vector3sKey x)
        """
        return _RMF.Vector3sKeys___setitem__(self, *args)

    def pop(self):
        r"""pop(Vector3sKeys self) -> Vector3sKey"""
        return _RMF.Vector3sKeys_pop(self)

    def append(self, x):
        r"""append(Vector3sKeys self, Vector3sKey x)"""
        return _RMF.Vector3sKeys_append(self, x)

    def empty(self):
        r"""empty(Vector3sKeys self) -> bool"""
        return _RMF.Vector3sKeys_empty(self)

    def size(self):
        r"""size(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::size_type"""
        return _RMF.Vector3sKeys_size(self)

    def swap(self, v):
        r"""swap(Vector3sKeys self, Vector3sKeys v)"""
        return _RMF.Vector3sKeys_swap(self, v)

    def begin(self):
        r"""begin(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::iterator"""
        return _RMF.Vector3sKeys_begin(self)

    def end(self):
        r"""end(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::iterator"""
        return _RMF.Vector3sKeys_end(self)

    def rbegin(self):
        r"""rbegin(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::reverse_iterator"""
        return _RMF.Vector3sKeys_rbegin(self)

    def rend(self):
        r"""rend(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::reverse_iterator"""
        return _RMF.Vector3sKeys_rend(self)

    def clear(self):
        r"""clear(Vector3sKeys self)"""
        return _RMF.Vector3sKeys_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::allocator_type"""
        return _RMF.Vector3sKeys_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vector3sKeys self)"""
        return _RMF.Vector3sKeys_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::iterator pos) -> std::vector< RMF::ID< RMF::Vector3sTag > >::iterator
        erase(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::iterator first, std::vector< RMF::ID< RMF::Vector3sTag > >::iterator last) -> std::vector< RMF::ID< RMF::Vector3sTag > >::iterator
        """
        return _RMF.Vector3sKeys_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vector3sKeys self) -> Vector3sKeys
        __init__(Vector3sKeys self, Vector3sKeys other) -> Vector3sKeys
        __init__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type size) -> Vector3sKeys
        __init__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type size, Vector3sKey value) -> Vector3sKeys
        """
        _RMF.Vector3sKeys_swiginit(self, _RMF.new_Vector3sKeys(*args))

    def push_back(self, x):
        r"""push_back(Vector3sKeys self, Vector3sKey x)"""
        return _RMF.Vector3sKeys_push_back(self, x)

    def front(self):
        r"""front(Vector3sKeys self) -> Vector3sKey"""
        return _RMF.Vector3sKeys_front(self)

    def back(self):
        r"""back(Vector3sKeys self) -> Vector3sKey"""
        return _RMF.Vector3sKeys_back(self)

    def assign(self, n, x):
        r"""assign(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type n, Vector3sKey x)"""
        return _RMF.Vector3sKeys_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type new_size)
        resize(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type new_size, Vector3sKey x)
        """
        return _RMF.Vector3sKeys_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::iterator pos, Vector3sKey x) -> std::vector< RMF::ID< RMF::Vector3sTag > >::iterator
        insert(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::iterator pos, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type n, Vector3sKey x)
        """
        return _RMF.Vector3sKeys_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type n)"""
        return _RMF.Vector3sKeys_reserve(self, n)

    def capacity(self):
        r"""capacity(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::size_type"""
        return _RMF.Vector3sKeys_capacity(self)

    def __str__(self):
        r"""__str__(Vector3sKeys self) -> std::string"""
        return _RMF.Vector3sKeys___str__(self)

    def __repr__(self):
        r"""__repr__(Vector3sKeys self) -> std::string"""
        return _RMF.Vector3sKeys___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector3sKeys

# Register Vector3sKeys in _RMF:
_RMF.Vector3sKeys_swigregister(Vector3sKeys)

class Vector4sKeys(object):
    r"""Proxy of C++ std::vector< RMF::ID< RMF::Vector4sTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(Vector4sKeys self) -> RMF_SwigPyIterator"""
        return _RMF.Vector4sKeys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vector4sKeys self) -> bool"""
        return _RMF.Vector4sKeys___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vector4sKeys self) -> bool"""
        return _RMF.Vector4sKeys___bool__(self)

    def __len__(self):
        r"""__len__(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::size_type"""
        return _RMF.Vector4sKeys___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type j) -> Vector4sKeys"""
        return _RMF.Vector4sKeys___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type j)
        __setslice__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type j, Vector4sKeys v)
        """
        return _RMF.Vector4sKeys___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type j)"""
        return _RMF.Vector4sKeys___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i)
        __delitem__(Vector4sKeys self, PySliceObject * slice)
        """
        return _RMF.Vector4sKeys___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vector4sKeys self, PySliceObject * slice) -> Vector4sKeys
        __getitem__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i) -> Vector4sKey
        """
        return _RMF.Vector4sKeys___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vector4sKeys self, PySliceObject * slice, Vector4sKeys v)
        __setitem__(Vector4sKeys self, PySliceObject * slice)
        __setitem__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i, Vector4sKey x)
        """
        return _RMF.Vector4sKeys___setitem__(self, *args)

    def pop(self):
        r"""pop(Vector4sKeys self) -> Vector4sKey"""
        return _RMF.Vector4sKeys_pop(self)

    def append(self, x):
        r"""append(Vector4sKeys self, Vector4sKey x)"""
        return _RMF.Vector4sKeys_append(self, x)

    def empty(self):
        r"""empty(Vector4sKeys self) -> bool"""
        return _RMF.Vector4sKeys_empty(self)

    def size(self):
        r"""size(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::size_type"""
        return _RMF.Vector4sKeys_size(self)

    def swap(self, v):
        r"""swap(Vector4sKeys self, Vector4sKeys v)"""
        return _RMF.Vector4sKeys_swap(self, v)

    def begin(self):
        r"""begin(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::iterator"""
        return _RMF.Vector4sKeys_begin(self)

    def end(self):
        r"""end(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::iterator"""
        return _RMF.Vector4sKeys_end(self)

    def rbegin(self):
        r"""rbegin(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::reverse_iterator"""
        return _RMF.Vector4sKeys_rbegin(self)

    def rend(self):
        r"""rend(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::reverse_iterator"""
        return _RMF.Vector4sKeys_rend(self)

    def clear(self):
        r"""clear(Vector4sKeys self)"""
        return _RMF.Vector4sKeys_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::allocator_type"""
        return _RMF.Vector4sKeys_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vector4sKeys self)"""
        return _RMF.Vector4sKeys_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::iterator pos) -> std::vector< RMF::ID< RMF::Vector4sTag > >::iterator
        erase(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::iterator first, std::vector< RMF::ID< RMF::Vector4sTag > >::iterator last) -> std::vector< RMF::ID< RMF::Vector4sTag > >::iterator
        """
        return _RMF.Vector4sKeys_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vector4sKeys self) -> Vector4sKeys
        __init__(Vector4sKeys self, Vector4sKeys other) -> Vector4sKeys
        __init__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type size) -> Vector4sKeys
        __init__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type size, Vector4sKey value) -> Vector4sKeys
        """
        _RMF.Vector4sKeys_swiginit(self, _RMF.new_Vector4sKeys(*args))

    def push_back(self, x):
        r"""push_back(Vector4sKeys self, Vector4sKey x)"""
        return _RMF.Vector4sKeys_push_back(self, x)

    def front(self):
        r"""front(Vector4sKeys self) -> Vector4sKey"""
        return _RMF.Vector4sKeys_front(self)

    def back(self):
        r"""back(Vector4sKeys self) -> Vector4sKey"""
        return _RMF.Vector4sKeys_back(self)

    def assign(self, n, x):
        r"""assign(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type n, Vector4sKey x)"""
        return _RMF.Vector4sKeys_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type new_size)
        resize(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type new_size, Vector4sKey x)
        """
        return _RMF.Vector4sKeys_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::iterator pos, Vector4sKey x) -> std::vector< RMF::ID< RMF::Vector4sTag > >::iterator
        insert(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::iterator pos, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type n, Vector4sKey x)
        """
        return _RMF.Vector4sKeys_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type n)"""
        return _RMF.Vector4sKeys_reserve(self, n)

    def capacity(self):
        r"""capacity(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::size_type"""
        return _RMF.Vector4sKeys_capacity(self)

    def __str__(self):
        r"""__str__(Vector4sKeys self) -> std::string"""
        return _RMF.Vector4sKeys___str__(self)

    def __repr__(self):
        r"""__repr__(Vector4sKeys self) -> std::string"""
        return _RMF.Vector4sKeys___repr__(self)
    __swig_destroy__ = _RMF.delete_Vector4sKeys

# Register Vector4sKeys in _RMF:
_RMF.Vector4sKeys_swigregister(Vector4sKeys)



def _handle_nullable(n):
   if n.get_is_null(): return None
   else: return n.get()

class _NullableInt(object):
    r"""Proxy of C++ RMF::Nullable< RMF::Int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        r"""__init__(_NullableInt self, _NullableInt o) -> _NullableInt"""
        _RMF._NullableInt_swiginit(self, _RMF.new__NullableInt(o))

    def get(self):
        r"""get(_NullableInt self) -> int"""
        return _RMF._NullableInt_get(self)

    def get_is_null(self):
        r"""get_is_null(_NullableInt self) -> bool"""
        return _RMF._NullableInt_get_is_null(self)

    def get_ptr(self):
        r"""get_ptr(_NullableInt self) -> int const *"""
        return _RMF._NullableInt_get_ptr(self)
    __swig_destroy__ = _RMF.delete__NullableInt

# Register _NullableInt in _RMF:
_RMF._NullableInt_swigregister(_NullableInt)

class _NullableFloat(object):
    r"""Proxy of C++ RMF::Nullable< RMF::Float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        r"""__init__(_NullableFloat self, _NullableFloat o) -> _NullableFloat"""
        _RMF._NullableFloat_swiginit(self, _RMF.new__NullableFloat(o))

    def get(self):
        r"""get(_NullableFloat self) -> float"""
        return _RMF._NullableFloat_get(self)

    def get_is_null(self):
        r"""get_is_null(_NullableFloat self) -> bool"""
        return _RMF._NullableFloat_get_is_null(self)

    def get_ptr(self):
        r"""get_ptr(_NullableFloat self) -> float const *"""
        return _RMF._NullableFloat_get_ptr(self)
    __swig_destroy__ = _RMF.delete__NullableFloat

# Register _NullableFloat in _RMF:
_RMF._NullableFloat_swigregister(_NullableFloat)

class _NullableString(object):
    r"""Proxy of C++ RMF::Nullable< RMF::String > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        r"""__init__(_NullableString self, _NullableString o) -> _NullableString"""
        _RMF._NullableString_swiginit(self, _RMF.new__NullableString(o))

    def get(self):
        r"""get(_NullableString self) -> std::string"""
        return _RMF._NullableString_get(self)

    def get_is_null(self):
        r"""get_is_null(_NullableString self) -> bool"""
        return _RMF._NullableString_get_is_null(self)

    def get_ptr(self):
        r"""get_ptr(_NullableString self) -> std::string const *"""
        return _RMF._NullableString_get_ptr(self)
    __swig_destroy__ = _RMF.delete__NullableString

# Register _NullableString in _RMF:
_RMF._NullableString_swigregister(_NullableString)

class _NullableVector3(object):
    r"""Proxy of C++ RMF::Nullable< RMF::Vector< 3U > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        r"""__init__(_NullableVector3 self, _NullableVector3 o) -> _NullableVector3"""
        _RMF._NullableVector3_swiginit(self, _RMF.new__NullableVector3(o))

    def get(self):
        r"""get(_NullableVector3 self) -> Vector3"""
        return _RMF._NullableVector3_get(self)

    def get_is_null(self):
        r"""get_is_null(_NullableVector3 self) -> bool"""
        return _RMF._NullableVector3_get_is_null(self)

    def get_ptr(self):
        r"""get_ptr(_NullableVector3 self) -> Vector3"""
        return _RMF._NullableVector3_get_ptr(self)
    __swig_destroy__ = _RMF.delete__NullableVector3

# Register _NullableVector3 in _RMF:
_RMF._NullableVector3_swigregister(_NullableVector3)

class _NullableVector4(object):
    r"""Proxy of C++ RMF::Nullable< RMF::Vector< 4U > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        r"""__init__(_NullableVector4 self, _NullableVector4 o) -> _NullableVector4"""
        _RMF._NullableVector4_swiginit(self, _RMF.new__NullableVector4(o))

    def get(self):
        r"""get(_NullableVector4 self) -> Vector4"""
        return _RMF._NullableVector4_get(self)

    def get_is_null(self):
        r"""get_is_null(_NullableVector4 self) -> bool"""
        return _RMF._NullableVector4_get_is_null(self)

    def get_ptr(self):
        r"""get_ptr(_NullableVector4 self) -> Vector4"""
        return _RMF._NullableVector4_get_ptr(self)
    __swig_destroy__ = _RMF.delete__NullableVector4

# Register _NullableVector4 in _RMF:
_RMF._NullableVector4_swigregister(_NullableVector4)

class _NullableInts(object):
    r"""Proxy of C++ RMF::Nullable< RMF::Ints > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        r"""__init__(_NullableInts self, _NullableInts o) -> _NullableInts"""
        _RMF._NullableInts_swiginit(self, _RMF.new__NullableInts(o))

    def get(self):
        r"""get(_NullableInts self) -> Ints"""
        return _RMF._NullableInts_get(self)

    def get_is_null(self):
        r"""get_is_null(_NullableInts self) -> bool"""
        return _RMF._NullableInts_get_is_null(self)

    def get_ptr(self):
        r"""get_ptr(_NullableInts self) -> Ints"""
        return _RMF._NullableInts_get_ptr(self)
    __swig_destroy__ = _RMF.delete__NullableInts

# Register _NullableInts in _RMF:
_RMF._NullableInts_swigregister(_NullableInts)

class _NullableFloats(object):
    r"""Proxy of C++ RMF::Nullable< RMF::Floats > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        r"""__init__(_NullableFloats self, _NullableFloats o) -> _NullableFloats"""
        _RMF._NullableFloats_swiginit(self, _RMF.new__NullableFloats(o))

    def get(self):
        r"""get(_NullableFloats self) -> Floats"""
        return _RMF._NullableFloats_get(self)

    def get_is_null(self):
        r"""get_is_null(_NullableFloats self) -> bool"""
        return _RMF._NullableFloats_get_is_null(self)

    def get_ptr(self):
        r"""get_ptr(_NullableFloats self) -> Floats"""
        return _RMF._NullableFloats_get_ptr(self)
    __swig_destroy__ = _RMF.delete__NullableFloats

# Register _NullableFloats in _RMF:
_RMF._NullableFloats_swigregister(_NullableFloats)

class _NullableStrings(object):
    r"""Proxy of C++ RMF::Nullable< RMF::Strings > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        r"""__init__(_NullableStrings self, _NullableStrings o) -> _NullableStrings"""
        _RMF._NullableStrings_swiginit(self, _RMF.new__NullableStrings(o))

    def get(self):
        r"""get(_NullableStrings self) -> Strings"""
        return _RMF._NullableStrings_get(self)

    def get_is_null(self):
        r"""get_is_null(_NullableStrings self) -> bool"""
        return _RMF._NullableStrings_get_is_null(self)

    def get_ptr(self):
        r"""get_ptr(_NullableStrings self) -> Strings"""
        return _RMF._NullableStrings_get_ptr(self)
    __swig_destroy__ = _RMF.delete__NullableStrings

# Register _NullableStrings in _RMF:
_RMF._NullableStrings_swigregister(_NullableStrings)

class _NullableVector3s(object):
    r"""Proxy of C++ RMF::Nullable< std::vector< RMF::Vector< 3U > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, o):
        r"""__init__(_NullableVector3s self, _NullableVector3s o) -> _NullableVector3s"""
        _RMF._NullableVector3s_swiginit(self, _RMF.new__NullableVector3s(o))

    def get(self):
        r"""get(_NullableVector3s self) -> Vector3s"""
        return _RMF._NullableVector3s_get(self)

    def get_is_null(self):
        r"""get_is_null(_NullableVector3s self) -> bool"""
        return _RMF._NullableVector3s_get_is_null(self)

    def get_ptr(self):
        r"""get_ptr(_NullableVector3s self) -> Vector3s"""
        return _RMF._NullableVector3s_get_ptr(self)
    __swig_destroy__ = _RMF.delete__NullableVector3s

# Register _NullableVector3s in _RMF:
_RMF._NullableVector3s_swigregister(_NullableVector3s)


def _get_rmf_version():
    r"""_get_rmf_version() -> std::string"""
    return _RMF._get_rmf_version()

__version__ = _get_rmf_version()

class FrameTypeTag(object):
    r"""Proxy of C++ RMF::FrameTypeTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def get_from():
        r"""get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
        return _RMF.FrameTypeTag_get_from()

    @staticmethod
    def get_to():
        r"""get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
        return _RMF.FrameTypeTag_get_to()

    def __init__(self):
        r"""__init__(FrameTypeTag self) -> FrameTypeTag"""
        _RMF.FrameTypeTag_swiginit(self, _RMF.new_FrameTypeTag())
    __swig_destroy__ = _RMF.delete_FrameTypeTag

# Register FrameTypeTag in _RMF:
_RMF.FrameTypeTag_swigregister(FrameTypeTag)

def FrameTypeTag_get_from():
    r"""FrameTypeTag_get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
    return _RMF.FrameTypeTag_get_from()

def FrameTypeTag_get_to():
    r"""FrameTypeTag_get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
    return _RMF.FrameTypeTag_get_to()

class NodeTypeTag(object):
    r"""Proxy of C++ RMF::NodeTypeTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def get_from():
        r"""get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
        return _RMF.NodeTypeTag_get_from()

    @staticmethod
    def get_to():
        r"""get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
        return _RMF.NodeTypeTag_get_to()

    def __init__(self):
        r"""__init__(NodeTypeTag self) -> NodeTypeTag"""
        _RMF.NodeTypeTag_swiginit(self, _RMF.new_NodeTypeTag())
    __swig_destroy__ = _RMF.delete_NodeTypeTag

# Register NodeTypeTag in _RMF:
_RMF.NodeTypeTag_swigregister(NodeTypeTag)

def NodeTypeTag_get_from():
    r"""NodeTypeTag_get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
    return _RMF.NodeTypeTag_get_from()

def NodeTypeTag_get_to():
    r"""NodeTypeTag_get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
    return _RMF.NodeTypeTag_get_to()

class RepresentationTypeTag(object):
    r"""Proxy of C++ RMF::RepresentationTypeTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def get_from():
        r"""get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
        return _RMF.RepresentationTypeTag_get_from()

    @staticmethod
    def get_to():
        r"""get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
        return _RMF.RepresentationTypeTag_get_to()

    def __init__(self):
        r"""__init__(RepresentationTypeTag self) -> RepresentationTypeTag"""
        _RMF.RepresentationTypeTag_swiginit(self, _RMF.new_RepresentationTypeTag())
    __swig_destroy__ = _RMF.delete_RepresentationTypeTag

# Register RepresentationTypeTag in _RMF:
_RMF.RepresentationTypeTag_swigregister(RepresentationTypeTag)

def RepresentationTypeTag_get_from():
    r"""RepresentationTypeTag_get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
    return _RMF.RepresentationTypeTag_get_from()

def RepresentationTypeTag_get_to():
    r"""RepresentationTypeTag_get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
    return _RMF.RepresentationTypeTag_get_to()

class NodeType(object):
    r"""Proxy of C++ RMF::Enum< RMF::NodeTypeTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(NodeType self) -> NodeType
        __init__(NodeType self, int i) -> NodeType
        __init__(NodeType self, bool arg2, int i) -> NodeType
        __init__(NodeType self, std::string name) -> NodeType
        __init__(NodeType self, int i, std::string name) -> NodeType
        """
        _RMF.NodeType_swiginit(self, _RMF.new_NodeType(*args))

    def __eq__(self, o):
        r"""__eq__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___ge__(self, o)

    def __le__(self, o):
        r"""__le__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___le__(self, o)

    def __hash__(self):
        r"""__hash__(NodeType self) -> std::size_t"""
        return _RMF.NodeType___hash__(self)

    def __str__(self):
        r"""__str__(NodeType self) -> std::string"""
        return _RMF.NodeType___str__(self)

    def __repr__(self):
        r"""__repr__(NodeType self) -> std::string"""
        return _RMF.NodeType___repr__(self)
    __swig_destroy__ = _RMF.delete_NodeType

# Register NodeType in _RMF:
_RMF.NodeType_swigregister(NodeType)

class FrameType(object):
    r"""Proxy of C++ RMF::Enum< RMF::FrameTypeTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(FrameType self) -> FrameType
        __init__(FrameType self, int i) -> FrameType
        __init__(FrameType self, bool arg2, int i) -> FrameType
        __init__(FrameType self, std::string name) -> FrameType
        __init__(FrameType self, int i, std::string name) -> FrameType
        """
        _RMF.FrameType_swiginit(self, _RMF.new_FrameType(*args))

    def __eq__(self, o):
        r"""__eq__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___ge__(self, o)

    def __le__(self, o):
        r"""__le__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___le__(self, o)

    def __hash__(self):
        r"""__hash__(FrameType self) -> std::size_t"""
        return _RMF.FrameType___hash__(self)

    def __str__(self):
        r"""__str__(FrameType self) -> std::string"""
        return _RMF.FrameType___str__(self)

    def __repr__(self):
        r"""__repr__(FrameType self) -> std::string"""
        return _RMF.FrameType___repr__(self)
    __swig_destroy__ = _RMF.delete_FrameType

# Register FrameType in _RMF:
_RMF.FrameType_swigregister(FrameType)

class RepresentationType(object):
    r"""Proxy of C++ RMF::Enum< RMF::RepresentationTypeTag > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(RepresentationType self) -> RepresentationType
        __init__(RepresentationType self, int i) -> RepresentationType
        __init__(RepresentationType self, bool arg2, int i) -> RepresentationType
        __init__(RepresentationType self, std::string name) -> RepresentationType
        __init__(RepresentationType self, int i, std::string name) -> RepresentationType
        """
        _RMF.RepresentationType_swiginit(self, _RMF.new_RepresentationType(*args))

    def __eq__(self, o):
        r"""__eq__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___ge__(self, o)

    def __le__(self, o):
        r"""__le__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___le__(self, o)

    def __hash__(self):
        r"""__hash__(RepresentationType self) -> std::size_t"""
        return _RMF.RepresentationType___hash__(self)

    def __str__(self):
        r"""__str__(RepresentationType self) -> std::string"""
        return _RMF.RepresentationType___str__(self)

    def __repr__(self):
        r"""__repr__(RepresentationType self) -> std::string"""
        return _RMF.RepresentationType___repr__(self)
    __swig_destroy__ = _RMF.delete_RepresentationType

# Register RepresentationType in _RMF:
_RMF.RepresentationType_swigregister(RepresentationType)

class NodeConstHandle(NodeID):
    r"""Proxy of C++ RMF::NodeConstHandle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def get_id(self):
        r"""get_id(NodeConstHandle self) -> NodeID"""
        return _RMF.NodeConstHandle_get_id(self)

    def __eq__(self, o):
        r"""__eq__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___ge__(self, o)

    def __le__(self, o):
        r"""__le__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___le__(self, o)

    def __hash__(self):
        r"""__hash__(NodeConstHandle self) -> std::size_t"""
        return _RMF.NodeConstHandle___hash__(self)

    def __init__(self):
        r"""__init__(NodeConstHandle self) -> NodeConstHandle"""
        _RMF.NodeConstHandle_swiginit(self, _RMF.new_NodeConstHandle())

    def get_name(self):
        r"""get_name(NodeConstHandle self) -> std::string"""
        return _RMF.NodeConstHandle_get_name(self)

    def get_children(self):
        r"""get_children(NodeConstHandle self) -> NodeConstHandles"""
        return _RMF.NodeConstHandle_get_children(self)

    def set_association(self, v, overwrite=False):
        r"""set_association(NodeConstHandle self, void * v, bool overwrite=False)"""
        return _RMF.NodeConstHandle_set_association(self, v, overwrite)

    def get_has_association(self):
        r"""get_has_association(NodeConstHandle self) -> bool"""
        return _RMF.NodeConstHandle_get_has_association(self)

    def get_type(self):
        r"""get_type(NodeConstHandle self) -> NodeType"""
        return _RMF.NodeConstHandle_get_type(self)

    def get_value(self, *args):
        return _handle_nullable( _RMF.NodeConstHandle_get_value(self, *args))



    def get_has_value(self, *args):
        r"""
        get_has_value(NodeConstHandle self, IntKey k) -> bool
        get_has_value(NodeConstHandle self, FloatKey k) -> bool
        get_has_value(NodeConstHandle self, StringKey k) -> bool
        get_has_value(NodeConstHandle self, IntsKey k) -> bool
        get_has_value(NodeConstHandle self, FloatsKey k) -> bool
        get_has_value(NodeConstHandle self, StringsKey k) -> bool
        get_has_value(NodeConstHandle self, Vector3Key k) -> bool
        get_has_value(NodeConstHandle self, Vector4Key k) -> bool
        get_has_value(NodeConstHandle self, Vector3sKey k) -> bool
        """
        return _RMF.NodeConstHandle_get_has_value(self, *args)

    def get_frame_value(self, *args):
        return _handle_nullable( _RMF.NodeConstHandle_get_frame_value(self, *args))



    def get_static_value(self, *args):
        return _handle_nullable( _RMF.NodeConstHandle_get_static_value(self, *args))



    def __str__(self):
        r"""__str__(NodeConstHandle self) -> std::string"""
        return _RMF.NodeConstHandle___str__(self)

    def __repr__(self):
        r"""__repr__(NodeConstHandle self) -> std::string"""
        return _RMF.NodeConstHandle___repr__(self)

    def get_file(self):
        r"""get_file(NodeConstHandle self) -> FileConstHandle"""
        return _RMF.NodeConstHandle_get_file(self)
    __swig_destroy__ = _RMF.delete_NodeConstHandle

# Register NodeConstHandle in _RMF:
_RMF.NodeConstHandle_swigregister(NodeConstHandle)
cvar = _RMF.cvar
INVALID_NODE_TYPE = cvar.INVALID_NODE_TYPE
ROOT = cvar.ROOT
REPRESENTATION = cvar.REPRESENTATION
GEOMETRY = cvar.GEOMETRY
FEATURE = cvar.FEATURE
ALIAS = cvar.ALIAS
CUSTOM = cvar.CUSTOM
BOND = cvar.BOND
ORGANIZATIONAL = cvar.ORGANIZATIONAL
PROVENANCE = cvar.PROVENANCE
LINK = cvar.LINK
INVALID_FRAME_TYPE = cvar.INVALID_FRAME_TYPE
STATIC = cvar.STATIC
FRAME = cvar.FRAME
MODEL = cvar.MODEL
CENTER = cvar.CENTER
FRAME_ALIAS = cvar.FRAME_ALIAS
ALTERNATE = cvar.ALTERNATE
PARTICLE = cvar.PARTICLE
GAUSSIAN_PARTICLE = cvar.GAUSSIAN_PARTICLE

class NodeConstHandles(object):
    r"""Proxy of C++ std::vector< RMF::NodeConstHandle > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(NodeConstHandles self) -> RMF_SwigPyIterator"""
        return _RMF.NodeConstHandles_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(NodeConstHandles self) -> bool"""
        return _RMF.NodeConstHandles___nonzero__(self)

    def __bool__(self):
        r"""__bool__(NodeConstHandles self) -> bool"""
        return _RMF.NodeConstHandles___bool__(self)

    def __len__(self):
        r"""__len__(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::size_type"""
        return _RMF.NodeConstHandles___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i, std::vector< RMF::NodeConstHandle >::difference_type j) -> NodeConstHandles"""
        return _RMF.NodeConstHandles___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i, std::vector< RMF::NodeConstHandle >::difference_type j)
        __setslice__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i, std::vector< RMF::NodeConstHandle >::difference_type j, NodeConstHandles v)
        """
        return _RMF.NodeConstHandles___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i, std::vector< RMF::NodeConstHandle >::difference_type j)"""
        return _RMF.NodeConstHandles___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i)
        __delitem__(NodeConstHandles self, PySliceObject * slice)
        """
        return _RMF.NodeConstHandles___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(NodeConstHandles self, PySliceObject * slice) -> NodeConstHandles
        __getitem__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i) -> NodeConstHandle
        """
        return _RMF.NodeConstHandles___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(NodeConstHandles self, PySliceObject * slice, NodeConstHandles v)
        __setitem__(NodeConstHandles self, PySliceObject * slice)
        __setitem__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i, NodeConstHandle x)
        """
        return _RMF.NodeConstHandles___setitem__(self, *args)

    def pop(self):
        r"""pop(NodeConstHandles self) -> NodeConstHandle"""
        return _RMF.NodeConstHandles_pop(self)

    def append(self, x):
        r"""append(NodeConstHandles self, NodeConstHandle x)"""
        return _RMF.NodeConstHandles_append(self, x)

    def empty(self):
        r"""empty(NodeConstHandles self) -> bool"""
        return _RMF.NodeConstHandles_empty(self)

    def size(self):
        r"""size(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::size_type"""
        return _RMF.NodeConstHandles_size(self)

    def swap(self, v):
        r"""swap(NodeConstHandles self, NodeConstHandles v)"""
        return _RMF.NodeConstHandles_swap(self, v)

    def begin(self):
        r"""begin(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::iterator"""
        return _RMF.NodeConstHandles_begin(self)

    def end(self):
        r"""end(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::iterator"""
        return _RMF.NodeConstHandles_end(self)

    def rbegin(self):
        r"""rbegin(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::reverse_iterator"""
        return _RMF.NodeConstHandles_rbegin(self)

    def rend(self):
        r"""rend(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::reverse_iterator"""
        return _RMF.NodeConstHandles_rend(self)

    def clear(self):
        r"""clear(NodeConstHandles self)"""
        return _RMF.NodeConstHandles_clear(self)

    def get_allocator(self):
        r"""get_allocator(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::allocator_type"""
        return _RMF.NodeConstHandles_get_allocator(self)

    def pop_back(self):
        r"""pop_back(NodeConstHandles self)"""
        return _RMF.NodeConstHandles_pop_back(self)

    def erase(self, *args):
        r"""
        erase(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::iterator pos) -> std::vector< RMF::NodeConstHandle >::iterator
        erase(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::iterator first, std::vector< RMF::NodeConstHandle >::iterator last) -> std::vector< RMF::NodeConstHandle >::iterator
        """
        return _RMF.NodeConstHandles_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(NodeConstHandles self) -> NodeConstHandles
        __init__(NodeConstHandles self, NodeConstHandles other) -> NodeConstHandles
        __init__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::size_type size) -> NodeConstHandles
        __init__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::size_type size, NodeConstHandle value) -> NodeConstHandles
        """
        _RMF.NodeConstHandles_swiginit(self, _RMF.new_NodeConstHandles(*args))

    def push_back(self, x):
        r"""push_back(NodeConstHandles self, NodeConstHandle x)"""
        return _RMF.NodeConstHandles_push_back(self, x)

    def front(self):
        r"""front(NodeConstHandles self) -> NodeConstHandle"""
        return _RMF.NodeConstHandles_front(self)

    def back(self):
        r"""back(NodeConstHandles self) -> NodeConstHandle"""
        return _RMF.NodeConstHandles_back(self)

    def assign(self, n, x):
        r"""assign(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::size_type n, NodeConstHandle x)"""
        return _RMF.NodeConstHandles_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::size_type new_size)
        resize(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::size_type new_size, NodeConstHandle x)
        """
        return _RMF.NodeConstHandles_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::iterator pos, NodeConstHandle x) -> std::vector< RMF::NodeConstHandle >::iterator
        insert(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::iterator pos, std::vector< RMF::NodeConstHandle >::size_type n, NodeConstHandle x)
        """
        return _RMF.NodeConstHandles_insert(self, *args)

    def reserve(self, n):
        r"""reserve(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::size_type n)"""
        return _RMF.NodeConstHandles_reserve(self, n)

    def capacity(self):
        r"""capacity(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::size_type"""
        return _RMF.NodeConstHandles_capacity(self)

    def __str__(self):
        r"""__str__(NodeConstHandles self) -> std::string"""
        return _RMF.NodeConstHandles___str__(self)

    def __repr__(self):
        r"""__repr__(NodeConstHandles self) -> std::string"""
        return _RMF.NodeConstHandles___repr__(self)
    __swig_destroy__ = _RMF.delete_NodeConstHandles

# Register NodeConstHandles in _RMF:
_RMF.NodeConstHandles_swigregister(NodeConstHandles)

class NodeHandle(NodeConstHandle):
    r"""Proxy of C++ RMF::NodeHandle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NodeHandle self) -> NodeHandle"""
        _RMF.NodeHandle_swiginit(self, _RMF.new_NodeHandle())

    def add_child(self, *args):
        r"""
        add_child(NodeHandle self, std::string name, NodeType t) -> NodeHandle
        add_child(NodeHandle self, NodeConstHandle nh)
        """
        return _RMF.NodeHandle_add_child(self, *args)

    def replace_child(self, child, name, t):
        r"""replace_child(NodeHandle self, NodeHandle child, std::string name, NodeType t) -> NodeHandle"""
        return _RMF.NodeHandle_replace_child(self, child, name, t)

    def get_children(self):
        r"""get_children(NodeHandle self) -> NodeHandles"""
        return _RMF.NodeHandle_get_children(self)

    def set_frame_value(self, *args):
        r"""
        set_frame_value(NodeHandle self, IntKey k, RMF::Int v)
        set_frame_value(NodeHandle self, FloatKey k, RMF::Float v)
        set_frame_value(NodeHandle self, StringKey k, RMF::String v)
        set_frame_value(NodeHandle self, IntsKey k, Ints v)
        set_frame_value(NodeHandle self, FloatsKey k, Floats v)
        set_frame_value(NodeHandle self, StringsKey k, Strings v)
        set_frame_value(NodeHandle self, Vector3Key k, Vector3 v)
        set_frame_value(NodeHandle self, Vector4Key k, Vector4 v)
        set_frame_value(NodeHandle self, Vector3sKey k, Vector3s v)
        """
        return _RMF.NodeHandle_set_frame_value(self, *args)

    def set_value(self, *args):
        r"""
        set_value(NodeHandle self, IntKey k, RMF::Int v)
        set_value(NodeHandle self, FloatKey k, RMF::Float v)
        set_value(NodeHandle self, StringKey k, RMF::String v)
        set_value(NodeHandle self, IntsKey k, Ints v)
        set_value(NodeHandle self, FloatsKey k, Floats v)
        set_value(NodeHandle self, StringsKey k, Strings v)
        set_value(NodeHandle self, Vector3Key k, Vector3 v)
        set_value(NodeHandle self, Vector4Key k, Vector4 v)
        set_value(NodeHandle self, Vector3sKey k, Vector3s v)
        """
        return _RMF.NodeHandle_set_value(self, *args)

    def set_static_value(self, *args):
        r"""
        set_static_value(NodeHandle self, IntKey k, RMF::Int v)
        set_static_value(NodeHandle self, FloatKey k, RMF::Float v)
        set_static_value(NodeHandle self, StringKey k, RMF::String v)
        set_static_value(NodeHandle self, IntsKey k, Ints v)
        set_static_value(NodeHandle self, FloatsKey k, Floats v)
        set_static_value(NodeHandle self, StringsKey k, Strings v)
        set_static_value(NodeHandle self, Vector3Key k, Vector3 v)
        set_static_value(NodeHandle self, Vector4Key k, Vector4 v)
        set_static_value(NodeHandle self, Vector3sKey k, Vector3s v)
        """
        return _RMF.NodeHandle_set_static_value(self, *args)

    def get_file(self):
        r"""get_file(NodeHandle self) -> FileHandle"""
        return _RMF.NodeHandle_get_file(self)
    __swig_destroy__ = _RMF.delete_NodeHandle

# Register NodeHandle in _RMF:
_RMF.NodeHandle_swigregister(NodeHandle)

class NodeHandles(object):
    r"""Proxy of C++ std::vector< RMF::NodeHandle > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(NodeHandles self) -> RMF_SwigPyIterator"""
        return _RMF.NodeHandles_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(NodeHandles self) -> bool"""
        return _RMF.NodeHandles___nonzero__(self)

    def __bool__(self):
        r"""__bool__(NodeHandles self) -> bool"""
        return _RMF.NodeHandles___bool__(self)

    def __len__(self):
        r"""__len__(NodeHandles self) -> std::vector< RMF::NodeHandle >::size_type"""
        return _RMF.NodeHandles___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i, std::vector< RMF::NodeHandle >::difference_type j) -> NodeHandles"""
        return _RMF.NodeHandles___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i, std::vector< RMF::NodeHandle >::difference_type j)
        __setslice__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i, std::vector< RMF::NodeHandle >::difference_type j, NodeHandles v)
        """
        return _RMF.NodeHandles___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i, std::vector< RMF::NodeHandle >::difference_type j)"""
        return _RMF.NodeHandles___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i)
        __delitem__(NodeHandles self, PySliceObject * slice)
        """
        return _RMF.NodeHandles___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(NodeHandles self, PySliceObject * slice) -> NodeHandles
        __getitem__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i) -> NodeHandle
        """
        return _RMF.NodeHandles___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(NodeHandles self, PySliceObject * slice, NodeHandles v)
        __setitem__(NodeHandles self, PySliceObject * slice)
        __setitem__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i, NodeHandle x)
        """
        return _RMF.NodeHandles___setitem__(self, *args)

    def pop(self):
        r"""pop(NodeHandles self) -> NodeHandle"""
        return _RMF.NodeHandles_pop(self)

    def append(self, x):
        r"""append(NodeHandles self, NodeHandle x)"""
        return _RMF.NodeHandles_append(self, x)

    def empty(self):
        r"""empty(NodeHandles self) -> bool"""
        return _RMF.NodeHandles_empty(self)

    def size(self):
        r"""size(NodeHandles self) -> std::vector< RMF::NodeHandle >::size_type"""
        return _RMF.NodeHandles_size(self)

    def swap(self, v):
        r"""swap(NodeHandles self, NodeHandles v)"""
        return _RMF.NodeHandles_swap(self, v)

    def begin(self):
        r"""begin(NodeHandles self) -> std::vector< RMF::NodeHandle >::iterator"""
        return _RMF.NodeHandles_begin(self)

    def end(self):
        r"""end(NodeHandles self) -> std::vector< RMF::NodeHandle >::iterator"""
        return _RMF.NodeHandles_end(self)

    def rbegin(self):
        r"""rbegin(NodeHandles self) -> std::vector< RMF::NodeHandle >::reverse_iterator"""
        return _RMF.NodeHandles_rbegin(self)

    def rend(self):
        r"""rend(NodeHandles self) -> std::vector< RMF::NodeHandle >::reverse_iterator"""
        return _RMF.NodeHandles_rend(self)

    def clear(self):
        r"""clear(NodeHandles self)"""
        return _RMF.NodeHandles_clear(self)

    def get_allocator(self):
        r"""get_allocator(NodeHandles self) -> std::vector< RMF::NodeHandle >::allocator_type"""
        return _RMF.NodeHandles_get_allocator(self)

    def pop_back(self):
        r"""pop_back(NodeHandles self)"""
        return _RMF.NodeHandles_pop_back(self)

    def erase(self, *args):
        r"""
        erase(NodeHandles self, std::vector< RMF::NodeHandle >::iterator pos) -> std::vector< RMF::NodeHandle >::iterator
        erase(NodeHandles self, std::vector< RMF::NodeHandle >::iterator first, std::vector< RMF::NodeHandle >::iterator last) -> std::vector< RMF::NodeHandle >::iterator
        """
        return _RMF.NodeHandles_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(NodeHandles self) -> NodeHandles
        __init__(NodeHandles self, NodeHandles other) -> NodeHandles
        __init__(NodeHandles self, std::vector< RMF::NodeHandle >::size_type size) -> NodeHandles
        __init__(NodeHandles self, std::vector< RMF::NodeHandle >::size_type size, NodeHandle value) -> NodeHandles
        """
        _RMF.NodeHandles_swiginit(self, _RMF.new_NodeHandles(*args))

    def push_back(self, x):
        r"""push_back(NodeHandles self, NodeHandle x)"""
        return _RMF.NodeHandles_push_back(self, x)

    def front(self):
        r"""front(NodeHandles self) -> NodeHandle"""
        return _RMF.NodeHandles_front(self)

    def back(self):
        r"""back(NodeHandles self) -> NodeHandle"""
        return _RMF.NodeHandles_back(self)

    def assign(self, n, x):
        r"""assign(NodeHandles self, std::vector< RMF::NodeHandle >::size_type n, NodeHandle x)"""
        return _RMF.NodeHandles_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(NodeHandles self, std::vector< RMF::NodeHandle >::size_type new_size)
        resize(NodeHandles self, std::vector< RMF::NodeHandle >::size_type new_size, NodeHandle x)
        """
        return _RMF.NodeHandles_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(NodeHandles self, std::vector< RMF::NodeHandle >::iterator pos, NodeHandle x) -> std::vector< RMF::NodeHandle >::iterator
        insert(NodeHandles self, std::vector< RMF::NodeHandle >::iterator pos, std::vector< RMF::NodeHandle >::size_type n, NodeHandle x)
        """
        return _RMF.NodeHandles_insert(self, *args)

    def reserve(self, n):
        r"""reserve(NodeHandles self, std::vector< RMF::NodeHandle >::size_type n)"""
        return _RMF.NodeHandles_reserve(self, n)

    def capacity(self):
        r"""capacity(NodeHandles self) -> std::vector< RMF::NodeHandle >::size_type"""
        return _RMF.NodeHandles_capacity(self)

    def __str__(self):
        r"""__str__(NodeHandles self) -> std::string"""
        return _RMF.NodeHandles___str__(self)

    def __repr__(self):
        r"""__repr__(NodeHandles self) -> std::string"""
        return _RMF.NodeHandles___repr__(self)
    __swig_destroy__ = _RMF.delete_NodeHandles

# Register NodeHandles in _RMF:
_RMF.NodeHandles_swigregister(NodeHandles)

class BufferConstHandle(object):
    r"""Proxy of C++ RMF::BufferConstHandle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(BufferConstHandle self, std::vector< char,std::allocator< char > > const & r) -> BufferConstHandle
        __init__(BufferConstHandle self, std::vector< uint8_t,std::allocator< uint8_t > > const & r) -> BufferConstHandle
        __init__(BufferConstHandle self, std::shared_ptr< std::vector< char,std::allocator< char > > > r) -> BufferConstHandle
        """
        _RMF.BufferConstHandle_swiginit(self, _RMF.new_BufferConstHandle(*args))

    def get_buffer(self):
        r"""get_buffer(BufferConstHandle self) -> std::vector< char,std::allocator< char > > const &"""
        return _RMF.BufferConstHandle_get_buffer(self)

    def __eq__(self, o):
        r"""__eq__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___ge__(self, o)

    def __le__(self, o):
        r"""__le__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___le__(self, o)

    def __hash__(self):
        r"""__hash__(BufferConstHandle self) -> std::size_t"""
        return _RMF.BufferConstHandle___hash__(self)

    def __str__(self):
        r"""__str__(BufferConstHandle self) -> std::string"""
        return _RMF.BufferConstHandle___str__(self)

    def __repr__(self):
        r"""__repr__(BufferConstHandle self) -> std::string"""
        return _RMF.BufferConstHandle___repr__(self)

    def __getstate__(self):
      return self.get_buffer()

    def __setstate__(self, buff):
      self.__init__(buff)
      return self

    __swig_destroy__ = _RMF.delete_BufferConstHandle

# Register BufferConstHandle in _RMF:
_RMF.BufferConstHandle_swigregister(BufferConstHandle)


def read_buffer(file_name):
    r"""read_buffer(std::string file_name) -> BufferConstHandle"""
    return _RMF.read_buffer(file_name)

def write_buffer(buffer, file_name):
    r"""write_buffer(BufferConstHandle buffer, std::string file_name)"""
    return _RMF.write_buffer(buffer, file_name)
class BufferHandle(BufferConstHandle):
    r"""Proxy of C++ RMF::BufferHandle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BufferHandle self) -> BufferHandle
        __init__(BufferHandle self, std::vector< char,std::allocator< char > > const & st) -> BufferHandle
        """
        _RMF.BufferHandle_swiginit(self, _RMF.new_BufferHandle(*args))
    __swig_destroy__ = _RMF.delete_BufferHandle

# Register BufferHandle in _RMF:
_RMF.BufferHandle_swigregister(BufferHandle)

class FileConstHandle(object):
    r"""Proxy of C++ RMF::FileConstHandle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __eq__(self, o):
        r"""__eq__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___eq__(self, o)

    def __ne__(self, o):
        r"""__ne__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___ne__(self, o)

    def __lt__(self, o):
        r"""__lt__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___lt__(self, o)

    def __gt__(self, o):
        r"""__gt__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___gt__(self, o)

    def __ge__(self, o):
        r"""__ge__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___ge__(self, o)

    def __le__(self, o):
        r"""__le__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___le__(self, o)

    def __hash__(self):
        r"""__hash__(FileConstHandle self) -> std::size_t"""
        return _RMF.FileConstHandle___hash__(self)

    def __str__(self):
        r"""__str__(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle___str__(self)

    def __repr__(self):
        r"""__repr__(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle___repr__(self)

    def __init__(self):
        r"""__init__(FileConstHandle self) -> FileConstHandle"""
        _RMF.FileConstHandle_swiginit(self, _RMF.new_FileConstHandle())

    def get_root_node(self):
        r"""get_root_node(FileConstHandle self) -> NodeConstHandle"""
        return _RMF.FileConstHandle_get_root_node(self)

    def get_is_closed(self):
        r"""get_is_closed(FileConstHandle self) -> bool"""
        return _RMF.FileConstHandle_get_is_closed(self)

    def close(self):
        r"""close(FileConstHandle self)"""
        return _RMF.FileConstHandle_close(self)

    def get_path(self):
        r"""get_path(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle_get_path(self)

    def get_current_frame(self):
        r"""get_current_frame(FileConstHandle self) -> FrameID"""
        return _RMF.FileConstHandle_get_current_frame(self)

    def get_type(self, fr):
        r"""get_type(FileConstHandle self, FrameID fr) -> FrameType"""
        return _RMF.FileConstHandle_get_type(self, fr)

    def get_children(self, id):
        r"""get_children(FileConstHandle self, FrameID id) -> FrameIDs"""
        return _RMF.FileConstHandle_get_children(self, id)

    def get_parents(self, id):
        r"""get_parents(FileConstHandle self, FrameID id) -> FrameIDs"""
        return _RMF.FileConstHandle_get_parents(self, id)

    def set_current_frame(self, frame):
        r"""set_current_frame(FileConstHandle self, FrameID frame)"""
        return _RMF.FileConstHandle_set_current_frame(self, frame)

    def get_number_of_frames(self):
        r"""get_number_of_frames(FileConstHandle self) -> unsigned int"""
        return _RMF.FileConstHandle_get_number_of_frames(self)

    def get_number_of_nodes(self):
        r"""get_number_of_nodes(FileConstHandle self) -> unsigned int"""
        return _RMF.FileConstHandle_get_number_of_nodes(self)

    def get_file_type(self):
        r"""get_file_type(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle_get_file_type(self)

    def get_root_frames(self):
        r"""get_root_frames(FileConstHandle self) -> FrameIDs"""
        return _RMF.FileConstHandle_get_root_frames(self)

    def get_key(self, *args):
        r"""
        get_key(FileConstHandle self, Category category_id, std::string nm, IntTag arg4) -> IntKey
        get_key(FileConstHandle self, Category category_id, std::string nm, FloatTag arg4) -> FloatKey
        get_key(FileConstHandle self, Category category_id, std::string nm, StringTag arg4) -> StringKey
        get_key(FileConstHandle self, Category category_id, std::string nm, IntsTag arg4) -> IntsKey
        get_key(FileConstHandle self, Category category_id, std::string nm, FloatsTag arg4) -> FloatsKey
        get_key(FileConstHandle self, Category category_id, std::string nm, StringsTag arg4) -> StringsKey
        get_key(FileConstHandle self, Category category_id, std::string nm, Vector3Tag arg4) -> Vector3Key
        get_key(FileConstHandle self, Category category_id, std::string nm, Vector4Tag arg4) -> Vector4Key
        get_key(FileConstHandle self, Category category_id, std::string nm, Vector3sTag arg4) -> Vector3sKey
        """
        return _RMF.FileConstHandle_get_key(self, *args)

    def _get_keys(self, *args):
        r"""
        _get_keys(FileConstHandle self, Category category_id, IntTag arg3) -> IntKeys
        _get_keys(FileConstHandle self, Category category_id, FloatTag arg3) -> FloatKeys
        _get_keys(FileConstHandle self, Category category_id, StringTag arg3) -> StringKeys
        _get_keys(FileConstHandle self, Category category_id, IntsTag arg3) -> IntsKeys
        _get_keys(FileConstHandle self, Category category_id, FloatsTag arg3) -> FloatsKeys
        _get_keys(FileConstHandle self, Category category_id, StringsTag arg3) -> StringsKeys
        _get_keys(FileConstHandle self, Category category_id, Vector3Tag arg3) -> Vector3Keys
        _get_keys(FileConstHandle self, Category category_id, Vector4Tag arg3) -> Vector4Keys
        _get_keys(FileConstHandle self, Category category_id, Vector3sTag arg3) -> Vector3sKeys
        """
        return _RMF.FileConstHandle__get_keys(self, *args)

    def get_node_from_association(self, v):
        r"""get_node_from_association(FileConstHandle self, void * v) -> NodeConstHandle"""
        return _RMF.FileConstHandle_get_node_from_association(self, v)

    def get_node(self, id):
        r"""get_node(FileConstHandle self, NodeID id) -> NodeConstHandle"""
        return _RMF.FileConstHandle_get_node(self, id)

    def get_has_associated_data(self, index):
        r"""get_has_associated_data(FileConstHandle self, int index) -> bool"""
        return _RMF.FileConstHandle_get_has_associated_data(self, index)

    def get_description(self):
        r"""get_description(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle_get_description(self)

    def get_producer(self):
        r"""get_producer(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle_get_producer(self)

    def get_category(self, *args):
        r"""
        get_category(FileConstHandle self, IntKey k) -> Category
        get_category(FileConstHandle self, FloatKey k) -> Category
        get_category(FileConstHandle self, StringKey k) -> Category
        get_category(FileConstHandle self, IntsKey k) -> Category
        get_category(FileConstHandle self, FloatsKey k) -> Category
        get_category(FileConstHandle self, StringsKey k) -> Category
        get_category(FileConstHandle self, Vector3Key k) -> Category
        get_category(FileConstHandle self, Vector4Key k) -> Category
        get_category(FileConstHandle self, Vector3sKey k) -> Category
        get_category(FileConstHandle self, std::string name) -> Category
        """
        return _RMF.FileConstHandle_get_category(self, *args)

    def get_categories(self):
        r"""get_categories(FileConstHandle self) -> Categories"""
        return _RMF.FileConstHandle_get_categories(self)

    def get_name(self, *args):
        r"""
        get_name(FileConstHandle self) -> std::string
        get_name(FileConstHandle self, FrameID fr) -> std::string
        get_name(FileConstHandle self, IntKey k) -> std::string
        get_name(FileConstHandle self, FloatKey k) -> std::string
        get_name(FileConstHandle self, StringKey k) -> std::string
        get_name(FileConstHandle self, IntsKey k) -> std::string
        get_name(FileConstHandle self, FloatsKey k) -> std::string
        get_name(FileConstHandle self, StringsKey k) -> std::string
        get_name(FileConstHandle self, Vector3Key k) -> std::string
        get_name(FileConstHandle self, Vector4Key k) -> std::string
        get_name(FileConstHandle self, Vector3sKey k) -> std::string
        get_name(FileConstHandle self, Category kc) -> std::string
        """
        return _RMF.FileConstHandle_get_name(self, *args)

    def reload(self):
        r"""reload(FileConstHandle self)"""
        return _RMF.FileConstHandle_reload(self)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()
        return False

    def get_frames(self):
        class MyRange:
           def __init__(self, mx):
               self.max = mx
           def __getitem__(self, i):
               if i >= self.max:
                    raise IndexError()
               else:
                    return FrameID(i)
           def __len__(self):
               return self.max
        return MyRange(self.get_number_of_frames())
    def get_node_ids(self):
        class MyRange:
           def __init__(self, mx):
               self.max = mx
           def __getitem__(self, i):
               if i >= self.max:
                    raise IndexError()
               else:
                    return NodeID(i)
           def __len__(self):
               return self.max
        return MyRange(self.get_number_of_nodes())
    def get_keys(self, kc):
        ret=[]
        for t in _tag_list:
           ret.extend(self._get_keys(kc, t))
        return ret

    __swig_destroy__ = _RMF.delete_FileConstHandle

# Register FileConstHandle in _RMF:
_RMF.FileConstHandle_swigregister(FileConstHandle)


def hash_value(*args):
    r"""
    hash_value(NodeConstHandle t) -> std::size_t
    hash_value(BufferConstHandle t) -> std::size_t
    hash_value(FileConstHandle t) -> std::size_t
    """
    return _RMF.hash_value(*args)

def open_rmf_file_read_only(path):
    r"""open_rmf_file_read_only(std::string path) -> FileConstHandle"""
    return _RMF.open_rmf_file_read_only(path)

def open_rmf_buffer_read_only(buffer):
    r"""open_rmf_buffer_read_only(BufferConstHandle buffer) -> FileConstHandle"""
    return _RMF.open_rmf_buffer_read_only(buffer)

def get_values(*args):
    r"""get_values(NodeConstHandles nodes, FloatKey k, RMF::Float missing_value=std::numeric_limits< float >::max()) -> Floats"""
    return _RMF.get_values(*args)
class FileHandle(FileConstHandle):
    r"""Proxy of C++ RMF::FileHandle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FileHandle self) -> FileHandle"""
        _RMF.FileHandle_swiginit(self, _RMF.new_FileHandle())

    def get_root_node(self):
        r"""get_root_node(FileHandle self) -> NodeHandle"""
        return _RMF.FileHandle_get_root_node(self)

    def add_frame(self, *args):
        r"""
        add_frame(FileHandle self, std::string name, FrameType t=FRAME) -> FrameID
        add_frame(FileHandle self, std::string name, FrameID parent, FrameType t=FRAME) -> FrameID
        """
        return _RMF.FileHandle_add_frame(self, *args)

    def get_node_from_association(self, d):
        r"""get_node_from_association(FileHandle self, void * d) -> NodeHandle"""
        return _RMF.FileHandle_get_node_from_association(self, d)

    def get_node(self, id):
        r"""get_node(FileHandle self, NodeID id) -> NodeHandle"""
        return _RMF.FileHandle_get_node(self, id)

    def add_node(self, name, t):
        r"""add_node(FileHandle self, std::string name, NodeType t) -> NodeHandle"""
        return _RMF.FileHandle_add_node(self, name, t)

    def set_description(self, descr):
        r"""set_description(FileHandle self, std::string descr)"""
        return _RMF.FileHandle_set_description(self, descr)

    def set_producer(self, arg2):
        r"""set_producer(FileHandle self, std::string arg2)"""
        return _RMF.FileHandle_set_producer(self, arg2)

    def flush(self):
        r"""flush(FileHandle self)"""
        return _RMF.FileHandle_flush(self)
    __swig_destroy__ = _RMF.delete_FileHandle

# Register FileHandle in _RMF:
_RMF.FileHandle_swigregister(FileHandle)


def create_rmf_file(path):
    r"""create_rmf_file(std::string path) -> FileHandle"""
    return _RMF.create_rmf_file(path)

def create_rmf_buffer(buffer):
    r"""create_rmf_buffer(BufferHandle buffer) -> FileHandle"""
    return _RMF.create_rmf_buffer(buffer)
class Decorator(object):
    r"""Proxy of C++ RMF::Decorator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def __str__(self):
        r"""__str__(Decorator self) -> std::string"""
        return _RMF.Decorator___str__(self)

    def __repr__(self):
        r"""__repr__(Decorator self) -> std::string"""
        return _RMF.Decorator___repr__(self)
    __swig_destroy__ = _RMF.delete_Decorator

# Register Decorator in _RMF:
_RMF.Decorator_swigregister(Decorator)

class Factory(object):
    r"""Proxy of C++ RMF::Factory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Factory self) -> Factory"""
        _RMF.Factory_swiginit(self, _RMF.new_Factory())
    __swig_destroy__ = _RMF.delete_Factory

# Register Factory in _RMF:
_RMF.Factory_swigregister(Factory)

class Label(object):
    r"""Proxy of C++ RMF::Label class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self):
        r"""__init__(Label self) -> Label"""
        _RMF.Label_swiginit(self, _RMF.new_Label())

    def get_is(self, nh):
        r"""get_is(Label self, NodeConstHandle nh) -> bool"""
        return _RMF.Label_get_is(self, nh)

    def set_is(self, nh):
        r"""set_is(Label self, NodeHandle nh)"""
        return _RMF.Label_set_is(self, nh)

    def __str__(self):
        r"""__str__(Label self) -> std::string"""
        return _RMF.Label___str__(self)

    def __repr__(self):
        r"""__repr__(Label self) -> std::string"""
        return _RMF.Label___repr__(self)
    __swig_destroy__ = _RMF.delete_Label

# Register Label in _RMF:
_RMF.Label_swigregister(Label)

class ParticleConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ParticleConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_mass(self):
        r"""get_mass(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_mass(self)

    def get_frame_mass(self):
        r"""get_frame_mass(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_frame_mass(self)

    def get_static_mass(self):
        r"""get_static_mass(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_static_mass(self)

    def get_coordinates(self):
        r"""get_coordinates(ParticleConst self) -> Vector3"""
        return _RMF.ParticleConst_get_coordinates(self)

    def get_frame_coordinates(self):
        r"""get_frame_coordinates(ParticleConst self) -> Vector3"""
        return _RMF.ParticleConst_get_frame_coordinates(self)

    def get_static_coordinates(self):
        r"""get_static_coordinates(ParticleConst self) -> Vector3"""
        return _RMF.ParticleConst_get_static_coordinates(self)

    def get_radius(self):
        r"""get_radius(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_radius(self)

    def get_frame_radius(self):
        r"""get_frame_radius(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_frame_radius(self)

    def get_static_radius(self):
        r"""get_static_radius(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_static_radius(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ParticleConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ParticleConst self) -> std::string"""
        return _RMF.ParticleConst___str__(self)

    def __repr__(self):
        r"""__repr__(ParticleConst self) -> std::string"""
        return _RMF.ParticleConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ParticleConst

# Register ParticleConst in _RMF:
_RMF.ParticleConst_swigregister(ParticleConst)

def ParticleConst_get_decorator_type_name():
    r"""ParticleConst_get_decorator_type_name() -> std::string"""
    return _RMF.ParticleConst_get_decorator_type_name()

class Particle(ParticleConst):
    r"""Proxy of C++ RMF::decorator::Particle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_mass(self, v):
        r"""set_mass(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_mass(self, v)

    def set_frame_mass(self, v):
        r"""set_frame_mass(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_frame_mass(self, v)

    def set_static_mass(self, v):
        r"""set_static_mass(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_static_mass(self, v)

    def set_coordinates(self, v):
        r"""set_coordinates(Particle self, Vector3 v)"""
        return _RMF.Particle_set_coordinates(self, v)

    def set_frame_coordinates(self, v):
        r"""set_frame_coordinates(Particle self, Vector3 v)"""
        return _RMF.Particle_set_frame_coordinates(self, v)

    def set_static_coordinates(self, v):
        r"""set_static_coordinates(Particle self, Vector3 v)"""
        return _RMF.Particle_set_static_coordinates(self, v)

    def set_radius(self, v):
        r"""set_radius(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_radius(self, v)

    def set_frame_radius(self, v):
        r"""set_frame_radius(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_frame_radius(self, v)

    def set_static_radius(self, v):
        r"""set_static_radius(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_static_radius(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Particle_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Particle

# Register Particle in _RMF:
_RMF.Particle_swigregister(Particle)

def Particle_get_decorator_type_name():
    r"""Particle_get_decorator_type_name() -> std::string"""
    return _RMF.Particle_get_decorator_type_name()

class ParticleFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ParticleFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ParticleFactory self, FileConstHandle fh) -> ParticleFactory
        __init__(ParticleFactory self, FileHandle fh) -> ParticleFactory
        """
        _RMF.ParticleFactory_swiginit(self, _RMF.new_ParticleFactory(*args))

    def get(self, *args):
        r"""
        get(ParticleFactory self, NodeConstHandle nh) -> ParticleConst
        get(ParticleFactory self, NodeHandle nh) -> Particle
        """
        return _RMF.ParticleFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ParticleFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ParticleFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ParticleFactory self) -> std::string"""
        return _RMF.ParticleFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ParticleFactory self) -> std::string"""
        return _RMF.ParticleFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ParticleFactory

# Register ParticleFactory in _RMF:
_RMF.ParticleFactory_swigregister(ParticleFactory)

class ParticleConstFactory(ParticleFactory):
    r"""Proxy of C++ RMF::decorator::ParticleConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ParticleConstFactory self, FileConstHandle fh) -> ParticleConstFactory
        __init__(ParticleConstFactory self, FileHandle fh) -> ParticleConstFactory
        """
        _RMF.ParticleConstFactory_swiginit(self, _RMF.new_ParticleConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ParticleConstFactory

# Register ParticleConstFactory in _RMF:
_RMF.ParticleConstFactory_swigregister(ParticleConstFactory)

class IntermediateParticleConst(Decorator):
    r"""Proxy of C++ RMF::decorator::IntermediateParticleConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_radius(self):
        r"""get_radius(IntermediateParticleConst self) -> RMF::Float"""
        return _RMF.IntermediateParticleConst_get_radius(self)

    def get_frame_radius(self):
        r"""get_frame_radius(IntermediateParticleConst self) -> RMF::Float"""
        return _RMF.IntermediateParticleConst_get_frame_radius(self)

    def get_static_radius(self):
        r"""get_static_radius(IntermediateParticleConst self) -> RMF::Float"""
        return _RMF.IntermediateParticleConst_get_static_radius(self)

    def get_coordinates(self):
        r"""get_coordinates(IntermediateParticleConst self) -> Vector3"""
        return _RMF.IntermediateParticleConst_get_coordinates(self)

    def get_frame_coordinates(self):
        r"""get_frame_coordinates(IntermediateParticleConst self) -> Vector3"""
        return _RMF.IntermediateParticleConst_get_frame_coordinates(self)

    def get_static_coordinates(self):
        r"""get_static_coordinates(IntermediateParticleConst self) -> Vector3"""
        return _RMF.IntermediateParticleConst_get_static_coordinates(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.IntermediateParticleConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(IntermediateParticleConst self) -> std::string"""
        return _RMF.IntermediateParticleConst___str__(self)

    def __repr__(self):
        r"""__repr__(IntermediateParticleConst self) -> std::string"""
        return _RMF.IntermediateParticleConst___repr__(self)
    __swig_destroy__ = _RMF.delete_IntermediateParticleConst

# Register IntermediateParticleConst in _RMF:
_RMF.IntermediateParticleConst_swigregister(IntermediateParticleConst)

def IntermediateParticleConst_get_decorator_type_name():
    r"""IntermediateParticleConst_get_decorator_type_name() -> std::string"""
    return _RMF.IntermediateParticleConst_get_decorator_type_name()

class IntermediateParticle(IntermediateParticleConst):
    r"""Proxy of C++ RMF::decorator::IntermediateParticle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_radius(self, v):
        r"""set_radius(IntermediateParticle self, RMF::Float v)"""
        return _RMF.IntermediateParticle_set_radius(self, v)

    def set_frame_radius(self, v):
        r"""set_frame_radius(IntermediateParticle self, RMF::Float v)"""
        return _RMF.IntermediateParticle_set_frame_radius(self, v)

    def set_static_radius(self, v):
        r"""set_static_radius(IntermediateParticle self, RMF::Float v)"""
        return _RMF.IntermediateParticle_set_static_radius(self, v)

    def set_coordinates(self, v):
        r"""set_coordinates(IntermediateParticle self, Vector3 v)"""
        return _RMF.IntermediateParticle_set_coordinates(self, v)

    def set_frame_coordinates(self, v):
        r"""set_frame_coordinates(IntermediateParticle self, Vector3 v)"""
        return _RMF.IntermediateParticle_set_frame_coordinates(self, v)

    def set_static_coordinates(self, v):
        r"""set_static_coordinates(IntermediateParticle self, Vector3 v)"""
        return _RMF.IntermediateParticle_set_static_coordinates(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.IntermediateParticle_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_IntermediateParticle

# Register IntermediateParticle in _RMF:
_RMF.IntermediateParticle_swigregister(IntermediateParticle)

def IntermediateParticle_get_decorator_type_name():
    r"""IntermediateParticle_get_decorator_type_name() -> std::string"""
    return _RMF.IntermediateParticle_get_decorator_type_name()

class IntermediateParticleFactory(Factory):
    r"""Proxy of C++ RMF::decorator::IntermediateParticleFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(IntermediateParticleFactory self, FileConstHandle fh) -> IntermediateParticleFactory
        __init__(IntermediateParticleFactory self, FileHandle fh) -> IntermediateParticleFactory
        """
        _RMF.IntermediateParticleFactory_swiginit(self, _RMF.new_IntermediateParticleFactory(*args))

    def get(self, *args):
        r"""
        get(IntermediateParticleFactory self, NodeConstHandle nh) -> IntermediateParticleConst
        get(IntermediateParticleFactory self, NodeHandle nh) -> IntermediateParticle
        """
        return _RMF.IntermediateParticleFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(IntermediateParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.IntermediateParticleFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(IntermediateParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.IntermediateParticleFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(IntermediateParticleFactory self) -> std::string"""
        return _RMF.IntermediateParticleFactory___str__(self)

    def __repr__(self):
        r"""__repr__(IntermediateParticleFactory self) -> std::string"""
        return _RMF.IntermediateParticleFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_IntermediateParticleFactory

# Register IntermediateParticleFactory in _RMF:
_RMF.IntermediateParticleFactory_swigregister(IntermediateParticleFactory)

class IntermediateParticleConstFactory(IntermediateParticleFactory):
    r"""Proxy of C++ RMF::decorator::IntermediateParticleConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IntermediateParticleConstFactory self, FileConstHandle fh) -> IntermediateParticleConstFactory
        __init__(IntermediateParticleConstFactory self, FileHandle fh) -> IntermediateParticleConstFactory
        """
        _RMF.IntermediateParticleConstFactory_swiginit(self, _RMF.new_IntermediateParticleConstFactory(*args))
    __swig_destroy__ = _RMF.delete_IntermediateParticleConstFactory

# Register IntermediateParticleConstFactory in _RMF:
_RMF.IntermediateParticleConstFactory_swigregister(IntermediateParticleConstFactory)

class GaussianParticleConst(Decorator):
    r"""Proxy of C++ RMF::decorator::GaussianParticleConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_variances(self):
        r"""get_variances(GaussianParticleConst self) -> Vector3"""
        return _RMF.GaussianParticleConst_get_variances(self)

    def get_frame_variances(self):
        r"""get_frame_variances(GaussianParticleConst self) -> Vector3"""
        return _RMF.GaussianParticleConst_get_frame_variances(self)

    def get_static_variances(self):
        r"""get_static_variances(GaussianParticleConst self) -> Vector3"""
        return _RMF.GaussianParticleConst_get_static_variances(self)

    def get_mass(self):
        r"""get_mass(GaussianParticleConst self) -> RMF::Float"""
        return _RMF.GaussianParticleConst_get_mass(self)

    def get_frame_mass(self):
        r"""get_frame_mass(GaussianParticleConst self) -> RMF::Float"""
        return _RMF.GaussianParticleConst_get_frame_mass(self)

    def get_static_mass(self):
        r"""get_static_mass(GaussianParticleConst self) -> RMF::Float"""
        return _RMF.GaussianParticleConst_get_static_mass(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.GaussianParticleConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(GaussianParticleConst self) -> std::string"""
        return _RMF.GaussianParticleConst___str__(self)

    def __repr__(self):
        r"""__repr__(GaussianParticleConst self) -> std::string"""
        return _RMF.GaussianParticleConst___repr__(self)
    __swig_destroy__ = _RMF.delete_GaussianParticleConst

# Register GaussianParticleConst in _RMF:
_RMF.GaussianParticleConst_swigregister(GaussianParticleConst)

def GaussianParticleConst_get_decorator_type_name():
    r"""GaussianParticleConst_get_decorator_type_name() -> std::string"""
    return _RMF.GaussianParticleConst_get_decorator_type_name()

class GaussianParticle(GaussianParticleConst):
    r"""Proxy of C++ RMF::decorator::GaussianParticle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_variances(self, v):
        r"""set_variances(GaussianParticle self, Vector3 v)"""
        return _RMF.GaussianParticle_set_variances(self, v)

    def set_frame_variances(self, v):
        r"""set_frame_variances(GaussianParticle self, Vector3 v)"""
        return _RMF.GaussianParticle_set_frame_variances(self, v)

    def set_static_variances(self, v):
        r"""set_static_variances(GaussianParticle self, Vector3 v)"""
        return _RMF.GaussianParticle_set_static_variances(self, v)

    def set_mass(self, v):
        r"""set_mass(GaussianParticle self, RMF::Float v)"""
        return _RMF.GaussianParticle_set_mass(self, v)

    def set_frame_mass(self, v):
        r"""set_frame_mass(GaussianParticle self, RMF::Float v)"""
        return _RMF.GaussianParticle_set_frame_mass(self, v)

    def set_static_mass(self, v):
        r"""set_static_mass(GaussianParticle self, RMF::Float v)"""
        return _RMF.GaussianParticle_set_static_mass(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.GaussianParticle_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_GaussianParticle

# Register GaussianParticle in _RMF:
_RMF.GaussianParticle_swigregister(GaussianParticle)

def GaussianParticle_get_decorator_type_name():
    r"""GaussianParticle_get_decorator_type_name() -> std::string"""
    return _RMF.GaussianParticle_get_decorator_type_name()

class GaussianParticleFactory(Factory):
    r"""Proxy of C++ RMF::decorator::GaussianParticleFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(GaussianParticleFactory self, FileConstHandle fh) -> GaussianParticleFactory
        __init__(GaussianParticleFactory self, FileHandle fh) -> GaussianParticleFactory
        """
        _RMF.GaussianParticleFactory_swiginit(self, _RMF.new_GaussianParticleFactory(*args))

    def get(self, *args):
        r"""
        get(GaussianParticleFactory self, NodeConstHandle nh) -> GaussianParticleConst
        get(GaussianParticleFactory self, NodeHandle nh) -> GaussianParticle
        """
        return _RMF.GaussianParticleFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(GaussianParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.GaussianParticleFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(GaussianParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.GaussianParticleFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(GaussianParticleFactory self) -> std::string"""
        return _RMF.GaussianParticleFactory___str__(self)

    def __repr__(self):
        r"""__repr__(GaussianParticleFactory self) -> std::string"""
        return _RMF.GaussianParticleFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_GaussianParticleFactory

# Register GaussianParticleFactory in _RMF:
_RMF.GaussianParticleFactory_swigregister(GaussianParticleFactory)

class GaussianParticleConstFactory(GaussianParticleFactory):
    r"""Proxy of C++ RMF::decorator::GaussianParticleConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GaussianParticleConstFactory self, FileConstHandle fh) -> GaussianParticleConstFactory
        __init__(GaussianParticleConstFactory self, FileHandle fh) -> GaussianParticleConstFactory
        """
        _RMF.GaussianParticleConstFactory_swiginit(self, _RMF.new_GaussianParticleConstFactory(*args))
    __swig_destroy__ = _RMF.delete_GaussianParticleConstFactory

# Register GaussianParticleConstFactory in _RMF:
_RMF.GaussianParticleConstFactory_swigregister(GaussianParticleConstFactory)

class RigidParticleConst(Decorator):
    r"""Proxy of C++ RMF::decorator::RigidParticleConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_orientation(self):
        r"""get_orientation(RigidParticleConst self) -> Vector4"""
        return _RMF.RigidParticleConst_get_orientation(self)

    def get_frame_orientation(self):
        r"""get_frame_orientation(RigidParticleConst self) -> Vector4"""
        return _RMF.RigidParticleConst_get_frame_orientation(self)

    def get_static_orientation(self):
        r"""get_static_orientation(RigidParticleConst self) -> Vector4"""
        return _RMF.RigidParticleConst_get_static_orientation(self)

    def get_coordinates(self):
        r"""get_coordinates(RigidParticleConst self) -> Vector3"""
        return _RMF.RigidParticleConst_get_coordinates(self)

    def get_frame_coordinates(self):
        r"""get_frame_coordinates(RigidParticleConst self) -> Vector3"""
        return _RMF.RigidParticleConst_get_frame_coordinates(self)

    def get_static_coordinates(self):
        r"""get_static_coordinates(RigidParticleConst self) -> Vector3"""
        return _RMF.RigidParticleConst_get_static_coordinates(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.RigidParticleConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(RigidParticleConst self) -> std::string"""
        return _RMF.RigidParticleConst___str__(self)

    def __repr__(self):
        r"""__repr__(RigidParticleConst self) -> std::string"""
        return _RMF.RigidParticleConst___repr__(self)
    __swig_destroy__ = _RMF.delete_RigidParticleConst

# Register RigidParticleConst in _RMF:
_RMF.RigidParticleConst_swigregister(RigidParticleConst)

def RigidParticleConst_get_decorator_type_name():
    r"""RigidParticleConst_get_decorator_type_name() -> std::string"""
    return _RMF.RigidParticleConst_get_decorator_type_name()

class RigidParticle(RigidParticleConst):
    r"""Proxy of C++ RMF::decorator::RigidParticle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_orientation(self, v):
        r"""set_orientation(RigidParticle self, Vector4 v)"""
        return _RMF.RigidParticle_set_orientation(self, v)

    def set_frame_orientation(self, v):
        r"""set_frame_orientation(RigidParticle self, Vector4 v)"""
        return _RMF.RigidParticle_set_frame_orientation(self, v)

    def set_static_orientation(self, v):
        r"""set_static_orientation(RigidParticle self, Vector4 v)"""
        return _RMF.RigidParticle_set_static_orientation(self, v)

    def set_coordinates(self, v):
        r"""set_coordinates(RigidParticle self, Vector3 v)"""
        return _RMF.RigidParticle_set_coordinates(self, v)

    def set_frame_coordinates(self, v):
        r"""set_frame_coordinates(RigidParticle self, Vector3 v)"""
        return _RMF.RigidParticle_set_frame_coordinates(self, v)

    def set_static_coordinates(self, v):
        r"""set_static_coordinates(RigidParticle self, Vector3 v)"""
        return _RMF.RigidParticle_set_static_coordinates(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.RigidParticle_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_RigidParticle

# Register RigidParticle in _RMF:
_RMF.RigidParticle_swigregister(RigidParticle)

def RigidParticle_get_decorator_type_name():
    r"""RigidParticle_get_decorator_type_name() -> std::string"""
    return _RMF.RigidParticle_get_decorator_type_name()

class RigidParticleFactory(Factory):
    r"""Proxy of C++ RMF::decorator::RigidParticleFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(RigidParticleFactory self, FileConstHandle fh) -> RigidParticleFactory
        __init__(RigidParticleFactory self, FileHandle fh) -> RigidParticleFactory
        """
        _RMF.RigidParticleFactory_swiginit(self, _RMF.new_RigidParticleFactory(*args))

    def get(self, *args):
        r"""
        get(RigidParticleFactory self, NodeConstHandle nh) -> RigidParticleConst
        get(RigidParticleFactory self, NodeHandle nh) -> RigidParticle
        """
        return _RMF.RigidParticleFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(RigidParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.RigidParticleFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(RigidParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.RigidParticleFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(RigidParticleFactory self) -> std::string"""
        return _RMF.RigidParticleFactory___str__(self)

    def __repr__(self):
        r"""__repr__(RigidParticleFactory self) -> std::string"""
        return _RMF.RigidParticleFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_RigidParticleFactory

# Register RigidParticleFactory in _RMF:
_RMF.RigidParticleFactory_swigregister(RigidParticleFactory)

class RigidParticleConstFactory(RigidParticleFactory):
    r"""Proxy of C++ RMF::decorator::RigidParticleConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RigidParticleConstFactory self, FileConstHandle fh) -> RigidParticleConstFactory
        __init__(RigidParticleConstFactory self, FileHandle fh) -> RigidParticleConstFactory
        """
        _RMF.RigidParticleConstFactory_swiginit(self, _RMF.new_RigidParticleConstFactory(*args))
    __swig_destroy__ = _RMF.delete_RigidParticleConstFactory

# Register RigidParticleConstFactory in _RMF:
_RMF.RigidParticleConstFactory_swigregister(RigidParticleConstFactory)

class DiffuserConst(Decorator):
    r"""Proxy of C++ RMF::decorator::DiffuserConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_diffusion_coefficient(self):
        r"""get_diffusion_coefficient(DiffuserConst self) -> RMF::Float"""
        return _RMF.DiffuserConst_get_diffusion_coefficient(self)

    def get_frame_diffusion_coefficient(self):
        r"""get_frame_diffusion_coefficient(DiffuserConst self) -> RMF::Float"""
        return _RMF.DiffuserConst_get_frame_diffusion_coefficient(self)

    def get_static_diffusion_coefficient(self):
        r"""get_static_diffusion_coefficient(DiffuserConst self) -> RMF::Float"""
        return _RMF.DiffuserConst_get_static_diffusion_coefficient(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.DiffuserConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(DiffuserConst self) -> std::string"""
        return _RMF.DiffuserConst___str__(self)

    def __repr__(self):
        r"""__repr__(DiffuserConst self) -> std::string"""
        return _RMF.DiffuserConst___repr__(self)
    __swig_destroy__ = _RMF.delete_DiffuserConst

# Register DiffuserConst in _RMF:
_RMF.DiffuserConst_swigregister(DiffuserConst)

def DiffuserConst_get_decorator_type_name():
    r"""DiffuserConst_get_decorator_type_name() -> std::string"""
    return _RMF.DiffuserConst_get_decorator_type_name()

class Diffuser(DiffuserConst):
    r"""Proxy of C++ RMF::decorator::Diffuser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_diffusion_coefficient(self, v):
        r"""set_diffusion_coefficient(Diffuser self, RMF::Float v)"""
        return _RMF.Diffuser_set_diffusion_coefficient(self, v)

    def set_frame_diffusion_coefficient(self, v):
        r"""set_frame_diffusion_coefficient(Diffuser self, RMF::Float v)"""
        return _RMF.Diffuser_set_frame_diffusion_coefficient(self, v)

    def set_static_diffusion_coefficient(self, v):
        r"""set_static_diffusion_coefficient(Diffuser self, RMF::Float v)"""
        return _RMF.Diffuser_set_static_diffusion_coefficient(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Diffuser_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Diffuser

# Register Diffuser in _RMF:
_RMF.Diffuser_swigregister(Diffuser)

def Diffuser_get_decorator_type_name():
    r"""Diffuser_get_decorator_type_name() -> std::string"""
    return _RMF.Diffuser_get_decorator_type_name()

class DiffuserFactory(Factory):
    r"""Proxy of C++ RMF::decorator::DiffuserFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(DiffuserFactory self, FileConstHandle fh) -> DiffuserFactory
        __init__(DiffuserFactory self, FileHandle fh) -> DiffuserFactory
        """
        _RMF.DiffuserFactory_swiginit(self, _RMF.new_DiffuserFactory(*args))

    def get(self, *args):
        r"""
        get(DiffuserFactory self, NodeConstHandle nh) -> DiffuserConst
        get(DiffuserFactory self, NodeHandle nh) -> Diffuser
        """
        return _RMF.DiffuserFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(DiffuserFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.DiffuserFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(DiffuserFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.DiffuserFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(DiffuserFactory self) -> std::string"""
        return _RMF.DiffuserFactory___str__(self)

    def __repr__(self):
        r"""__repr__(DiffuserFactory self) -> std::string"""
        return _RMF.DiffuserFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_DiffuserFactory

# Register DiffuserFactory in _RMF:
_RMF.DiffuserFactory_swigregister(DiffuserFactory)

class DiffuserConstFactory(DiffuserFactory):
    r"""Proxy of C++ RMF::decorator::DiffuserConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DiffuserConstFactory self, FileConstHandle fh) -> DiffuserConstFactory
        __init__(DiffuserConstFactory self, FileHandle fh) -> DiffuserConstFactory
        """
        _RMF.DiffuserConstFactory_swiginit(self, _RMF.new_DiffuserConstFactory(*args))
    __swig_destroy__ = _RMF.delete_DiffuserConstFactory

# Register DiffuserConstFactory in _RMF:
_RMF.DiffuserConstFactory_swigregister(DiffuserConstFactory)

class AtomConst(Decorator):
    r"""Proxy of C++ RMF::decorator::AtomConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_element(self):
        r"""get_element(AtomConst self) -> RMF::Int"""
        return _RMF.AtomConst_get_element(self)

    def get_frame_element(self):
        r"""get_frame_element(AtomConst self) -> RMF::Int"""
        return _RMF.AtomConst_get_frame_element(self)

    def get_static_element(self):
        r"""get_static_element(AtomConst self) -> RMF::Int"""
        return _RMF.AtomConst_get_static_element(self)

    def get_mass(self):
        r"""get_mass(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_mass(self)

    def get_frame_mass(self):
        r"""get_frame_mass(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_frame_mass(self)

    def get_static_mass(self):
        r"""get_static_mass(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_static_mass(self)

    def get_radius(self):
        r"""get_radius(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_radius(self)

    def get_frame_radius(self):
        r"""get_frame_radius(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_frame_radius(self)

    def get_static_radius(self):
        r"""get_static_radius(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_static_radius(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.AtomConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(AtomConst self) -> std::string"""
        return _RMF.AtomConst___str__(self)

    def __repr__(self):
        r"""__repr__(AtomConst self) -> std::string"""
        return _RMF.AtomConst___repr__(self)
    __swig_destroy__ = _RMF.delete_AtomConst

# Register AtomConst in _RMF:
_RMF.AtomConst_swigregister(AtomConst)

def AtomConst_get_decorator_type_name():
    r"""AtomConst_get_decorator_type_name() -> std::string"""
    return _RMF.AtomConst_get_decorator_type_name()

class Atom(AtomConst):
    r"""Proxy of C++ RMF::decorator::Atom class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_element(self, v):
        r"""set_element(Atom self, RMF::Int v)"""
        return _RMF.Atom_set_element(self, v)

    def set_frame_element(self, v):
        r"""set_frame_element(Atom self, RMF::Int v)"""
        return _RMF.Atom_set_frame_element(self, v)

    def set_static_element(self, v):
        r"""set_static_element(Atom self, RMF::Int v)"""
        return _RMF.Atom_set_static_element(self, v)

    def set_mass(self, v):
        r"""set_mass(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_mass(self, v)

    def set_frame_mass(self, v):
        r"""set_frame_mass(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_frame_mass(self, v)

    def set_static_mass(self, v):
        r"""set_static_mass(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_static_mass(self, v)

    def set_radius(self, v):
        r"""set_radius(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_radius(self, v)

    def set_frame_radius(self, v):
        r"""set_frame_radius(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_frame_radius(self, v)

    def set_static_radius(self, v):
        r"""set_static_radius(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_static_radius(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Atom_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Atom

# Register Atom in _RMF:
_RMF.Atom_swigregister(Atom)

def Atom_get_decorator_type_name():
    r"""Atom_get_decorator_type_name() -> std::string"""
    return _RMF.Atom_get_decorator_type_name()

class AtomFactory(Factory):
    r"""Proxy of C++ RMF::decorator::AtomFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(AtomFactory self, FileConstHandle fh) -> AtomFactory
        __init__(AtomFactory self, FileHandle fh) -> AtomFactory
        """
        _RMF.AtomFactory_swiginit(self, _RMF.new_AtomFactory(*args))

    def get(self, *args):
        r"""
        get(AtomFactory self, NodeConstHandle nh) -> AtomConst
        get(AtomFactory self, NodeHandle nh) -> Atom
        """
        return _RMF.AtomFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(AtomFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AtomFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(AtomFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AtomFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(AtomFactory self) -> std::string"""
        return _RMF.AtomFactory___str__(self)

    def __repr__(self):
        r"""__repr__(AtomFactory self) -> std::string"""
        return _RMF.AtomFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_AtomFactory

# Register AtomFactory in _RMF:
_RMF.AtomFactory_swigregister(AtomFactory)

class AtomConstFactory(AtomFactory):
    r"""Proxy of C++ RMF::decorator::AtomConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AtomConstFactory self, FileConstHandle fh) -> AtomConstFactory
        __init__(AtomConstFactory self, FileHandle fh) -> AtomConstFactory
        """
        _RMF.AtomConstFactory_swiginit(self, _RMF.new_AtomConstFactory(*args))
    __swig_destroy__ = _RMF.delete_AtomConstFactory

# Register AtomConstFactory in _RMF:
_RMF.AtomConstFactory_swigregister(AtomConstFactory)

class ReferenceFrameConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ReferenceFrameConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_rotation(self):
        r"""get_rotation(ReferenceFrameConst self) -> Vector4"""
        return _RMF.ReferenceFrameConst_get_rotation(self)

    def get_frame_rotation(self):
        r"""get_frame_rotation(ReferenceFrameConst self) -> Vector4"""
        return _RMF.ReferenceFrameConst_get_frame_rotation(self)

    def get_static_rotation(self):
        r"""get_static_rotation(ReferenceFrameConst self) -> Vector4"""
        return _RMF.ReferenceFrameConst_get_static_rotation(self)

    def get_translation(self):
        r"""get_translation(ReferenceFrameConst self) -> Vector3"""
        return _RMF.ReferenceFrameConst_get_translation(self)

    def get_frame_translation(self):
        r"""get_frame_translation(ReferenceFrameConst self) -> Vector3"""
        return _RMF.ReferenceFrameConst_get_frame_translation(self)

    def get_static_translation(self):
        r"""get_static_translation(ReferenceFrameConst self) -> Vector3"""
        return _RMF.ReferenceFrameConst_get_static_translation(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ReferenceFrameConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ReferenceFrameConst self) -> std::string"""
        return _RMF.ReferenceFrameConst___str__(self)

    def __repr__(self):
        r"""__repr__(ReferenceFrameConst self) -> std::string"""
        return _RMF.ReferenceFrameConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ReferenceFrameConst

# Register ReferenceFrameConst in _RMF:
_RMF.ReferenceFrameConst_swigregister(ReferenceFrameConst)

def ReferenceFrameConst_get_decorator_type_name():
    r"""ReferenceFrameConst_get_decorator_type_name() -> std::string"""
    return _RMF.ReferenceFrameConst_get_decorator_type_name()

class ReferenceFrame(ReferenceFrameConst):
    r"""Proxy of C++ RMF::decorator::ReferenceFrame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_rotation(self, v):
        r"""set_rotation(ReferenceFrame self, Vector4 v)"""
        return _RMF.ReferenceFrame_set_rotation(self, v)

    def set_frame_rotation(self, v):
        r"""set_frame_rotation(ReferenceFrame self, Vector4 v)"""
        return _RMF.ReferenceFrame_set_frame_rotation(self, v)

    def set_static_rotation(self, v):
        r"""set_static_rotation(ReferenceFrame self, Vector4 v)"""
        return _RMF.ReferenceFrame_set_static_rotation(self, v)

    def set_translation(self, v):
        r"""set_translation(ReferenceFrame self, Vector3 v)"""
        return _RMF.ReferenceFrame_set_translation(self, v)

    def set_frame_translation(self, v):
        r"""set_frame_translation(ReferenceFrame self, Vector3 v)"""
        return _RMF.ReferenceFrame_set_frame_translation(self, v)

    def set_static_translation(self, v):
        r"""set_static_translation(ReferenceFrame self, Vector3 v)"""
        return _RMF.ReferenceFrame_set_static_translation(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ReferenceFrame_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_ReferenceFrame

# Register ReferenceFrame in _RMF:
_RMF.ReferenceFrame_swigregister(ReferenceFrame)

def ReferenceFrame_get_decorator_type_name():
    r"""ReferenceFrame_get_decorator_type_name() -> std::string"""
    return _RMF.ReferenceFrame_get_decorator_type_name()

class ReferenceFrameFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ReferenceFrameFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ReferenceFrameFactory self, FileConstHandle fh) -> ReferenceFrameFactory
        __init__(ReferenceFrameFactory self, FileHandle fh) -> ReferenceFrameFactory
        """
        _RMF.ReferenceFrameFactory_swiginit(self, _RMF.new_ReferenceFrameFactory(*args))

    def get(self, *args):
        r"""
        get(ReferenceFrameFactory self, NodeConstHandle nh) -> ReferenceFrameConst
        get(ReferenceFrameFactory self, NodeHandle nh) -> ReferenceFrame
        """
        return _RMF.ReferenceFrameFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ReferenceFrameFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ReferenceFrameFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ReferenceFrameFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ReferenceFrameFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ReferenceFrameFactory self) -> std::string"""
        return _RMF.ReferenceFrameFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ReferenceFrameFactory self) -> std::string"""
        return _RMF.ReferenceFrameFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ReferenceFrameFactory

# Register ReferenceFrameFactory in _RMF:
_RMF.ReferenceFrameFactory_swigregister(ReferenceFrameFactory)

class ReferenceFrameConstFactory(ReferenceFrameFactory):
    r"""Proxy of C++ RMF::decorator::ReferenceFrameConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ReferenceFrameConstFactory self, FileConstHandle fh) -> ReferenceFrameConstFactory
        __init__(ReferenceFrameConstFactory self, FileHandle fh) -> ReferenceFrameConstFactory
        """
        _RMF.ReferenceFrameConstFactory_swiginit(self, _RMF.new_ReferenceFrameConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ReferenceFrameConstFactory

# Register ReferenceFrameConstFactory in _RMF:
_RMF.ReferenceFrameConstFactory_swigregister(ReferenceFrameConstFactory)

class ResidueConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ResidueConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_residue_index(self):
        r"""get_residue_index(ResidueConst self) -> RMF::Int"""
        return _RMF.ResidueConst_get_residue_index(self)

    def get_frame_residue_index(self):
        r"""get_frame_residue_index(ResidueConst self) -> RMF::Int"""
        return _RMF.ResidueConst_get_frame_residue_index(self)

    def get_static_residue_index(self):
        r"""get_static_residue_index(ResidueConst self) -> RMF::Int"""
        return _RMF.ResidueConst_get_static_residue_index(self)

    def get_residue_type(self):
        r"""get_residue_type(ResidueConst self) -> RMF::String"""
        return _RMF.ResidueConst_get_residue_type(self)

    def get_frame_residue_type(self):
        r"""get_frame_residue_type(ResidueConst self) -> RMF::String"""
        return _RMF.ResidueConst_get_frame_residue_type(self)

    def get_static_residue_type(self):
        r"""get_static_residue_type(ResidueConst self) -> RMF::String"""
        return _RMF.ResidueConst_get_static_residue_type(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ResidueConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ResidueConst self) -> std::string"""
        return _RMF.ResidueConst___str__(self)

    def __repr__(self):
        r"""__repr__(ResidueConst self) -> std::string"""
        return _RMF.ResidueConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ResidueConst

# Register ResidueConst in _RMF:
_RMF.ResidueConst_swigregister(ResidueConst)

def ResidueConst_get_decorator_type_name():
    r"""ResidueConst_get_decorator_type_name() -> std::string"""
    return _RMF.ResidueConst_get_decorator_type_name()

class Residue(ResidueConst):
    r"""Proxy of C++ RMF::decorator::Residue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_residue_index(self, v):
        r"""set_residue_index(Residue self, RMF::Int v)"""
        return _RMF.Residue_set_residue_index(self, v)

    def set_frame_residue_index(self, v):
        r"""set_frame_residue_index(Residue self, RMF::Int v)"""
        return _RMF.Residue_set_frame_residue_index(self, v)

    def set_static_residue_index(self, v):
        r"""set_static_residue_index(Residue self, RMF::Int v)"""
        return _RMF.Residue_set_static_residue_index(self, v)

    def set_residue_type(self, v):
        r"""set_residue_type(Residue self, RMF::String v)"""
        return _RMF.Residue_set_residue_type(self, v)

    def set_frame_residue_type(self, v):
        r"""set_frame_residue_type(Residue self, RMF::String v)"""
        return _RMF.Residue_set_frame_residue_type(self, v)

    def set_static_residue_type(self, v):
        r"""set_static_residue_type(Residue self, RMF::String v)"""
        return _RMF.Residue_set_static_residue_type(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Residue_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Residue

# Register Residue in _RMF:
_RMF.Residue_swigregister(Residue)

def Residue_get_decorator_type_name():
    r"""Residue_get_decorator_type_name() -> std::string"""
    return _RMF.Residue_get_decorator_type_name()

class ResidueFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ResidueFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ResidueFactory self, FileConstHandle fh) -> ResidueFactory
        __init__(ResidueFactory self, FileHandle fh) -> ResidueFactory
        """
        _RMF.ResidueFactory_swiginit(self, _RMF.new_ResidueFactory(*args))

    def get(self, *args):
        r"""
        get(ResidueFactory self, NodeConstHandle nh) -> ResidueConst
        get(ResidueFactory self, NodeHandle nh) -> Residue
        """
        return _RMF.ResidueFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ResidueFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ResidueFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ResidueFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ResidueFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ResidueFactory self) -> std::string"""
        return _RMF.ResidueFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ResidueFactory self) -> std::string"""
        return _RMF.ResidueFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ResidueFactory

# Register ResidueFactory in _RMF:
_RMF.ResidueFactory_swigregister(ResidueFactory)

class ResidueConstFactory(ResidueFactory):
    r"""Proxy of C++ RMF::decorator::ResidueConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ResidueConstFactory self, FileConstHandle fh) -> ResidueConstFactory
        __init__(ResidueConstFactory self, FileHandle fh) -> ResidueConstFactory
        """
        _RMF.ResidueConstFactory_swiginit(self, _RMF.new_ResidueConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ResidueConstFactory

# Register ResidueConstFactory in _RMF:
_RMF.ResidueConstFactory_swigregister(ResidueConstFactory)

class ChainConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ChainConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_chain_id(self):
        r"""get_chain_id(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_chain_id(self)

    def get_frame_chain_id(self):
        r"""get_frame_chain_id(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_frame_chain_id(self)

    def get_static_chain_id(self):
        r"""get_static_chain_id(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_static_chain_id(self)

    def get_sequence(self):
        r"""get_sequence(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_sequence(self)

    def get_frame_sequence(self):
        r"""get_frame_sequence(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_frame_sequence(self)

    def get_static_sequence(self):
        r"""get_static_sequence(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_static_sequence(self)

    def get_chain_type(self):
        r"""get_chain_type(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_chain_type(self)

    def get_frame_chain_type(self):
        r"""get_frame_chain_type(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_frame_chain_type(self)

    def get_static_chain_type(self):
        r"""get_static_chain_type(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_static_chain_type(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ChainConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ChainConst self) -> std::string"""
        return _RMF.ChainConst___str__(self)

    def __repr__(self):
        r"""__repr__(ChainConst self) -> std::string"""
        return _RMF.ChainConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ChainConst

# Register ChainConst in _RMF:
_RMF.ChainConst_swigregister(ChainConst)

def ChainConst_get_decorator_type_name():
    r"""ChainConst_get_decorator_type_name() -> std::string"""
    return _RMF.ChainConst_get_decorator_type_name()

class Chain(ChainConst):
    r"""Proxy of C++ RMF::decorator::Chain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_chain_id(self, v):
        r"""set_chain_id(Chain self, RMF::String v)"""
        return _RMF.Chain_set_chain_id(self, v)

    def set_frame_chain_id(self, v):
        r"""set_frame_chain_id(Chain self, RMF::String v)"""
        return _RMF.Chain_set_frame_chain_id(self, v)

    def set_static_chain_id(self, v):
        r"""set_static_chain_id(Chain self, RMF::String v)"""
        return _RMF.Chain_set_static_chain_id(self, v)

    def set_sequence(self, v):
        r"""set_sequence(Chain self, RMF::String v)"""
        return _RMF.Chain_set_sequence(self, v)

    def set_frame_sequence(self, v):
        r"""set_frame_sequence(Chain self, RMF::String v)"""
        return _RMF.Chain_set_frame_sequence(self, v)

    def set_static_sequence(self, v):
        r"""set_static_sequence(Chain self, RMF::String v)"""
        return _RMF.Chain_set_static_sequence(self, v)

    def set_chain_type(self, v):
        r"""set_chain_type(Chain self, RMF::String v)"""
        return _RMF.Chain_set_chain_type(self, v)

    def set_frame_chain_type(self, v):
        r"""set_frame_chain_type(Chain self, RMF::String v)"""
        return _RMF.Chain_set_frame_chain_type(self, v)

    def set_static_chain_type(self, v):
        r"""set_static_chain_type(Chain self, RMF::String v)"""
        return _RMF.Chain_set_static_chain_type(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Chain_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Chain

# Register Chain in _RMF:
_RMF.Chain_swigregister(Chain)

def Chain_get_decorator_type_name():
    r"""Chain_get_decorator_type_name() -> std::string"""
    return _RMF.Chain_get_decorator_type_name()

class ChainFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ChainFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ChainFactory self, FileConstHandle fh) -> ChainFactory
        __init__(ChainFactory self, FileHandle fh) -> ChainFactory
        """
        _RMF.ChainFactory_swiginit(self, _RMF.new_ChainFactory(*args))

    def get(self, *args):
        r"""
        get(ChainFactory self, NodeConstHandle nh) -> ChainConst
        get(ChainFactory self, NodeHandle nh) -> Chain
        """
        return _RMF.ChainFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ChainFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ChainFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ChainFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ChainFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ChainFactory self) -> std::string"""
        return _RMF.ChainFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ChainFactory self) -> std::string"""
        return _RMF.ChainFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ChainFactory

# Register ChainFactory in _RMF:
_RMF.ChainFactory_swigregister(ChainFactory)

class ChainConstFactory(ChainFactory):
    r"""Proxy of C++ RMF::decorator::ChainConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChainConstFactory self, FileConstHandle fh) -> ChainConstFactory
        __init__(ChainConstFactory self, FileHandle fh) -> ChainConstFactory
        """
        _RMF.ChainConstFactory_swiginit(self, _RMF.new_ChainConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ChainConstFactory

# Register ChainConstFactory in _RMF:
_RMF.ChainConstFactory_swigregister(ChainConstFactory)

class FragmentConst(Decorator):
    r"""Proxy of C++ RMF::decorator::FragmentConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_residue_indexes(self):
        r"""get_residue_indexes(FragmentConst self) -> Ints"""
        return _RMF.FragmentConst_get_residue_indexes(self)

    def get_frame_residue_indexes(self):
        r"""get_frame_residue_indexes(FragmentConst self) -> Ints"""
        return _RMF.FragmentConst_get_frame_residue_indexes(self)

    def get_static_residue_indexes(self):
        r"""get_static_residue_indexes(FragmentConst self) -> Ints"""
        return _RMF.FragmentConst_get_static_residue_indexes(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.FragmentConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(FragmentConst self) -> std::string"""
        return _RMF.FragmentConst___str__(self)

    def __repr__(self):
        r"""__repr__(FragmentConst self) -> std::string"""
        return _RMF.FragmentConst___repr__(self)
    __swig_destroy__ = _RMF.delete_FragmentConst

# Register FragmentConst in _RMF:
_RMF.FragmentConst_swigregister(FragmentConst)

def FragmentConst_get_decorator_type_name():
    r"""FragmentConst_get_decorator_type_name() -> std::string"""
    return _RMF.FragmentConst_get_decorator_type_name()

class Fragment(FragmentConst):
    r"""Proxy of C++ RMF::decorator::Fragment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_residue_indexes(self, v):
        r"""set_residue_indexes(Fragment self, Ints v)"""
        return _RMF.Fragment_set_residue_indexes(self, v)

    def set_frame_residue_indexes(self, v):
        r"""set_frame_residue_indexes(Fragment self, Ints v)"""
        return _RMF.Fragment_set_frame_residue_indexes(self, v)

    def set_static_residue_indexes(self, v):
        r"""set_static_residue_indexes(Fragment self, Ints v)"""
        return _RMF.Fragment_set_static_residue_indexes(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Fragment_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Fragment

# Register Fragment in _RMF:
_RMF.Fragment_swigregister(Fragment)

def Fragment_get_decorator_type_name():
    r"""Fragment_get_decorator_type_name() -> std::string"""
    return _RMF.Fragment_get_decorator_type_name()

class FragmentFactory(Factory):
    r"""Proxy of C++ RMF::decorator::FragmentFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(FragmentFactory self, FileConstHandle fh) -> FragmentFactory
        __init__(FragmentFactory self, FileHandle fh) -> FragmentFactory
        """
        _RMF.FragmentFactory_swiginit(self, _RMF.new_FragmentFactory(*args))

    def get(self, *args):
        r"""
        get(FragmentFactory self, NodeConstHandle nh) -> FragmentConst
        get(FragmentFactory self, NodeHandle nh) -> Fragment
        """
        return _RMF.FragmentFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(FragmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.FragmentFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(FragmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.FragmentFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(FragmentFactory self) -> std::string"""
        return _RMF.FragmentFactory___str__(self)

    def __repr__(self):
        r"""__repr__(FragmentFactory self) -> std::string"""
        return _RMF.FragmentFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_FragmentFactory

# Register FragmentFactory in _RMF:
_RMF.FragmentFactory_swigregister(FragmentFactory)

class FragmentConstFactory(FragmentFactory):
    r"""Proxy of C++ RMF::decorator::FragmentConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FragmentConstFactory self, FileConstHandle fh) -> FragmentConstFactory
        __init__(FragmentConstFactory self, FileHandle fh) -> FragmentConstFactory
        """
        _RMF.FragmentConstFactory_swiginit(self, _RMF.new_FragmentConstFactory(*args))
    __swig_destroy__ = _RMF.delete_FragmentConstFactory

# Register FragmentConstFactory in _RMF:
_RMF.FragmentConstFactory_swigregister(FragmentConstFactory)

class BackwardsCompatibilityFragmentConst(Decorator):
    r"""Proxy of C++ RMF::decorator::BackwardsCompatibilityFragmentConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_indexes(self):
        r"""get_indexes(BackwardsCompatibilityFragmentConst self) -> Ints"""
        return _RMF.BackwardsCompatibilityFragmentConst_get_indexes(self)

    def get_frame_indexes(self):
        r"""get_frame_indexes(BackwardsCompatibilityFragmentConst self) -> Ints"""
        return _RMF.BackwardsCompatibilityFragmentConst_get_frame_indexes(self)

    def get_static_indexes(self):
        r"""get_static_indexes(BackwardsCompatibilityFragmentConst self) -> Ints"""
        return _RMF.BackwardsCompatibilityFragmentConst_get_static_indexes(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.BackwardsCompatibilityFragmentConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(BackwardsCompatibilityFragmentConst self) -> std::string"""
        return _RMF.BackwardsCompatibilityFragmentConst___str__(self)

    def __repr__(self):
        r"""__repr__(BackwardsCompatibilityFragmentConst self) -> std::string"""
        return _RMF.BackwardsCompatibilityFragmentConst___repr__(self)
    __swig_destroy__ = _RMF.delete_BackwardsCompatibilityFragmentConst

# Register BackwardsCompatibilityFragmentConst in _RMF:
_RMF.BackwardsCompatibilityFragmentConst_swigregister(BackwardsCompatibilityFragmentConst)

def BackwardsCompatibilityFragmentConst_get_decorator_type_name():
    r"""BackwardsCompatibilityFragmentConst_get_decorator_type_name() -> std::string"""
    return _RMF.BackwardsCompatibilityFragmentConst_get_decorator_type_name()

class BackwardsCompatibilityFragment(BackwardsCompatibilityFragmentConst):
    r"""Proxy of C++ RMF::decorator::BackwardsCompatibilityFragment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_indexes(self, v):
        r"""set_indexes(BackwardsCompatibilityFragment self, Ints v)"""
        return _RMF.BackwardsCompatibilityFragment_set_indexes(self, v)

    def set_frame_indexes(self, v):
        r"""set_frame_indexes(BackwardsCompatibilityFragment self, Ints v)"""
        return _RMF.BackwardsCompatibilityFragment_set_frame_indexes(self, v)

    def set_static_indexes(self, v):
        r"""set_static_indexes(BackwardsCompatibilityFragment self, Ints v)"""
        return _RMF.BackwardsCompatibilityFragment_set_static_indexes(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.BackwardsCompatibilityFragment_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_BackwardsCompatibilityFragment

# Register BackwardsCompatibilityFragment in _RMF:
_RMF.BackwardsCompatibilityFragment_swigregister(BackwardsCompatibilityFragment)

def BackwardsCompatibilityFragment_get_decorator_type_name():
    r"""BackwardsCompatibilityFragment_get_decorator_type_name() -> std::string"""
    return _RMF.BackwardsCompatibilityFragment_get_decorator_type_name()

class BackwardsCompatibilityFragmentFactory(Factory):
    r"""Proxy of C++ RMF::decorator::BackwardsCompatibilityFragmentFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(BackwardsCompatibilityFragmentFactory self, FileConstHandle fh) -> BackwardsCompatibilityFragmentFactory
        __init__(BackwardsCompatibilityFragmentFactory self, FileHandle fh) -> BackwardsCompatibilityFragmentFactory
        """
        _RMF.BackwardsCompatibilityFragmentFactory_swiginit(self, _RMF.new_BackwardsCompatibilityFragmentFactory(*args))

    def get(self, *args):
        r"""
        get(BackwardsCompatibilityFragmentFactory self, NodeConstHandle nh) -> BackwardsCompatibilityFragmentConst
        get(BackwardsCompatibilityFragmentFactory self, NodeHandle nh) -> BackwardsCompatibilityFragment
        """
        return _RMF.BackwardsCompatibilityFragmentFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(BackwardsCompatibilityFragmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BackwardsCompatibilityFragmentFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(BackwardsCompatibilityFragmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BackwardsCompatibilityFragmentFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(BackwardsCompatibilityFragmentFactory self) -> std::string"""
        return _RMF.BackwardsCompatibilityFragmentFactory___str__(self)

    def __repr__(self):
        r"""__repr__(BackwardsCompatibilityFragmentFactory self) -> std::string"""
        return _RMF.BackwardsCompatibilityFragmentFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_BackwardsCompatibilityFragmentFactory

# Register BackwardsCompatibilityFragmentFactory in _RMF:
_RMF.BackwardsCompatibilityFragmentFactory_swigregister(BackwardsCompatibilityFragmentFactory)

class BackwardsCompatibilityFragmentConstFactory(BackwardsCompatibilityFragmentFactory):
    r"""Proxy of C++ RMF::decorator::BackwardsCompatibilityFragmentConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BackwardsCompatibilityFragmentConstFactory self, FileConstHandle fh) -> BackwardsCompatibilityFragmentConstFactory
        __init__(BackwardsCompatibilityFragmentConstFactory self, FileHandle fh) -> BackwardsCompatibilityFragmentConstFactory
        """
        _RMF.BackwardsCompatibilityFragmentConstFactory_swiginit(self, _RMF.new_BackwardsCompatibilityFragmentConstFactory(*args))
    __swig_destroy__ = _RMF.delete_BackwardsCompatibilityFragmentConstFactory

# Register BackwardsCompatibilityFragmentConstFactory in _RMF:
_RMF.BackwardsCompatibilityFragmentConstFactory_swigregister(BackwardsCompatibilityFragmentConstFactory)

class DomainConst(Decorator):
    r"""Proxy of C++ RMF::decorator::DomainConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_residue_indexes(self):
        r"""get_residue_indexes(DomainConst self) -> IntRange"""
        return _RMF.DomainConst_get_residue_indexes(self)

    def get_static_residue_indexes(self):
        r"""get_static_residue_indexes(DomainConst self) -> IntRange"""
        return _RMF.DomainConst_get_static_residue_indexes(self)

    def get_frame_residue_indexes(self):
        r"""get_frame_residue_indexes(DomainConst self) -> IntRange"""
        return _RMF.DomainConst_get_frame_residue_indexes(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.DomainConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(DomainConst self) -> std::string"""
        return _RMF.DomainConst___str__(self)

    def __repr__(self):
        r"""__repr__(DomainConst self) -> std::string"""
        return _RMF.DomainConst___repr__(self)
    __swig_destroy__ = _RMF.delete_DomainConst

# Register DomainConst in _RMF:
_RMF.DomainConst_swigregister(DomainConst)

def DomainConst_get_decorator_type_name():
    r"""DomainConst_get_decorator_type_name() -> std::string"""
    return _RMF.DomainConst_get_decorator_type_name()

class Domain(DomainConst):
    r"""Proxy of C++ RMF::decorator::Domain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_residue_indexes(self, v0, v1):
        r"""set_residue_indexes(Domain self, RMF::Int v0, RMF::Int v1)"""
        return _RMF.Domain_set_residue_indexes(self, v0, v1)

    def set_frame_residue_indexes(self, v0, v1):
        r"""set_frame_residue_indexes(Domain self, RMF::Int v0, RMF::Int v1)"""
        return _RMF.Domain_set_frame_residue_indexes(self, v0, v1)

    def set_static_residue_indexes(self, v0, v1):
        r"""set_static_residue_indexes(Domain self, RMF::Int v0, RMF::Int v1)"""
        return _RMF.Domain_set_static_residue_indexes(self, v0, v1)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Domain_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Domain

# Register Domain in _RMF:
_RMF.Domain_swigregister(Domain)

def Domain_get_decorator_type_name():
    r"""Domain_get_decorator_type_name() -> std::string"""
    return _RMF.Domain_get_decorator_type_name()

class DomainFactory(Factory):
    r"""Proxy of C++ RMF::decorator::DomainFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(DomainFactory self, FileConstHandle fh) -> DomainFactory
        __init__(DomainFactory self, FileHandle fh) -> DomainFactory
        """
        _RMF.DomainFactory_swiginit(self, _RMF.new_DomainFactory(*args))

    def get(self, *args):
        r"""
        get(DomainFactory self, NodeConstHandle nh) -> DomainConst
        get(DomainFactory self, NodeHandle nh) -> Domain
        """
        return _RMF.DomainFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(DomainFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.DomainFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(DomainFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.DomainFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(DomainFactory self) -> std::string"""
        return _RMF.DomainFactory___str__(self)

    def __repr__(self):
        r"""__repr__(DomainFactory self) -> std::string"""
        return _RMF.DomainFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_DomainFactory

# Register DomainFactory in _RMF:
_RMF.DomainFactory_swigregister(DomainFactory)

class DomainConstFactory(DomainFactory):
    r"""Proxy of C++ RMF::decorator::DomainConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DomainConstFactory self, FileConstHandle fh) -> DomainConstFactory
        __init__(DomainConstFactory self, FileHandle fh) -> DomainConstFactory
        """
        _RMF.DomainConstFactory_swiginit(self, _RMF.new_DomainConstFactory(*args))
    __swig_destroy__ = _RMF.delete_DomainConstFactory

# Register DomainConstFactory in _RMF:
_RMF.DomainConstFactory_swigregister(DomainConstFactory)

class TypedConst(Decorator):
    r"""Proxy of C++ RMF::decorator::TypedConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_type_name(self):
        r"""get_type_name(TypedConst self) -> RMF::String"""
        return _RMF.TypedConst_get_type_name(self)

    def get_frame_type_name(self):
        r"""get_frame_type_name(TypedConst self) -> RMF::String"""
        return _RMF.TypedConst_get_frame_type_name(self)

    def get_static_type_name(self):
        r"""get_static_type_name(TypedConst self) -> RMF::String"""
        return _RMF.TypedConst_get_static_type_name(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.TypedConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(TypedConst self) -> std::string"""
        return _RMF.TypedConst___str__(self)

    def __repr__(self):
        r"""__repr__(TypedConst self) -> std::string"""
        return _RMF.TypedConst___repr__(self)
    __swig_destroy__ = _RMF.delete_TypedConst

# Register TypedConst in _RMF:
_RMF.TypedConst_swigregister(TypedConst)

def TypedConst_get_decorator_type_name():
    r"""TypedConst_get_decorator_type_name() -> std::string"""
    return _RMF.TypedConst_get_decorator_type_name()

class Typed(TypedConst):
    r"""Proxy of C++ RMF::decorator::Typed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_type_name(self, v):
        r"""set_type_name(Typed self, RMF::String v)"""
        return _RMF.Typed_set_type_name(self, v)

    def set_frame_type_name(self, v):
        r"""set_frame_type_name(Typed self, RMF::String v)"""
        return _RMF.Typed_set_frame_type_name(self, v)

    def set_static_type_name(self, v):
        r"""set_static_type_name(Typed self, RMF::String v)"""
        return _RMF.Typed_set_static_type_name(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Typed_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Typed

# Register Typed in _RMF:
_RMF.Typed_swigregister(Typed)

def Typed_get_decorator_type_name():
    r"""Typed_get_decorator_type_name() -> std::string"""
    return _RMF.Typed_get_decorator_type_name()

class TypedFactory(Factory):
    r"""Proxy of C++ RMF::decorator::TypedFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(TypedFactory self, FileConstHandle fh) -> TypedFactory
        __init__(TypedFactory self, FileHandle fh) -> TypedFactory
        """
        _RMF.TypedFactory_swiginit(self, _RMF.new_TypedFactory(*args))

    def get(self, *args):
        r"""
        get(TypedFactory self, NodeConstHandle nh) -> TypedConst
        get(TypedFactory self, NodeHandle nh) -> Typed
        """
        return _RMF.TypedFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(TypedFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.TypedFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(TypedFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.TypedFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(TypedFactory self) -> std::string"""
        return _RMF.TypedFactory___str__(self)

    def __repr__(self):
        r"""__repr__(TypedFactory self) -> std::string"""
        return _RMF.TypedFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_TypedFactory

# Register TypedFactory in _RMF:
_RMF.TypedFactory_swigregister(TypedFactory)

class TypedConstFactory(TypedFactory):
    r"""Proxy of C++ RMF::decorator::TypedConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TypedConstFactory self, FileConstHandle fh) -> TypedConstFactory
        __init__(TypedConstFactory self, FileHandle fh) -> TypedConstFactory
        """
        _RMF.TypedConstFactory_swiginit(self, _RMF.new_TypedConstFactory(*args))
    __swig_destroy__ = _RMF.delete_TypedConstFactory

# Register TypedConstFactory in _RMF:
_RMF.TypedConstFactory_swigregister(TypedConstFactory)

class CopyConst(Decorator):
    r"""Proxy of C++ RMF::decorator::CopyConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_copy_index(self):
        r"""get_copy_index(CopyConst self) -> RMF::Int"""
        return _RMF.CopyConst_get_copy_index(self)

    def get_frame_copy_index(self):
        r"""get_frame_copy_index(CopyConst self) -> RMF::Int"""
        return _RMF.CopyConst_get_frame_copy_index(self)

    def get_static_copy_index(self):
        r"""get_static_copy_index(CopyConst self) -> RMF::Int"""
        return _RMF.CopyConst_get_static_copy_index(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.CopyConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(CopyConst self) -> std::string"""
        return _RMF.CopyConst___str__(self)

    def __repr__(self):
        r"""__repr__(CopyConst self) -> std::string"""
        return _RMF.CopyConst___repr__(self)
    __swig_destroy__ = _RMF.delete_CopyConst

# Register CopyConst in _RMF:
_RMF.CopyConst_swigregister(CopyConst)

def CopyConst_get_decorator_type_name():
    r"""CopyConst_get_decorator_type_name() -> std::string"""
    return _RMF.CopyConst_get_decorator_type_name()

class Copy(CopyConst):
    r"""Proxy of C++ RMF::decorator::Copy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_copy_index(self, v):
        r"""set_copy_index(Copy self, RMF::Int v)"""
        return _RMF.Copy_set_copy_index(self, v)

    def set_frame_copy_index(self, v):
        r"""set_frame_copy_index(Copy self, RMF::Int v)"""
        return _RMF.Copy_set_frame_copy_index(self, v)

    def set_static_copy_index(self, v):
        r"""set_static_copy_index(Copy self, RMF::Int v)"""
        return _RMF.Copy_set_static_copy_index(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Copy_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Copy

# Register Copy in _RMF:
_RMF.Copy_swigregister(Copy)

def Copy_get_decorator_type_name():
    r"""Copy_get_decorator_type_name() -> std::string"""
    return _RMF.Copy_get_decorator_type_name()

class CopyFactory(Factory):
    r"""Proxy of C++ RMF::decorator::CopyFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(CopyFactory self, FileConstHandle fh) -> CopyFactory
        __init__(CopyFactory self, FileHandle fh) -> CopyFactory
        """
        _RMF.CopyFactory_swiginit(self, _RMF.new_CopyFactory(*args))

    def get(self, *args):
        r"""
        get(CopyFactory self, NodeConstHandle nh) -> CopyConst
        get(CopyFactory self, NodeHandle nh) -> Copy
        """
        return _RMF.CopyFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(CopyFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CopyFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(CopyFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CopyFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(CopyFactory self) -> std::string"""
        return _RMF.CopyFactory___str__(self)

    def __repr__(self):
        r"""__repr__(CopyFactory self) -> std::string"""
        return _RMF.CopyFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_CopyFactory

# Register CopyFactory in _RMF:
_RMF.CopyFactory_swigregister(CopyFactory)

class CopyConstFactory(CopyFactory):
    r"""Proxy of C++ RMF::decorator::CopyConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CopyConstFactory self, FileConstHandle fh) -> CopyConstFactory
        __init__(CopyConstFactory self, FileHandle fh) -> CopyConstFactory
        """
        _RMF.CopyConstFactory_swiginit(self, _RMF.new_CopyConstFactory(*args))
    __swig_destroy__ = _RMF.delete_CopyConstFactory

# Register CopyConstFactory in _RMF:
_RMF.CopyConstFactory_swigregister(CopyConstFactory)

class StateConst(Decorator):
    r"""Proxy of C++ RMF::decorator::StateConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_state_index(self):
        r"""get_state_index(StateConst self) -> RMF::Int"""
        return _RMF.StateConst_get_state_index(self)

    def get_frame_state_index(self):
        r"""get_frame_state_index(StateConst self) -> RMF::Int"""
        return _RMF.StateConst_get_frame_state_index(self)

    def get_static_state_index(self):
        r"""get_static_state_index(StateConst self) -> RMF::Int"""
        return _RMF.StateConst_get_static_state_index(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.StateConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(StateConst self) -> std::string"""
        return _RMF.StateConst___str__(self)

    def __repr__(self):
        r"""__repr__(StateConst self) -> std::string"""
        return _RMF.StateConst___repr__(self)
    __swig_destroy__ = _RMF.delete_StateConst

# Register StateConst in _RMF:
_RMF.StateConst_swigregister(StateConst)

def StateConst_get_decorator_type_name():
    r"""StateConst_get_decorator_type_name() -> std::string"""
    return _RMF.StateConst_get_decorator_type_name()

class State(StateConst):
    r"""Proxy of C++ RMF::decorator::State class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_state_index(self, v):
        r"""set_state_index(State self, RMF::Int v)"""
        return _RMF.State_set_state_index(self, v)

    def set_frame_state_index(self, v):
        r"""set_frame_state_index(State self, RMF::Int v)"""
        return _RMF.State_set_frame_state_index(self, v)

    def set_static_state_index(self, v):
        r"""set_static_state_index(State self, RMF::Int v)"""
        return _RMF.State_set_static_state_index(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.State_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_State

# Register State in _RMF:
_RMF.State_swigregister(State)

def State_get_decorator_type_name():
    r"""State_get_decorator_type_name() -> std::string"""
    return _RMF.State_get_decorator_type_name()

class StateFactory(Factory):
    r"""Proxy of C++ RMF::decorator::StateFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(StateFactory self, FileConstHandle fh) -> StateFactory
        __init__(StateFactory self, FileHandle fh) -> StateFactory
        """
        _RMF.StateFactory_swiginit(self, _RMF.new_StateFactory(*args))

    def get(self, *args):
        r"""
        get(StateFactory self, NodeConstHandle nh) -> StateConst
        get(StateFactory self, NodeHandle nh) -> State
        """
        return _RMF.StateFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(StateFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.StateFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(StateFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.StateFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(StateFactory self) -> std::string"""
        return _RMF.StateFactory___str__(self)

    def __repr__(self):
        r"""__repr__(StateFactory self) -> std::string"""
        return _RMF.StateFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_StateFactory

# Register StateFactory in _RMF:
_RMF.StateFactory_swigregister(StateFactory)

class StateConstFactory(StateFactory):
    r"""Proxy of C++ RMF::decorator::StateConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(StateConstFactory self, FileConstHandle fh) -> StateConstFactory
        __init__(StateConstFactory self, FileHandle fh) -> StateConstFactory
        """
        _RMF.StateConstFactory_swiginit(self, _RMF.new_StateConstFactory(*args))
    __swig_destroy__ = _RMF.delete_StateConstFactory

# Register StateConstFactory in _RMF:
_RMF.StateConstFactory_swigregister(StateConstFactory)

class ExplicitResolutionConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ExplicitResolutionConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_explicit_resolution(self):
        r"""get_explicit_resolution(ExplicitResolutionConst self) -> RMF::Float"""
        return _RMF.ExplicitResolutionConst_get_explicit_resolution(self)

    def get_frame_explicit_resolution(self):
        r"""get_frame_explicit_resolution(ExplicitResolutionConst self) -> RMF::Float"""
        return _RMF.ExplicitResolutionConst_get_frame_explicit_resolution(self)

    def get_static_explicit_resolution(self):
        r"""get_static_explicit_resolution(ExplicitResolutionConst self) -> RMF::Float"""
        return _RMF.ExplicitResolutionConst_get_static_explicit_resolution(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ExplicitResolutionConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ExplicitResolutionConst self) -> std::string"""
        return _RMF.ExplicitResolutionConst___str__(self)

    def __repr__(self):
        r"""__repr__(ExplicitResolutionConst self) -> std::string"""
        return _RMF.ExplicitResolutionConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ExplicitResolutionConst

# Register ExplicitResolutionConst in _RMF:
_RMF.ExplicitResolutionConst_swigregister(ExplicitResolutionConst)

def ExplicitResolutionConst_get_decorator_type_name():
    r"""ExplicitResolutionConst_get_decorator_type_name() -> std::string"""
    return _RMF.ExplicitResolutionConst_get_decorator_type_name()

class ExplicitResolution(ExplicitResolutionConst):
    r"""Proxy of C++ RMF::decorator::ExplicitResolution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_explicit_resolution(self, v):
        r"""set_explicit_resolution(ExplicitResolution self, RMF::Float v)"""
        return _RMF.ExplicitResolution_set_explicit_resolution(self, v)

    def set_frame_explicit_resolution(self, v):
        r"""set_frame_explicit_resolution(ExplicitResolution self, RMF::Float v)"""
        return _RMF.ExplicitResolution_set_frame_explicit_resolution(self, v)

    def set_static_explicit_resolution(self, v):
        r"""set_static_explicit_resolution(ExplicitResolution self, RMF::Float v)"""
        return _RMF.ExplicitResolution_set_static_explicit_resolution(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ExplicitResolution_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_ExplicitResolution

# Register ExplicitResolution in _RMF:
_RMF.ExplicitResolution_swigregister(ExplicitResolution)

def ExplicitResolution_get_decorator_type_name():
    r"""ExplicitResolution_get_decorator_type_name() -> std::string"""
    return _RMF.ExplicitResolution_get_decorator_type_name()

class ExplicitResolutionFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ExplicitResolutionFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ExplicitResolutionFactory self, FileConstHandle fh) -> ExplicitResolutionFactory
        __init__(ExplicitResolutionFactory self, FileHandle fh) -> ExplicitResolutionFactory
        """
        _RMF.ExplicitResolutionFactory_swiginit(self, _RMF.new_ExplicitResolutionFactory(*args))

    def get(self, *args):
        r"""
        get(ExplicitResolutionFactory self, NodeConstHandle nh) -> ExplicitResolutionConst
        get(ExplicitResolutionFactory self, NodeHandle nh) -> ExplicitResolution
        """
        return _RMF.ExplicitResolutionFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ExplicitResolutionFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ExplicitResolutionFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ExplicitResolutionFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ExplicitResolutionFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ExplicitResolutionFactory self) -> std::string"""
        return _RMF.ExplicitResolutionFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ExplicitResolutionFactory self) -> std::string"""
        return _RMF.ExplicitResolutionFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ExplicitResolutionFactory

# Register ExplicitResolutionFactory in _RMF:
_RMF.ExplicitResolutionFactory_swigregister(ExplicitResolutionFactory)

class ExplicitResolutionConstFactory(ExplicitResolutionFactory):
    r"""Proxy of C++ RMF::decorator::ExplicitResolutionConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ExplicitResolutionConstFactory self, FileConstHandle fh) -> ExplicitResolutionConstFactory
        __init__(ExplicitResolutionConstFactory self, FileHandle fh) -> ExplicitResolutionConstFactory
        """
        _RMF.ExplicitResolutionConstFactory_swiginit(self, _RMF.new_ExplicitResolutionConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ExplicitResolutionConstFactory

# Register ExplicitResolutionConstFactory in _RMF:
_RMF.ExplicitResolutionConstFactory_swigregister(ExplicitResolutionConstFactory)

class ColoredConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ColoredConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_rgb_color(self):
        r"""get_rgb_color(ColoredConst self) -> Vector3"""
        return _RMF.ColoredConst_get_rgb_color(self)

    def get_frame_rgb_color(self):
        r"""get_frame_rgb_color(ColoredConst self) -> Vector3"""
        return _RMF.ColoredConst_get_frame_rgb_color(self)

    def get_static_rgb_color(self):
        r"""get_static_rgb_color(ColoredConst self) -> Vector3"""
        return _RMF.ColoredConst_get_static_rgb_color(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ColoredConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ColoredConst self) -> std::string"""
        return _RMF.ColoredConst___str__(self)

    def __repr__(self):
        r"""__repr__(ColoredConst self) -> std::string"""
        return _RMF.ColoredConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ColoredConst

# Register ColoredConst in _RMF:
_RMF.ColoredConst_swigregister(ColoredConst)

def ColoredConst_get_decorator_type_name():
    r"""ColoredConst_get_decorator_type_name() -> std::string"""
    return _RMF.ColoredConst_get_decorator_type_name()

class Colored(ColoredConst):
    r"""Proxy of C++ RMF::decorator::Colored class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_rgb_color(self, v):
        r"""set_rgb_color(Colored self, Vector3 v)"""
        return _RMF.Colored_set_rgb_color(self, v)

    def set_frame_rgb_color(self, v):
        r"""set_frame_rgb_color(Colored self, Vector3 v)"""
        return _RMF.Colored_set_frame_rgb_color(self, v)

    def set_static_rgb_color(self, v):
        r"""set_static_rgb_color(Colored self, Vector3 v)"""
        return _RMF.Colored_set_static_rgb_color(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Colored_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Colored

# Register Colored in _RMF:
_RMF.Colored_swigregister(Colored)

def Colored_get_decorator_type_name():
    r"""Colored_get_decorator_type_name() -> std::string"""
    return _RMF.Colored_get_decorator_type_name()

class ColoredFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ColoredFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ColoredFactory self, FileConstHandle fh) -> ColoredFactory
        __init__(ColoredFactory self, FileHandle fh) -> ColoredFactory
        """
        _RMF.ColoredFactory_swiginit(self, _RMF.new_ColoredFactory(*args))

    def get(self, *args):
        r"""
        get(ColoredFactory self, NodeConstHandle nh) -> ColoredConst
        get(ColoredFactory self, NodeHandle nh) -> Colored
        """
        return _RMF.ColoredFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ColoredFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ColoredFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ColoredFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ColoredFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ColoredFactory self) -> std::string"""
        return _RMF.ColoredFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ColoredFactory self) -> std::string"""
        return _RMF.ColoredFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ColoredFactory

# Register ColoredFactory in _RMF:
_RMF.ColoredFactory_swigregister(ColoredFactory)

class ColoredConstFactory(ColoredFactory):
    r"""Proxy of C++ RMF::decorator::ColoredConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ColoredConstFactory self, FileConstHandle fh) -> ColoredConstFactory
        __init__(ColoredConstFactory self, FileHandle fh) -> ColoredConstFactory
        """
        _RMF.ColoredConstFactory_swiginit(self, _RMF.new_ColoredConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ColoredConstFactory

# Register ColoredConstFactory in _RMF:
_RMF.ColoredConstFactory_swigregister(ColoredConstFactory)

class BallConst(Decorator):
    r"""Proxy of C++ RMF::decorator::BallConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_coordinates(self):
        r"""get_coordinates(BallConst self) -> Vector3"""
        return _RMF.BallConst_get_coordinates(self)

    def get_frame_coordinates(self):
        r"""get_frame_coordinates(BallConst self) -> Vector3"""
        return _RMF.BallConst_get_frame_coordinates(self)

    def get_static_coordinates(self):
        r"""get_static_coordinates(BallConst self) -> Vector3"""
        return _RMF.BallConst_get_static_coordinates(self)

    def get_radius(self):
        r"""get_radius(BallConst self) -> RMF::Float"""
        return _RMF.BallConst_get_radius(self)

    def get_frame_radius(self):
        r"""get_frame_radius(BallConst self) -> RMF::Float"""
        return _RMF.BallConst_get_frame_radius(self)

    def get_static_radius(self):
        r"""get_static_radius(BallConst self) -> RMF::Float"""
        return _RMF.BallConst_get_static_radius(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.BallConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(BallConst self) -> std::string"""
        return _RMF.BallConst___str__(self)

    def __repr__(self):
        r"""__repr__(BallConst self) -> std::string"""
        return _RMF.BallConst___repr__(self)
    __swig_destroy__ = _RMF.delete_BallConst

# Register BallConst in _RMF:
_RMF.BallConst_swigregister(BallConst)

def BallConst_get_decorator_type_name():
    r"""BallConst_get_decorator_type_name() -> std::string"""
    return _RMF.BallConst_get_decorator_type_name()

class Ball(BallConst):
    r"""Proxy of C++ RMF::decorator::Ball class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_coordinates(self, v):
        r"""set_coordinates(Ball self, Vector3 v)"""
        return _RMF.Ball_set_coordinates(self, v)

    def set_frame_coordinates(self, v):
        r"""set_frame_coordinates(Ball self, Vector3 v)"""
        return _RMF.Ball_set_frame_coordinates(self, v)

    def set_static_coordinates(self, v):
        r"""set_static_coordinates(Ball self, Vector3 v)"""
        return _RMF.Ball_set_static_coordinates(self, v)

    def set_radius(self, v):
        r"""set_radius(Ball self, RMF::Float v)"""
        return _RMF.Ball_set_radius(self, v)

    def set_frame_radius(self, v):
        r"""set_frame_radius(Ball self, RMF::Float v)"""
        return _RMF.Ball_set_frame_radius(self, v)

    def set_static_radius(self, v):
        r"""set_static_radius(Ball self, RMF::Float v)"""
        return _RMF.Ball_set_static_radius(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Ball_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Ball

# Register Ball in _RMF:
_RMF.Ball_swigregister(Ball)

def Ball_get_decorator_type_name():
    r"""Ball_get_decorator_type_name() -> std::string"""
    return _RMF.Ball_get_decorator_type_name()

class BallFactory(Factory):
    r"""Proxy of C++ RMF::decorator::BallFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(BallFactory self, FileConstHandle fh) -> BallFactory
        __init__(BallFactory self, FileHandle fh) -> BallFactory
        """
        _RMF.BallFactory_swiginit(self, _RMF.new_BallFactory(*args))

    def get(self, *args):
        r"""
        get(BallFactory self, NodeConstHandle nh) -> BallConst
        get(BallFactory self, NodeHandle nh) -> Ball
        """
        return _RMF.BallFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(BallFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BallFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(BallFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BallFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(BallFactory self) -> std::string"""
        return _RMF.BallFactory___str__(self)

    def __repr__(self):
        r"""__repr__(BallFactory self) -> std::string"""
        return _RMF.BallFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_BallFactory

# Register BallFactory in _RMF:
_RMF.BallFactory_swigregister(BallFactory)

class BallConstFactory(BallFactory):
    r"""Proxy of C++ RMF::decorator::BallConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BallConstFactory self, FileConstHandle fh) -> BallConstFactory
        __init__(BallConstFactory self, FileHandle fh) -> BallConstFactory
        """
        _RMF.BallConstFactory_swiginit(self, _RMF.new_BallConstFactory(*args))
    __swig_destroy__ = _RMF.delete_BallConstFactory

# Register BallConstFactory in _RMF:
_RMF.BallConstFactory_swigregister(BallConstFactory)

class EllipsoidConst(Decorator):
    r"""Proxy of C++ RMF::decorator::EllipsoidConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_axis_lengths(self):
        r"""get_axis_lengths(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_axis_lengths(self)

    def get_frame_axis_lengths(self):
        r"""get_frame_axis_lengths(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_frame_axis_lengths(self)

    def get_static_axis_lengths(self):
        r"""get_static_axis_lengths(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_static_axis_lengths(self)

    def get_orientation(self):
        r"""get_orientation(EllipsoidConst self) -> Vector4"""
        return _RMF.EllipsoidConst_get_orientation(self)

    def get_frame_orientation(self):
        r"""get_frame_orientation(EllipsoidConst self) -> Vector4"""
        return _RMF.EllipsoidConst_get_frame_orientation(self)

    def get_static_orientation(self):
        r"""get_static_orientation(EllipsoidConst self) -> Vector4"""
        return _RMF.EllipsoidConst_get_static_orientation(self)

    def get_coordinates(self):
        r"""get_coordinates(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_coordinates(self)

    def get_frame_coordinates(self):
        r"""get_frame_coordinates(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_frame_coordinates(self)

    def get_static_coordinates(self):
        r"""get_static_coordinates(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_static_coordinates(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.EllipsoidConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(EllipsoidConst self) -> std::string"""
        return _RMF.EllipsoidConst___str__(self)

    def __repr__(self):
        r"""__repr__(EllipsoidConst self) -> std::string"""
        return _RMF.EllipsoidConst___repr__(self)
    __swig_destroy__ = _RMF.delete_EllipsoidConst

# Register EllipsoidConst in _RMF:
_RMF.EllipsoidConst_swigregister(EllipsoidConst)

def EllipsoidConst_get_decorator_type_name():
    r"""EllipsoidConst_get_decorator_type_name() -> std::string"""
    return _RMF.EllipsoidConst_get_decorator_type_name()

class Ellipsoid(EllipsoidConst):
    r"""Proxy of C++ RMF::decorator::Ellipsoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_axis_lengths(self, v):
        r"""set_axis_lengths(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_axis_lengths(self, v)

    def set_frame_axis_lengths(self, v):
        r"""set_frame_axis_lengths(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_frame_axis_lengths(self, v)

    def set_static_axis_lengths(self, v):
        r"""set_static_axis_lengths(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_static_axis_lengths(self, v)

    def set_orientation(self, v):
        r"""set_orientation(Ellipsoid self, Vector4 v)"""
        return _RMF.Ellipsoid_set_orientation(self, v)

    def set_frame_orientation(self, v):
        r"""set_frame_orientation(Ellipsoid self, Vector4 v)"""
        return _RMF.Ellipsoid_set_frame_orientation(self, v)

    def set_static_orientation(self, v):
        r"""set_static_orientation(Ellipsoid self, Vector4 v)"""
        return _RMF.Ellipsoid_set_static_orientation(self, v)

    def set_coordinates(self, v):
        r"""set_coordinates(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_coordinates(self, v)

    def set_frame_coordinates(self, v):
        r"""set_frame_coordinates(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_frame_coordinates(self, v)

    def set_static_coordinates(self, v):
        r"""set_static_coordinates(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_static_coordinates(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Ellipsoid_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Ellipsoid

# Register Ellipsoid in _RMF:
_RMF.Ellipsoid_swigregister(Ellipsoid)

def Ellipsoid_get_decorator_type_name():
    r"""Ellipsoid_get_decorator_type_name() -> std::string"""
    return _RMF.Ellipsoid_get_decorator_type_name()

class EllipsoidFactory(Factory):
    r"""Proxy of C++ RMF::decorator::EllipsoidFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(EllipsoidFactory self, FileConstHandle fh) -> EllipsoidFactory
        __init__(EllipsoidFactory self, FileHandle fh) -> EllipsoidFactory
        """
        _RMF.EllipsoidFactory_swiginit(self, _RMF.new_EllipsoidFactory(*args))

    def get(self, *args):
        r"""
        get(EllipsoidFactory self, NodeConstHandle nh) -> EllipsoidConst
        get(EllipsoidFactory self, NodeHandle nh) -> Ellipsoid
        """
        return _RMF.EllipsoidFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(EllipsoidFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.EllipsoidFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(EllipsoidFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.EllipsoidFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(EllipsoidFactory self) -> std::string"""
        return _RMF.EllipsoidFactory___str__(self)

    def __repr__(self):
        r"""__repr__(EllipsoidFactory self) -> std::string"""
        return _RMF.EllipsoidFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_EllipsoidFactory

# Register EllipsoidFactory in _RMF:
_RMF.EllipsoidFactory_swigregister(EllipsoidFactory)

class EllipsoidConstFactory(EllipsoidFactory):
    r"""Proxy of C++ RMF::decorator::EllipsoidConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EllipsoidConstFactory self, FileConstHandle fh) -> EllipsoidConstFactory
        __init__(EllipsoidConstFactory self, FileHandle fh) -> EllipsoidConstFactory
        """
        _RMF.EllipsoidConstFactory_swiginit(self, _RMF.new_EllipsoidConstFactory(*args))
    __swig_destroy__ = _RMF.delete_EllipsoidConstFactory

# Register EllipsoidConstFactory in _RMF:
_RMF.EllipsoidConstFactory_swigregister(EllipsoidConstFactory)

class CylinderConst(Decorator):
    r"""Proxy of C++ RMF::decorator::CylinderConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_radius(self):
        r"""get_radius(CylinderConst self) -> RMF::Float"""
        return _RMF.CylinderConst_get_radius(self)

    def get_frame_radius(self):
        r"""get_frame_radius(CylinderConst self) -> RMF::Float"""
        return _RMF.CylinderConst_get_frame_radius(self)

    def get_static_radius(self):
        r"""get_static_radius(CylinderConst self) -> RMF::Float"""
        return _RMF.CylinderConst_get_static_radius(self)

    def get_coordinates_list(self):
        r"""get_coordinates_list(CylinderConst self) -> Vector3s"""
        return _RMF.CylinderConst_get_coordinates_list(self)

    def get_frame_coordinates_list(self):
        r"""get_frame_coordinates_list(CylinderConst self) -> Vector3s"""
        return _RMF.CylinderConst_get_frame_coordinates_list(self)

    def get_static_coordinates_list(self):
        r"""get_static_coordinates_list(CylinderConst self) -> Vector3s"""
        return _RMF.CylinderConst_get_static_coordinates_list(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.CylinderConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(CylinderConst self) -> std::string"""
        return _RMF.CylinderConst___str__(self)

    def __repr__(self):
        r"""__repr__(CylinderConst self) -> std::string"""
        return _RMF.CylinderConst___repr__(self)
    __swig_destroy__ = _RMF.delete_CylinderConst

# Register CylinderConst in _RMF:
_RMF.CylinderConst_swigregister(CylinderConst)

def CylinderConst_get_decorator_type_name():
    r"""CylinderConst_get_decorator_type_name() -> std::string"""
    return _RMF.CylinderConst_get_decorator_type_name()

class Cylinder(CylinderConst):
    r"""Proxy of C++ RMF::decorator::Cylinder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_radius(self, v):
        r"""set_radius(Cylinder self, RMF::Float v)"""
        return _RMF.Cylinder_set_radius(self, v)

    def set_frame_radius(self, v):
        r"""set_frame_radius(Cylinder self, RMF::Float v)"""
        return _RMF.Cylinder_set_frame_radius(self, v)

    def set_static_radius(self, v):
        r"""set_static_radius(Cylinder self, RMF::Float v)"""
        return _RMF.Cylinder_set_static_radius(self, v)

    def set_coordinates_list(self, v):
        r"""set_coordinates_list(Cylinder self, Vector3s v)"""
        return _RMF.Cylinder_set_coordinates_list(self, v)

    def set_frame_coordinates_list(self, v):
        r"""set_frame_coordinates_list(Cylinder self, Vector3s v)"""
        return _RMF.Cylinder_set_frame_coordinates_list(self, v)

    def set_static_coordinates_list(self, v):
        r"""set_static_coordinates_list(Cylinder self, Vector3s v)"""
        return _RMF.Cylinder_set_static_coordinates_list(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Cylinder_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Cylinder

# Register Cylinder in _RMF:
_RMF.Cylinder_swigregister(Cylinder)

def Cylinder_get_decorator_type_name():
    r"""Cylinder_get_decorator_type_name() -> std::string"""
    return _RMF.Cylinder_get_decorator_type_name()

class CylinderFactory(Factory):
    r"""Proxy of C++ RMF::decorator::CylinderFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(CylinderFactory self, FileConstHandle fh) -> CylinderFactory
        __init__(CylinderFactory self, FileHandle fh) -> CylinderFactory
        """
        _RMF.CylinderFactory_swiginit(self, _RMF.new_CylinderFactory(*args))

    def get(self, *args):
        r"""
        get(CylinderFactory self, NodeConstHandle nh) -> CylinderConst
        get(CylinderFactory self, NodeHandle nh) -> Cylinder
        """
        return _RMF.CylinderFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(CylinderFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CylinderFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(CylinderFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CylinderFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(CylinderFactory self) -> std::string"""
        return _RMF.CylinderFactory___str__(self)

    def __repr__(self):
        r"""__repr__(CylinderFactory self) -> std::string"""
        return _RMF.CylinderFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_CylinderFactory

# Register CylinderFactory in _RMF:
_RMF.CylinderFactory_swigregister(CylinderFactory)

class CylinderConstFactory(CylinderFactory):
    r"""Proxy of C++ RMF::decorator::CylinderConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CylinderConstFactory self, FileConstHandle fh) -> CylinderConstFactory
        __init__(CylinderConstFactory self, FileHandle fh) -> CylinderConstFactory
        """
        _RMF.CylinderConstFactory_swiginit(self, _RMF.new_CylinderConstFactory(*args))
    __swig_destroy__ = _RMF.delete_CylinderConstFactory

# Register CylinderConstFactory in _RMF:
_RMF.CylinderConstFactory_swigregister(CylinderConstFactory)

class SegmentConst(Decorator):
    r"""Proxy of C++ RMF::decorator::SegmentConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_coordinates_list(self):
        r"""get_coordinates_list(SegmentConst self) -> Vector3s"""
        return _RMF.SegmentConst_get_coordinates_list(self)

    def get_frame_coordinates_list(self):
        r"""get_frame_coordinates_list(SegmentConst self) -> Vector3s"""
        return _RMF.SegmentConst_get_frame_coordinates_list(self)

    def get_static_coordinates_list(self):
        r"""get_static_coordinates_list(SegmentConst self) -> Vector3s"""
        return _RMF.SegmentConst_get_static_coordinates_list(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.SegmentConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(SegmentConst self) -> std::string"""
        return _RMF.SegmentConst___str__(self)

    def __repr__(self):
        r"""__repr__(SegmentConst self) -> std::string"""
        return _RMF.SegmentConst___repr__(self)
    __swig_destroy__ = _RMF.delete_SegmentConst

# Register SegmentConst in _RMF:
_RMF.SegmentConst_swigregister(SegmentConst)

def SegmentConst_get_decorator_type_name():
    r"""SegmentConst_get_decorator_type_name() -> std::string"""
    return _RMF.SegmentConst_get_decorator_type_name()

class Segment(SegmentConst):
    r"""Proxy of C++ RMF::decorator::Segment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_coordinates_list(self, v):
        r"""set_coordinates_list(Segment self, Vector3s v)"""
        return _RMF.Segment_set_coordinates_list(self, v)

    def set_frame_coordinates_list(self, v):
        r"""set_frame_coordinates_list(Segment self, Vector3s v)"""
        return _RMF.Segment_set_frame_coordinates_list(self, v)

    def set_static_coordinates_list(self, v):
        r"""set_static_coordinates_list(Segment self, Vector3s v)"""
        return _RMF.Segment_set_static_coordinates_list(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Segment_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Segment

# Register Segment in _RMF:
_RMF.Segment_swigregister(Segment)

def Segment_get_decorator_type_name():
    r"""Segment_get_decorator_type_name() -> std::string"""
    return _RMF.Segment_get_decorator_type_name()

class SegmentFactory(Factory):
    r"""Proxy of C++ RMF::decorator::SegmentFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(SegmentFactory self, FileConstHandle fh) -> SegmentFactory
        __init__(SegmentFactory self, FileHandle fh) -> SegmentFactory
        """
        _RMF.SegmentFactory_swiginit(self, _RMF.new_SegmentFactory(*args))

    def get(self, *args):
        r"""
        get(SegmentFactory self, NodeConstHandle nh) -> SegmentConst
        get(SegmentFactory self, NodeHandle nh) -> Segment
        """
        return _RMF.SegmentFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(SegmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SegmentFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(SegmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SegmentFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(SegmentFactory self) -> std::string"""
        return _RMF.SegmentFactory___str__(self)

    def __repr__(self):
        r"""__repr__(SegmentFactory self) -> std::string"""
        return _RMF.SegmentFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_SegmentFactory

# Register SegmentFactory in _RMF:
_RMF.SegmentFactory_swigregister(SegmentFactory)

class SegmentConstFactory(SegmentFactory):
    r"""Proxy of C++ RMF::decorator::SegmentConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SegmentConstFactory self, FileConstHandle fh) -> SegmentConstFactory
        __init__(SegmentConstFactory self, FileHandle fh) -> SegmentConstFactory
        """
        _RMF.SegmentConstFactory_swiginit(self, _RMF.new_SegmentConstFactory(*args))
    __swig_destroy__ = _RMF.delete_SegmentConstFactory

# Register SegmentConstFactory in _RMF:
_RMF.SegmentConstFactory_swigregister(SegmentConstFactory)

class ExternalConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ExternalConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_path(self):
        r"""get_path(ExternalConst self) -> RMF::String"""
        return _RMF.ExternalConst_get_path(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ExternalConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ExternalConst self) -> std::string"""
        return _RMF.ExternalConst___str__(self)

    def __repr__(self):
        r"""__repr__(ExternalConst self) -> std::string"""
        return _RMF.ExternalConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ExternalConst

# Register ExternalConst in _RMF:
_RMF.ExternalConst_swigregister(ExternalConst)

def ExternalConst_get_decorator_type_name():
    r"""ExternalConst_get_decorator_type_name() -> std::string"""
    return _RMF.ExternalConst_get_decorator_type_name()

class External(ExternalConst):
    r"""Proxy of C++ RMF::decorator::External class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_path(self, path):
        r"""set_path(External self, RMF::String path)"""
        return _RMF.External_set_path(self, path)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.External_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_External

# Register External in _RMF:
_RMF.External_swigregister(External)

def External_get_decorator_type_name():
    r"""External_get_decorator_type_name() -> std::string"""
    return _RMF.External_get_decorator_type_name()

class ExternalFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ExternalFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ExternalFactory self, FileConstHandle fh) -> ExternalFactory
        __init__(ExternalFactory self, FileHandle fh) -> ExternalFactory
        """
        _RMF.ExternalFactory_swiginit(self, _RMF.new_ExternalFactory(*args))

    def get(self, *args):
        r"""
        get(ExternalFactory self, NodeConstHandle nh) -> ExternalConst
        get(ExternalFactory self, NodeHandle nh) -> External
        """
        return _RMF.ExternalFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ExternalFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ExternalFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ExternalFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ExternalFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ExternalFactory self) -> std::string"""
        return _RMF.ExternalFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ExternalFactory self) -> std::string"""
        return _RMF.ExternalFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ExternalFactory

# Register ExternalFactory in _RMF:
_RMF.ExternalFactory_swigregister(ExternalFactory)

class ExternalConstFactory(ExternalFactory):
    r"""Proxy of C++ RMF::decorator::ExternalConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ExternalConstFactory self, FileConstHandle fh) -> ExternalConstFactory
        __init__(ExternalConstFactory self, FileHandle fh) -> ExternalConstFactory
        """
        _RMF.ExternalConstFactory_swiginit(self, _RMF.new_ExternalConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ExternalConstFactory

# Register ExternalConstFactory in _RMF:
_RMF.ExternalConstFactory_swigregister(ExternalConstFactory)

class ScoreConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ScoreConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_score(self):
        r"""get_score(ScoreConst self) -> RMF::Float"""
        return _RMF.ScoreConst_get_score(self)

    def get_frame_score(self):
        r"""get_frame_score(ScoreConst self) -> RMF::Float"""
        return _RMF.ScoreConst_get_frame_score(self)

    def get_static_score(self):
        r"""get_static_score(ScoreConst self) -> RMF::Float"""
        return _RMF.ScoreConst_get_static_score(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ScoreConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ScoreConst self) -> std::string"""
        return _RMF.ScoreConst___str__(self)

    def __repr__(self):
        r"""__repr__(ScoreConst self) -> std::string"""
        return _RMF.ScoreConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ScoreConst

# Register ScoreConst in _RMF:
_RMF.ScoreConst_swigregister(ScoreConst)

def ScoreConst_get_decorator_type_name():
    r"""ScoreConst_get_decorator_type_name() -> std::string"""
    return _RMF.ScoreConst_get_decorator_type_name()

class Score(ScoreConst):
    r"""Proxy of C++ RMF::decorator::Score class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_score(self, v):
        r"""set_score(Score self, RMF::Float v)"""
        return _RMF.Score_set_score(self, v)

    def set_frame_score(self, v):
        r"""set_frame_score(Score self, RMF::Float v)"""
        return _RMF.Score_set_frame_score(self, v)

    def set_static_score(self, v):
        r"""set_static_score(Score self, RMF::Float v)"""
        return _RMF.Score_set_static_score(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Score_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Score

# Register Score in _RMF:
_RMF.Score_swigregister(Score)

def Score_get_decorator_type_name():
    r"""Score_get_decorator_type_name() -> std::string"""
    return _RMF.Score_get_decorator_type_name()

class ScoreFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ScoreFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ScoreFactory self, FileConstHandle fh) -> ScoreFactory
        __init__(ScoreFactory self, FileHandle fh) -> ScoreFactory
        """
        _RMF.ScoreFactory_swiginit(self, _RMF.new_ScoreFactory(*args))

    def get(self, *args):
        r"""
        get(ScoreFactory self, NodeConstHandle nh) -> ScoreConst
        get(ScoreFactory self, NodeHandle nh) -> Score
        """
        return _RMF.ScoreFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ScoreFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScoreFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ScoreFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScoreFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ScoreFactory self) -> std::string"""
        return _RMF.ScoreFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ScoreFactory self) -> std::string"""
        return _RMF.ScoreFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ScoreFactory

# Register ScoreFactory in _RMF:
_RMF.ScoreFactory_swigregister(ScoreFactory)

class ScoreConstFactory(ScoreFactory):
    r"""Proxy of C++ RMF::decorator::ScoreConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ScoreConstFactory self, FileConstHandle fh) -> ScoreConstFactory
        __init__(ScoreConstFactory self, FileHandle fh) -> ScoreConstFactory
        """
        _RMF.ScoreConstFactory_swiginit(self, _RMF.new_ScoreConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ScoreConstFactory

# Register ScoreConstFactory in _RMF:
_RMF.ScoreConstFactory_swigregister(ScoreConstFactory)

class AliasConst(Decorator):
    r"""Proxy of C++ RMF::decorator::AliasConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_aliased(self):
        r"""get_aliased(AliasConst self) -> NodeConstHandle"""
        return _RMF.AliasConst_get_aliased(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.AliasConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(AliasConst self) -> std::string"""
        return _RMF.AliasConst___str__(self)

    def __repr__(self):
        r"""__repr__(AliasConst self) -> std::string"""
        return _RMF.AliasConst___repr__(self)
    __swig_destroy__ = _RMF.delete_AliasConst

# Register AliasConst in _RMF:
_RMF.AliasConst_swigregister(AliasConst)

def AliasConst_get_decorator_type_name():
    r"""AliasConst_get_decorator_type_name() -> std::string"""
    return _RMF.AliasConst_get_decorator_type_name()

class Alias(AliasConst):
    r"""Proxy of C++ RMF::decorator::Alias class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_aliased(self, v):
        r"""set_aliased(Alias self, NodeConstHandle v)"""
        return _RMF.Alias_set_aliased(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Alias_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Alias

# Register Alias in _RMF:
_RMF.Alias_swigregister(Alias)

def Alias_get_decorator_type_name():
    r"""Alias_get_decorator_type_name() -> std::string"""
    return _RMF.Alias_get_decorator_type_name()

class AliasFactory(Factory):
    r"""Proxy of C++ RMF::decorator::AliasFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(AliasFactory self, FileConstHandle fh) -> AliasFactory
        __init__(AliasFactory self, FileHandle fh) -> AliasFactory
        """
        _RMF.AliasFactory_swiginit(self, _RMF.new_AliasFactory(*args))

    def get(self, *args):
        r"""
        get(AliasFactory self, NodeConstHandle nh) -> AliasConst
        get(AliasFactory self, NodeHandle nh) -> Alias
        """
        return _RMF.AliasFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(AliasFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AliasFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(AliasFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AliasFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(AliasFactory self) -> std::string"""
        return _RMF.AliasFactory___str__(self)

    def __repr__(self):
        r"""__repr__(AliasFactory self) -> std::string"""
        return _RMF.AliasFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_AliasFactory

# Register AliasFactory in _RMF:
_RMF.AliasFactory_swigregister(AliasFactory)

class AliasConstFactory(AliasFactory):
    r"""Proxy of C++ RMF::decorator::AliasConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AliasConstFactory self, FileConstHandle fh) -> AliasConstFactory
        __init__(AliasConstFactory self, FileHandle fh) -> AliasConstFactory
        """
        _RMF.AliasConstFactory_swiginit(self, _RMF.new_AliasConstFactory(*args))
    __swig_destroy__ = _RMF.delete_AliasConstFactory

# Register AliasConstFactory in _RMF:
_RMF.AliasConstFactory_swigregister(AliasConstFactory)

class JournalArticleConst(Decorator):
    r"""Proxy of C++ RMF::decorator::JournalArticleConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_title(self):
        r"""get_title(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_title(self)

    def get_frame_title(self):
        r"""get_frame_title(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_frame_title(self)

    def get_static_title(self):
        r"""get_static_title(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_static_title(self)

    def get_journal(self):
        r"""get_journal(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_journal(self)

    def get_frame_journal(self):
        r"""get_frame_journal(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_frame_journal(self)

    def get_static_journal(self):
        r"""get_static_journal(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_static_journal(self)

    def get_pubmed_id(self):
        r"""get_pubmed_id(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_pubmed_id(self)

    def get_frame_pubmed_id(self):
        r"""get_frame_pubmed_id(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_frame_pubmed_id(self)

    def get_static_pubmed_id(self):
        r"""get_static_pubmed_id(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_static_pubmed_id(self)

    def get_year(self):
        r"""get_year(JournalArticleConst self) -> RMF::Int"""
        return _RMF.JournalArticleConst_get_year(self)

    def get_frame_year(self):
        r"""get_frame_year(JournalArticleConst self) -> RMF::Int"""
        return _RMF.JournalArticleConst_get_frame_year(self)

    def get_static_year(self):
        r"""get_static_year(JournalArticleConst self) -> RMF::Int"""
        return _RMF.JournalArticleConst_get_static_year(self)

    def get_authors(self):
        r"""get_authors(JournalArticleConst self) -> Strings"""
        return _RMF.JournalArticleConst_get_authors(self)

    def get_frame_authors(self):
        r"""get_frame_authors(JournalArticleConst self) -> Strings"""
        return _RMF.JournalArticleConst_get_frame_authors(self)

    def get_static_authors(self):
        r"""get_static_authors(JournalArticleConst self) -> Strings"""
        return _RMF.JournalArticleConst_get_static_authors(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.JournalArticleConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(JournalArticleConst self) -> std::string"""
        return _RMF.JournalArticleConst___str__(self)

    def __repr__(self):
        r"""__repr__(JournalArticleConst self) -> std::string"""
        return _RMF.JournalArticleConst___repr__(self)
    __swig_destroy__ = _RMF.delete_JournalArticleConst

# Register JournalArticleConst in _RMF:
_RMF.JournalArticleConst_swigregister(JournalArticleConst)

def JournalArticleConst_get_decorator_type_name():
    r"""JournalArticleConst_get_decorator_type_name() -> std::string"""
    return _RMF.JournalArticleConst_get_decorator_type_name()

class JournalArticle(JournalArticleConst):
    r"""Proxy of C++ RMF::decorator::JournalArticle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_title(self, v):
        r"""set_title(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_title(self, v)

    def set_frame_title(self, v):
        r"""set_frame_title(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_frame_title(self, v)

    def set_static_title(self, v):
        r"""set_static_title(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_static_title(self, v)

    def set_journal(self, v):
        r"""set_journal(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_journal(self, v)

    def set_frame_journal(self, v):
        r"""set_frame_journal(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_frame_journal(self, v)

    def set_static_journal(self, v):
        r"""set_static_journal(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_static_journal(self, v)

    def set_pubmed_id(self, v):
        r"""set_pubmed_id(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_pubmed_id(self, v)

    def set_frame_pubmed_id(self, v):
        r"""set_frame_pubmed_id(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_frame_pubmed_id(self, v)

    def set_static_pubmed_id(self, v):
        r"""set_static_pubmed_id(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_static_pubmed_id(self, v)

    def set_year(self, v):
        r"""set_year(JournalArticle self, RMF::Int v)"""
        return _RMF.JournalArticle_set_year(self, v)

    def set_frame_year(self, v):
        r"""set_frame_year(JournalArticle self, RMF::Int v)"""
        return _RMF.JournalArticle_set_frame_year(self, v)

    def set_static_year(self, v):
        r"""set_static_year(JournalArticle self, RMF::Int v)"""
        return _RMF.JournalArticle_set_static_year(self, v)

    def set_authors(self, v):
        r"""set_authors(JournalArticle self, Strings v)"""
        return _RMF.JournalArticle_set_authors(self, v)

    def set_frame_authors(self, v):
        r"""set_frame_authors(JournalArticle self, Strings v)"""
        return _RMF.JournalArticle_set_frame_authors(self, v)

    def set_static_authors(self, v):
        r"""set_static_authors(JournalArticle self, Strings v)"""
        return _RMF.JournalArticle_set_static_authors(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.JournalArticle_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_JournalArticle

# Register JournalArticle in _RMF:
_RMF.JournalArticle_swigregister(JournalArticle)

def JournalArticle_get_decorator_type_name():
    r"""JournalArticle_get_decorator_type_name() -> std::string"""
    return _RMF.JournalArticle_get_decorator_type_name()

class JournalArticleFactory(Factory):
    r"""Proxy of C++ RMF::decorator::JournalArticleFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(JournalArticleFactory self, FileConstHandle fh) -> JournalArticleFactory
        __init__(JournalArticleFactory self, FileHandle fh) -> JournalArticleFactory
        """
        _RMF.JournalArticleFactory_swiginit(self, _RMF.new_JournalArticleFactory(*args))

    def get(self, *args):
        r"""
        get(JournalArticleFactory self, NodeConstHandle nh) -> JournalArticleConst
        get(JournalArticleFactory self, NodeHandle nh) -> JournalArticle
        """
        return _RMF.JournalArticleFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(JournalArticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.JournalArticleFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(JournalArticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.JournalArticleFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(JournalArticleFactory self) -> std::string"""
        return _RMF.JournalArticleFactory___str__(self)

    def __repr__(self):
        r"""__repr__(JournalArticleFactory self) -> std::string"""
        return _RMF.JournalArticleFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_JournalArticleFactory

# Register JournalArticleFactory in _RMF:
_RMF.JournalArticleFactory_swigregister(JournalArticleFactory)

class JournalArticleConstFactory(JournalArticleFactory):
    r"""Proxy of C++ RMF::decorator::JournalArticleConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(JournalArticleConstFactory self, FileConstHandle fh) -> JournalArticleConstFactory
        __init__(JournalArticleConstFactory self, FileHandle fh) -> JournalArticleConstFactory
        """
        _RMF.JournalArticleConstFactory_swiginit(self, _RMF.new_JournalArticleConstFactory(*args))
    __swig_destroy__ = _RMF.delete_JournalArticleConstFactory

# Register JournalArticleConstFactory in _RMF:
_RMF.JournalArticleConstFactory_swigregister(JournalArticleConstFactory)

class AlternativesConst(Decorator):
    r"""Proxy of C++ RMF::decorator::AlternativesConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_alternative(self, type, resolution):
        r"""get_alternative(AlternativesConst self, RepresentationType type, double resolution) -> NodeConstHandle"""
        return _RMF.AlternativesConst_get_alternative(self, type, resolution)

    def get_representation_type(self, *args):
        r"""
        get_representation_type(AlternativesConst self, NodeID id) -> RepresentationType
        get_representation_type(AlternativesConst self, NodeConstHandle id) -> RepresentationType
        """
        return _RMF.AlternativesConst_get_representation_type(self, *args)

    def get_alternatives(self, type):
        r"""get_alternatives(AlternativesConst self, RepresentationType type) -> NodeConstHandles"""
        return _RMF.AlternativesConst_get_alternatives(self, type)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.AlternativesConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(AlternativesConst self) -> std::string"""
        return _RMF.AlternativesConst___str__(self)

    def __repr__(self):
        r"""__repr__(AlternativesConst self) -> std::string"""
        return _RMF.AlternativesConst___repr__(self)
    __swig_destroy__ = _RMF.delete_AlternativesConst

# Register AlternativesConst in _RMF:
_RMF.AlternativesConst_swigregister(AlternativesConst)

def AlternativesConst_get_decorator_type_name():
    r"""AlternativesConst_get_decorator_type_name() -> std::string"""
    return _RMF.AlternativesConst_get_decorator_type_name()

class Alternatives(AlternativesConst):
    r"""Proxy of C++ RMF::decorator::Alternatives class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def add_alternative(self, root, type):
        r"""add_alternative(Alternatives self, NodeHandle root, RepresentationType type)"""
        return _RMF.Alternatives_add_alternative(self, root, type)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Alternatives_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Alternatives

# Register Alternatives in _RMF:
_RMF.Alternatives_swigregister(Alternatives)

def Alternatives_get_decorator_type_name():
    r"""Alternatives_get_decorator_type_name() -> std::string"""
    return _RMF.Alternatives_get_decorator_type_name()

class AlternativesFactory(Factory):
    r"""Proxy of C++ RMF::decorator::AlternativesFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(AlternativesFactory self, FileConstHandle fh) -> AlternativesFactory
        __init__(AlternativesFactory self, FileHandle fh) -> AlternativesFactory
        """
        _RMF.AlternativesFactory_swiginit(self, _RMF.new_AlternativesFactory(*args))

    def get(self, *args):
        r"""
        get(AlternativesFactory self, NodeHandle nh) -> Alternatives
        get(AlternativesFactory self, NodeConstHandle nh) -> AlternativesConst
        """
        return _RMF.AlternativesFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(AlternativesFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AlternativesFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(AlternativesFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AlternativesFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(AlternativesFactory self) -> std::string"""
        return _RMF.AlternativesFactory___str__(self)

    def __repr__(self):
        r"""__repr__(AlternativesFactory self) -> std::string"""
        return _RMF.AlternativesFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_AlternativesFactory

# Register AlternativesFactory in _RMF:
_RMF.AlternativesFactory_swigregister(AlternativesFactory)

class AlternativesConstFactory(AlternativesFactory):
    r"""Proxy of C++ RMF::decorator::AlternativesConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AlternativesConstFactory self, FileConstHandle fh) -> AlternativesConstFactory
        __init__(AlternativesConstFactory self, FileHandle fh) -> AlternativesConstFactory
        """
        _RMF.AlternativesConstFactory_swiginit(self, _RMF.new_AlternativesConstFactory(*args))
    __swig_destroy__ = _RMF.delete_AlternativesConstFactory

# Register AlternativesConstFactory in _RMF:
_RMF.AlternativesConstFactory_swigregister(AlternativesConstFactory)


def get_resolution(root):
    r"""get_resolution(NodeConstHandle root) -> double"""
    return _RMF.get_resolution(root)

def get_resolutions(*args):
    r"""get_resolutions(NodeConstHandle root, RepresentationType type=PARTICLE, double accuracy=0) -> Floats"""
    return _RMF.get_resolutions(*args)
class RepresentationConst(Decorator):
    r"""Proxy of C++ RMF::decorator::RepresentationConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_representation(self):
        r"""get_representation(RepresentationConst self) -> NodeConstHandles"""
        return _RMF.RepresentationConst_get_representation(self)

    def get_frame_representation(self):
        r"""get_frame_representation(RepresentationConst self) -> NodeConstHandles"""
        return _RMF.RepresentationConst_get_frame_representation(self)

    def get_static_representation(self):
        r"""get_static_representation(RepresentationConst self) -> NodeConstHandles"""
        return _RMF.RepresentationConst_get_static_representation(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.RepresentationConst_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_RepresentationConst

# Register RepresentationConst in _RMF:
_RMF.RepresentationConst_swigregister(RepresentationConst)

def RepresentationConst_get_decorator_type_name():
    r"""RepresentationConst_get_decorator_type_name() -> std::string"""
    return _RMF.RepresentationConst_get_decorator_type_name()

class Representation(RepresentationConst):
    r"""Proxy of C++ RMF::decorator::Representation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_representation(self, v):
        r"""set_representation(Representation self, NodeIDs v)"""
        return _RMF.Representation_set_representation(self, v)

    def set_frame_representation(self, v):
        r"""set_frame_representation(Representation self, NodeIDs v)"""
        return _RMF.Representation_set_frame_representation(self, v)

    def set_static_representation(self, v):
        r"""set_static_representation(Representation self, NodeIDs v)"""
        return _RMF.Representation_set_static_representation(self, v)

    def get_representation(self):
        r"""get_representation(Representation self) -> NodeHandles"""
        return _RMF.Representation_get_representation(self)

    def get_frame_representation(self):
        r"""get_frame_representation(Representation self) -> NodeHandles"""
        return _RMF.Representation_get_frame_representation(self)

    def get_static_representation(self):
        r"""get_static_representation(Representation self) -> NodeHandles"""
        return _RMF.Representation_get_static_representation(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Representation_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Representation

# Register Representation in _RMF:
_RMF.Representation_swigregister(Representation)

def Representation_get_decorator_type_name():
    r"""Representation_get_decorator_type_name() -> std::string"""
    return _RMF.Representation_get_decorator_type_name()

class RepresentationFactory(Factory):
    r"""Proxy of C++ RMF::decorator::RepresentationFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RepresentationFactory self, FileConstHandle fh) -> RepresentationFactory
        __init__(RepresentationFactory self, FileHandle fh) -> RepresentationFactory
        """
        _RMF.RepresentationFactory_swiginit(self, _RMF.new_RepresentationFactory(*args))

    def get(self, *args):
        r"""
        get(RepresentationFactory self, NodeConstHandle nh) -> RepresentationConst
        get(RepresentationFactory self, NodeHandle nh) -> Representation
        """
        return _RMF.RepresentationFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(RepresentationFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.RepresentationFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(RepresentationFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.RepresentationFactory_get_is_static(self, nh)
    __swig_destroy__ = _RMF.delete_RepresentationFactory

# Register RepresentationFactory in _RMF:
_RMF.RepresentationFactory_swigregister(RepresentationFactory)

class RepresentationConstFactory(RepresentationFactory):
    r"""Proxy of C++ RMF::decorator::RepresentationConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RepresentationConstFactory self, FileConstHandle fh) -> RepresentationConstFactory
        __init__(RepresentationConstFactory self, FileHandle fh) -> RepresentationConstFactory
        """
        _RMF.RepresentationConstFactory_swiginit(self, _RMF.new_RepresentationConstFactory(*args))
    __swig_destroy__ = _RMF.delete_RepresentationConstFactory

# Register RepresentationConstFactory in _RMF:
_RMF.RepresentationConstFactory_swigregister(RepresentationConstFactory)

class BondConst(Decorator):
    r"""Proxy of C++ RMF::decorator::BondConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_bonded_0(self):
        r"""get_bonded_0(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_bonded_0(self)

    def get_frame_bonded_0(self):
        r"""get_frame_bonded_0(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_frame_bonded_0(self)

    def get_static_bonded_0(self):
        r"""get_static_bonded_0(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_static_bonded_0(self)

    def get_bonded_1(self):
        r"""get_bonded_1(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_bonded_1(self)

    def get_frame_bonded_1(self):
        r"""get_frame_bonded_1(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_frame_bonded_1(self)

    def get_static_bonded_1(self):
        r"""get_static_bonded_1(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_static_bonded_1(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.BondConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(BondConst self) -> std::string"""
        return _RMF.BondConst___str__(self)

    def __repr__(self):
        r"""__repr__(BondConst self) -> std::string"""
        return _RMF.BondConst___repr__(self)
    __swig_destroy__ = _RMF.delete_BondConst

# Register BondConst in _RMF:
_RMF.BondConst_swigregister(BondConst)

def BondConst_get_decorator_type_name():
    r"""BondConst_get_decorator_type_name() -> std::string"""
    return _RMF.BondConst_get_decorator_type_name()

class Bond(BondConst):
    r"""Proxy of C++ RMF::decorator::Bond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_bonded_0(self):
        r"""get_bonded_0(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_bonded_0(self)

    def get_frame_bonded_0(self):
        r"""get_frame_bonded_0(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_frame_bonded_0(self)

    def get_static_bonded_0(self):
        r"""get_static_bonded_0(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_static_bonded_0(self)

    def get_bonded_1(self):
        r"""get_bonded_1(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_bonded_1(self)

    def get_frame_bonded_1(self):
        r"""get_frame_bonded_1(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_frame_bonded_1(self)

    def get_static_bonded_1(self):
        r"""get_static_bonded_1(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_static_bonded_1(self)

    def set_bonded_0(self, *args):
        r"""
        set_bonded_0(Bond self, RMF::Int v)
        set_bonded_0(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_bonded_0(self, *args)

    def set_frame_bonded_0(self, *args):
        r"""
        set_frame_bonded_0(Bond self, RMF::Int v)
        set_frame_bonded_0(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_frame_bonded_0(self, *args)

    def set_static_bonded_0(self, *args):
        r"""
        set_static_bonded_0(Bond self, RMF::Int v)
        set_static_bonded_0(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_static_bonded_0(self, *args)

    def set_bonded_1(self, *args):
        r"""
        set_bonded_1(Bond self, RMF::Int v)
        set_bonded_1(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_bonded_1(self, *args)

    def set_frame_bonded_1(self, *args):
        r"""
        set_frame_bonded_1(Bond self, RMF::Int v)
        set_frame_bonded_1(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_frame_bonded_1(self, *args)

    def set_static_bonded_1(self, *args):
        r"""
        set_static_bonded_1(Bond self, RMF::Int v)
        set_static_bonded_1(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_static_bonded_1(self, *args)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Bond_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Bond

# Register Bond in _RMF:
_RMF.Bond_swigregister(Bond)

def Bond_get_decorator_type_name():
    r"""Bond_get_decorator_type_name() -> std::string"""
    return _RMF.Bond_get_decorator_type_name()

class BondFactory(Factory):
    r"""Proxy of C++ RMF::decorator::BondFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(BondFactory self, FileConstHandle fh) -> BondFactory
        __init__(BondFactory self, FileHandle fh) -> BondFactory
        """
        _RMF.BondFactory_swiginit(self, _RMF.new_BondFactory(*args))

    def get(self, *args):
        r"""
        get(BondFactory self, NodeConstHandle nh) -> BondConst
        get(BondFactory self, NodeHandle nh) -> Bond
        """
        return _RMF.BondFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(BondFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BondFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(BondFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BondFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(BondFactory self) -> std::string"""
        return _RMF.BondFactory___str__(self)

    def __repr__(self):
        r"""__repr__(BondFactory self) -> std::string"""
        return _RMF.BondFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_BondFactory

# Register BondFactory in _RMF:
_RMF.BondFactory_swigregister(BondFactory)

class BondConstFactory(BondFactory):
    r"""Proxy of C++ RMF::decorator::BondConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BondConstFactory self, FileConstHandle fh) -> BondConstFactory
        __init__(BondConstFactory self, FileHandle fh) -> BondConstFactory
        """
        _RMF.BondConstFactory_swiginit(self, _RMF.new_BondConstFactory(*args))
    __swig_destroy__ = _RMF.delete_BondConstFactory

# Register BondConstFactory in _RMF:
_RMF.BondConstFactory_swigregister(BondConstFactory)

class Molecule(Label):
    r"""Proxy of C++ RMF::decorator::Molecule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Molecule self, FileConstHandle fh) -> Molecule
        __init__(Molecule self, FileHandle fh) -> Molecule
        """
        _RMF.Molecule_swiginit(self, _RMF.new_Molecule(*args))
    __swig_destroy__ = _RMF.delete_Molecule

# Register Molecule in _RMF:
_RMF.Molecule_swigregister(Molecule)

class Assembly(Label):
    r"""Proxy of C++ RMF::decorator::Assembly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Assembly self, FileConstHandle fh) -> Assembly
        __init__(Assembly self, FileHandle fh) -> Assembly
        """
        _RMF.Assembly_swiginit(self, _RMF.new_Assembly(*args))
    __swig_destroy__ = _RMF.delete_Assembly

# Register Assembly in _RMF:
_RMF.Assembly_swigregister(Assembly)

class ReferenceConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ReferenceConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_reference(self):
        r"""get_reference(ReferenceConst self) -> NodeConstHandle"""
        return _RMF.ReferenceConst_get_reference(self)

    def get_frame_reference(self):
        r"""get_frame_reference(ReferenceConst self) -> NodeConstHandle"""
        return _RMF.ReferenceConst_get_frame_reference(self)

    def get_static_reference(self):
        r"""get_static_reference(ReferenceConst self) -> NodeConstHandle"""
        return _RMF.ReferenceConst_get_static_reference(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ReferenceConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ReferenceConst self) -> std::string"""
        return _RMF.ReferenceConst___str__(self)

    def __repr__(self):
        r"""__repr__(ReferenceConst self) -> std::string"""
        return _RMF.ReferenceConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ReferenceConst

# Register ReferenceConst in _RMF:
_RMF.ReferenceConst_swigregister(ReferenceConst)

def ReferenceConst_get_decorator_type_name():
    r"""ReferenceConst_get_decorator_type_name() -> std::string"""
    return _RMF.ReferenceConst_get_decorator_type_name()

class Reference(ReferenceConst):
    r"""Proxy of C++ RMF::decorator::Reference class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_reference(self):
        r"""get_reference(Reference self) -> NodeHandle"""
        return _RMF.Reference_get_reference(self)

    def get_frame_reference(self):
        r"""get_frame_reference(Reference self) -> NodeHandle"""
        return _RMF.Reference_get_frame_reference(self)

    def get_static_reference(self):
        r"""get_static_reference(Reference self) -> NodeHandle"""
        return _RMF.Reference_get_static_reference(self)

    def set_reference(self, v):
        r"""set_reference(Reference self, NodeConstHandle v)"""
        return _RMF.Reference_set_reference(self, v)

    def set_frame_reference(self, v):
        r"""set_frame_reference(Reference self, NodeConstHandle v)"""
        return _RMF.Reference_set_frame_reference(self, v)

    def set_static_reference(self, v):
        r"""set_static_reference(Reference self, NodeConstHandle v)"""
        return _RMF.Reference_set_static_reference(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Reference_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Reference

# Register Reference in _RMF:
_RMF.Reference_swigregister(Reference)

def Reference_get_decorator_type_name():
    r"""Reference_get_decorator_type_name() -> std::string"""
    return _RMF.Reference_get_decorator_type_name()

class ReferenceFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ReferenceFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ReferenceFactory self, FileConstHandle fh) -> ReferenceFactory
        __init__(ReferenceFactory self, FileHandle fh) -> ReferenceFactory
        """
        _RMF.ReferenceFactory_swiginit(self, _RMF.new_ReferenceFactory(*args))

    def get(self, *args):
        r"""
        get(ReferenceFactory self, NodeConstHandle nh) -> ReferenceConst
        get(ReferenceFactory self, NodeHandle nh) -> Reference
        """
        return _RMF.ReferenceFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ReferenceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ReferenceFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ReferenceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ReferenceFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ReferenceFactory self) -> std::string"""
        return _RMF.ReferenceFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ReferenceFactory self) -> std::string"""
        return _RMF.ReferenceFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ReferenceFactory

# Register ReferenceFactory in _RMF:
_RMF.ReferenceFactory_swigregister(ReferenceFactory)

class StructureProvenanceConst(Decorator):
    r"""Proxy of C++ RMF::decorator::StructureProvenanceConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_filename(self):
        r"""get_filename(StructureProvenanceConst self) -> RMF::String"""
        return _RMF.StructureProvenanceConst_get_filename(self)

    def get_chain(self):
        r"""get_chain(StructureProvenanceConst self) -> RMF::String"""
        return _RMF.StructureProvenanceConst_get_chain(self)

    def get_frame_chain(self):
        r"""get_frame_chain(StructureProvenanceConst self) -> RMF::String"""
        return _RMF.StructureProvenanceConst_get_frame_chain(self)

    def get_static_chain(self):
        r"""get_static_chain(StructureProvenanceConst self) -> RMF::String"""
        return _RMF.StructureProvenanceConst_get_static_chain(self)

    def get_residue_offset(self):
        r"""get_residue_offset(StructureProvenanceConst self) -> RMF::Int"""
        return _RMF.StructureProvenanceConst_get_residue_offset(self)

    def get_frame_residue_offset(self):
        r"""get_frame_residue_offset(StructureProvenanceConst self) -> RMF::Int"""
        return _RMF.StructureProvenanceConst_get_frame_residue_offset(self)

    def get_static_residue_offset(self):
        r"""get_static_residue_offset(StructureProvenanceConst self) -> RMF::Int"""
        return _RMF.StructureProvenanceConst_get_static_residue_offset(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.StructureProvenanceConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(StructureProvenanceConst self) -> std::string"""
        return _RMF.StructureProvenanceConst___str__(self)

    def __repr__(self):
        r"""__repr__(StructureProvenanceConst self) -> std::string"""
        return _RMF.StructureProvenanceConst___repr__(self)
    __swig_destroy__ = _RMF.delete_StructureProvenanceConst

# Register StructureProvenanceConst in _RMF:
_RMF.StructureProvenanceConst_swigregister(StructureProvenanceConst)

def StructureProvenanceConst_get_decorator_type_name():
    r"""StructureProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.StructureProvenanceConst_get_decorator_type_name()

class StructureProvenance(StructureProvenanceConst):
    r"""Proxy of C++ RMF::decorator::StructureProvenance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_filename(self, path):
        r"""set_filename(StructureProvenance self, RMF::String path)"""
        return _RMF.StructureProvenance_set_filename(self, path)

    def set_chain(self, v):
        r"""set_chain(StructureProvenance self, RMF::String v)"""
        return _RMF.StructureProvenance_set_chain(self, v)

    def set_frame_chain(self, v):
        r"""set_frame_chain(StructureProvenance self, RMF::String v)"""
        return _RMF.StructureProvenance_set_frame_chain(self, v)

    def set_static_chain(self, v):
        r"""set_static_chain(StructureProvenance self, RMF::String v)"""
        return _RMF.StructureProvenance_set_static_chain(self, v)

    def set_residue_offset(self, v):
        r"""set_residue_offset(StructureProvenance self, RMF::Int v)"""
        return _RMF.StructureProvenance_set_residue_offset(self, v)

    def set_frame_residue_offset(self, v):
        r"""set_frame_residue_offset(StructureProvenance self, RMF::Int v)"""
        return _RMF.StructureProvenance_set_frame_residue_offset(self, v)

    def set_static_residue_offset(self, v):
        r"""set_static_residue_offset(StructureProvenance self, RMF::Int v)"""
        return _RMF.StructureProvenance_set_static_residue_offset(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.StructureProvenance_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_StructureProvenance

# Register StructureProvenance in _RMF:
_RMF.StructureProvenance_swigregister(StructureProvenance)

def StructureProvenance_get_decorator_type_name():
    r"""StructureProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.StructureProvenance_get_decorator_type_name()

class StructureProvenanceFactory(Factory):
    r"""Proxy of C++ RMF::decorator::StructureProvenanceFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(StructureProvenanceFactory self, FileConstHandle fh) -> StructureProvenanceFactory
        __init__(StructureProvenanceFactory self, FileHandle fh) -> StructureProvenanceFactory
        """
        _RMF.StructureProvenanceFactory_swiginit(self, _RMF.new_StructureProvenanceFactory(*args))

    def get(self, *args):
        r"""
        get(StructureProvenanceFactory self, NodeConstHandle nh) -> StructureProvenanceConst
        get(StructureProvenanceFactory self, NodeHandle nh) -> StructureProvenance
        """
        return _RMF.StructureProvenanceFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(StructureProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.StructureProvenanceFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(StructureProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.StructureProvenanceFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(StructureProvenanceFactory self) -> std::string"""
        return _RMF.StructureProvenanceFactory___str__(self)

    def __repr__(self):
        r"""__repr__(StructureProvenanceFactory self) -> std::string"""
        return _RMF.StructureProvenanceFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_StructureProvenanceFactory

# Register StructureProvenanceFactory in _RMF:
_RMF.StructureProvenanceFactory_swigregister(StructureProvenanceFactory)

class StructureProvenanceConstFactory(StructureProvenanceFactory):
    r"""Proxy of C++ RMF::decorator::StructureProvenanceConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(StructureProvenanceConstFactory self, FileConstHandle fh) -> StructureProvenanceConstFactory
        __init__(StructureProvenanceConstFactory self, FileHandle fh) -> StructureProvenanceConstFactory
        """
        _RMF.StructureProvenanceConstFactory_swiginit(self, _RMF.new_StructureProvenanceConstFactory(*args))
    __swig_destroy__ = _RMF.delete_StructureProvenanceConstFactory

# Register StructureProvenanceConstFactory in _RMF:
_RMF.StructureProvenanceConstFactory_swigregister(StructureProvenanceConstFactory)

class SampleProvenanceConst(Decorator):
    r"""Proxy of C++ RMF::decorator::SampleProvenanceConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_method(self):
        r"""get_method(SampleProvenanceConst self) -> RMF::String"""
        return _RMF.SampleProvenanceConst_get_method(self)

    def get_frame_method(self):
        r"""get_frame_method(SampleProvenanceConst self) -> RMF::String"""
        return _RMF.SampleProvenanceConst_get_frame_method(self)

    def get_static_method(self):
        r"""get_static_method(SampleProvenanceConst self) -> RMF::String"""
        return _RMF.SampleProvenanceConst_get_static_method(self)

    def get_frames(self):
        r"""get_frames(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_frames(self)

    def get_frame_frames(self):
        r"""get_frame_frames(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_frame_frames(self)

    def get_static_frames(self):
        r"""get_static_frames(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_static_frames(self)

    def get_iterations(self):
        r"""get_iterations(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_iterations(self)

    def get_frame_iterations(self):
        r"""get_frame_iterations(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_frame_iterations(self)

    def get_static_iterations(self):
        r"""get_static_iterations(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_static_iterations(self)

    def get_replicas(self):
        r"""get_replicas(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_replicas(self)

    def get_frame_replicas(self):
        r"""get_frame_replicas(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_frame_replicas(self)

    def get_static_replicas(self):
        r"""get_static_replicas(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_static_replicas(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.SampleProvenanceConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(SampleProvenanceConst self) -> std::string"""
        return _RMF.SampleProvenanceConst___str__(self)

    def __repr__(self):
        r"""__repr__(SampleProvenanceConst self) -> std::string"""
        return _RMF.SampleProvenanceConst___repr__(self)
    __swig_destroy__ = _RMF.delete_SampleProvenanceConst

# Register SampleProvenanceConst in _RMF:
_RMF.SampleProvenanceConst_swigregister(SampleProvenanceConst)

def SampleProvenanceConst_get_decorator_type_name():
    r"""SampleProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.SampleProvenanceConst_get_decorator_type_name()

class SampleProvenance(SampleProvenanceConst):
    r"""Proxy of C++ RMF::decorator::SampleProvenance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_method(self, v):
        r"""set_method(SampleProvenance self, RMF::String v)"""
        return _RMF.SampleProvenance_set_method(self, v)

    def set_frame_method(self, v):
        r"""set_frame_method(SampleProvenance self, RMF::String v)"""
        return _RMF.SampleProvenance_set_frame_method(self, v)

    def set_static_method(self, v):
        r"""set_static_method(SampleProvenance self, RMF::String v)"""
        return _RMF.SampleProvenance_set_static_method(self, v)

    def set_frames(self, v):
        r"""set_frames(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_frames(self, v)

    def set_frame_frames(self, v):
        r"""set_frame_frames(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_frame_frames(self, v)

    def set_static_frames(self, v):
        r"""set_static_frames(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_static_frames(self, v)

    def set_iterations(self, v):
        r"""set_iterations(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_iterations(self, v)

    def set_frame_iterations(self, v):
        r"""set_frame_iterations(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_frame_iterations(self, v)

    def set_static_iterations(self, v):
        r"""set_static_iterations(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_static_iterations(self, v)

    def set_replicas(self, v):
        r"""set_replicas(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_replicas(self, v)

    def set_frame_replicas(self, v):
        r"""set_frame_replicas(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_frame_replicas(self, v)

    def set_static_replicas(self, v):
        r"""set_static_replicas(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_static_replicas(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.SampleProvenance_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_SampleProvenance

# Register SampleProvenance in _RMF:
_RMF.SampleProvenance_swigregister(SampleProvenance)

def SampleProvenance_get_decorator_type_name():
    r"""SampleProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.SampleProvenance_get_decorator_type_name()

class SampleProvenanceFactory(Factory):
    r"""Proxy of C++ RMF::decorator::SampleProvenanceFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(SampleProvenanceFactory self, FileConstHandle fh) -> SampleProvenanceFactory
        __init__(SampleProvenanceFactory self, FileHandle fh) -> SampleProvenanceFactory
        """
        _RMF.SampleProvenanceFactory_swiginit(self, _RMF.new_SampleProvenanceFactory(*args))

    def get(self, *args):
        r"""
        get(SampleProvenanceFactory self, NodeConstHandle nh) -> SampleProvenanceConst
        get(SampleProvenanceFactory self, NodeHandle nh) -> SampleProvenance
        """
        return _RMF.SampleProvenanceFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(SampleProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SampleProvenanceFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(SampleProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SampleProvenanceFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(SampleProvenanceFactory self) -> std::string"""
        return _RMF.SampleProvenanceFactory___str__(self)

    def __repr__(self):
        r"""__repr__(SampleProvenanceFactory self) -> std::string"""
        return _RMF.SampleProvenanceFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_SampleProvenanceFactory

# Register SampleProvenanceFactory in _RMF:
_RMF.SampleProvenanceFactory_swigregister(SampleProvenanceFactory)

class SampleProvenanceConstFactory(SampleProvenanceFactory):
    r"""Proxy of C++ RMF::decorator::SampleProvenanceConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SampleProvenanceConstFactory self, FileConstHandle fh) -> SampleProvenanceConstFactory
        __init__(SampleProvenanceConstFactory self, FileHandle fh) -> SampleProvenanceConstFactory
        """
        _RMF.SampleProvenanceConstFactory_swiginit(self, _RMF.new_SampleProvenanceConstFactory(*args))
    __swig_destroy__ = _RMF.delete_SampleProvenanceConstFactory

# Register SampleProvenanceConstFactory in _RMF:
_RMF.SampleProvenanceConstFactory_swigregister(SampleProvenanceConstFactory)

class CombineProvenanceConst(Decorator):
    r"""Proxy of C++ RMF::decorator::CombineProvenanceConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_runs(self):
        r"""get_runs(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_runs(self)

    def get_frame_runs(self):
        r"""get_frame_runs(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_frame_runs(self)

    def get_static_runs(self):
        r"""get_static_runs(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_static_runs(self)

    def get_frames(self):
        r"""get_frames(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_frames(self)

    def get_frame_frames(self):
        r"""get_frame_frames(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_frame_frames(self)

    def get_static_frames(self):
        r"""get_static_frames(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_static_frames(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.CombineProvenanceConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(CombineProvenanceConst self) -> std::string"""
        return _RMF.CombineProvenanceConst___str__(self)

    def __repr__(self):
        r"""__repr__(CombineProvenanceConst self) -> std::string"""
        return _RMF.CombineProvenanceConst___repr__(self)
    __swig_destroy__ = _RMF.delete_CombineProvenanceConst

# Register CombineProvenanceConst in _RMF:
_RMF.CombineProvenanceConst_swigregister(CombineProvenanceConst)

def CombineProvenanceConst_get_decorator_type_name():
    r"""CombineProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.CombineProvenanceConst_get_decorator_type_name()

class CombineProvenance(CombineProvenanceConst):
    r"""Proxy of C++ RMF::decorator::CombineProvenance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_runs(self, v):
        r"""set_runs(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_runs(self, v)

    def set_frame_runs(self, v):
        r"""set_frame_runs(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_frame_runs(self, v)

    def set_static_runs(self, v):
        r"""set_static_runs(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_static_runs(self, v)

    def set_frames(self, v):
        r"""set_frames(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_frames(self, v)

    def set_frame_frames(self, v):
        r"""set_frame_frames(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_frame_frames(self, v)

    def set_static_frames(self, v):
        r"""set_static_frames(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_static_frames(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.CombineProvenance_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_CombineProvenance

# Register CombineProvenance in _RMF:
_RMF.CombineProvenance_swigregister(CombineProvenance)

def CombineProvenance_get_decorator_type_name():
    r"""CombineProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.CombineProvenance_get_decorator_type_name()

class CombineProvenanceFactory(Factory):
    r"""Proxy of C++ RMF::decorator::CombineProvenanceFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(CombineProvenanceFactory self, FileConstHandle fh) -> CombineProvenanceFactory
        __init__(CombineProvenanceFactory self, FileHandle fh) -> CombineProvenanceFactory
        """
        _RMF.CombineProvenanceFactory_swiginit(self, _RMF.new_CombineProvenanceFactory(*args))

    def get(self, *args):
        r"""
        get(CombineProvenanceFactory self, NodeConstHandle nh) -> CombineProvenanceConst
        get(CombineProvenanceFactory self, NodeHandle nh) -> CombineProvenance
        """
        return _RMF.CombineProvenanceFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(CombineProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CombineProvenanceFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(CombineProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CombineProvenanceFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(CombineProvenanceFactory self) -> std::string"""
        return _RMF.CombineProvenanceFactory___str__(self)

    def __repr__(self):
        r"""__repr__(CombineProvenanceFactory self) -> std::string"""
        return _RMF.CombineProvenanceFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_CombineProvenanceFactory

# Register CombineProvenanceFactory in _RMF:
_RMF.CombineProvenanceFactory_swigregister(CombineProvenanceFactory)

class CombineProvenanceConstFactory(CombineProvenanceFactory):
    r"""Proxy of C++ RMF::decorator::CombineProvenanceConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CombineProvenanceConstFactory self, FileConstHandle fh) -> CombineProvenanceConstFactory
        __init__(CombineProvenanceConstFactory self, FileHandle fh) -> CombineProvenanceConstFactory
        """
        _RMF.CombineProvenanceConstFactory_swiginit(self, _RMF.new_CombineProvenanceConstFactory(*args))
    __swig_destroy__ = _RMF.delete_CombineProvenanceConstFactory

# Register CombineProvenanceConstFactory in _RMF:
_RMF.CombineProvenanceConstFactory_swigregister(CombineProvenanceConstFactory)

class FilterProvenanceConst(Decorator):
    r"""Proxy of C++ RMF::decorator::FilterProvenanceConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_method(self):
        r"""get_method(FilterProvenanceConst self) -> RMF::String"""
        return _RMF.FilterProvenanceConst_get_method(self)

    def get_frame_method(self):
        r"""get_frame_method(FilterProvenanceConst self) -> RMF::String"""
        return _RMF.FilterProvenanceConst_get_frame_method(self)

    def get_static_method(self):
        r"""get_static_method(FilterProvenanceConst self) -> RMF::String"""
        return _RMF.FilterProvenanceConst_get_static_method(self)

    def get_threshold(self):
        r"""get_threshold(FilterProvenanceConst self) -> RMF::Float"""
        return _RMF.FilterProvenanceConst_get_threshold(self)

    def get_frame_threshold(self):
        r"""get_frame_threshold(FilterProvenanceConst self) -> RMF::Float"""
        return _RMF.FilterProvenanceConst_get_frame_threshold(self)

    def get_static_threshold(self):
        r"""get_static_threshold(FilterProvenanceConst self) -> RMF::Float"""
        return _RMF.FilterProvenanceConst_get_static_threshold(self)

    def get_frames(self):
        r"""get_frames(FilterProvenanceConst self) -> RMF::Int"""
        return _RMF.FilterProvenanceConst_get_frames(self)

    def get_frame_frames(self):
        r"""get_frame_frames(FilterProvenanceConst self) -> RMF::Int"""
        return _RMF.FilterProvenanceConst_get_frame_frames(self)

    def get_static_frames(self):
        r"""get_static_frames(FilterProvenanceConst self) -> RMF::Int"""
        return _RMF.FilterProvenanceConst_get_static_frames(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.FilterProvenanceConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(FilterProvenanceConst self) -> std::string"""
        return _RMF.FilterProvenanceConst___str__(self)

    def __repr__(self):
        r"""__repr__(FilterProvenanceConst self) -> std::string"""
        return _RMF.FilterProvenanceConst___repr__(self)
    __swig_destroy__ = _RMF.delete_FilterProvenanceConst

# Register FilterProvenanceConst in _RMF:
_RMF.FilterProvenanceConst_swigregister(FilterProvenanceConst)

def FilterProvenanceConst_get_decorator_type_name():
    r"""FilterProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.FilterProvenanceConst_get_decorator_type_name()

class FilterProvenance(FilterProvenanceConst):
    r"""Proxy of C++ RMF::decorator::FilterProvenance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_method(self, v):
        r"""set_method(FilterProvenance self, RMF::String v)"""
        return _RMF.FilterProvenance_set_method(self, v)

    def set_frame_method(self, v):
        r"""set_frame_method(FilterProvenance self, RMF::String v)"""
        return _RMF.FilterProvenance_set_frame_method(self, v)

    def set_static_method(self, v):
        r"""set_static_method(FilterProvenance self, RMF::String v)"""
        return _RMF.FilterProvenance_set_static_method(self, v)

    def set_threshold(self, v):
        r"""set_threshold(FilterProvenance self, RMF::Float v)"""
        return _RMF.FilterProvenance_set_threshold(self, v)

    def set_frame_threshold(self, v):
        r"""set_frame_threshold(FilterProvenance self, RMF::Float v)"""
        return _RMF.FilterProvenance_set_frame_threshold(self, v)

    def set_static_threshold(self, v):
        r"""set_static_threshold(FilterProvenance self, RMF::Float v)"""
        return _RMF.FilterProvenance_set_static_threshold(self, v)

    def set_frames(self, v):
        r"""set_frames(FilterProvenance self, RMF::Int v)"""
        return _RMF.FilterProvenance_set_frames(self, v)

    def set_frame_frames(self, v):
        r"""set_frame_frames(FilterProvenance self, RMF::Int v)"""
        return _RMF.FilterProvenance_set_frame_frames(self, v)

    def set_static_frames(self, v):
        r"""set_static_frames(FilterProvenance self, RMF::Int v)"""
        return _RMF.FilterProvenance_set_static_frames(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.FilterProvenance_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_FilterProvenance

# Register FilterProvenance in _RMF:
_RMF.FilterProvenance_swigregister(FilterProvenance)

def FilterProvenance_get_decorator_type_name():
    r"""FilterProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.FilterProvenance_get_decorator_type_name()

class FilterProvenanceFactory(Factory):
    r"""Proxy of C++ RMF::decorator::FilterProvenanceFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(FilterProvenanceFactory self, FileConstHandle fh) -> FilterProvenanceFactory
        __init__(FilterProvenanceFactory self, FileHandle fh) -> FilterProvenanceFactory
        """
        _RMF.FilterProvenanceFactory_swiginit(self, _RMF.new_FilterProvenanceFactory(*args))

    def get(self, *args):
        r"""
        get(FilterProvenanceFactory self, NodeConstHandle nh) -> FilterProvenanceConst
        get(FilterProvenanceFactory self, NodeHandle nh) -> FilterProvenance
        """
        return _RMF.FilterProvenanceFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(FilterProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.FilterProvenanceFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(FilterProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.FilterProvenanceFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(FilterProvenanceFactory self) -> std::string"""
        return _RMF.FilterProvenanceFactory___str__(self)

    def __repr__(self):
        r"""__repr__(FilterProvenanceFactory self) -> std::string"""
        return _RMF.FilterProvenanceFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_FilterProvenanceFactory

# Register FilterProvenanceFactory in _RMF:
_RMF.FilterProvenanceFactory_swigregister(FilterProvenanceFactory)

class FilterProvenanceConstFactory(FilterProvenanceFactory):
    r"""Proxy of C++ RMF::decorator::FilterProvenanceConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FilterProvenanceConstFactory self, FileConstHandle fh) -> FilterProvenanceConstFactory
        __init__(FilterProvenanceConstFactory self, FileHandle fh) -> FilterProvenanceConstFactory
        """
        _RMF.FilterProvenanceConstFactory_swiginit(self, _RMF.new_FilterProvenanceConstFactory(*args))
    __swig_destroy__ = _RMF.delete_FilterProvenanceConstFactory

# Register FilterProvenanceConstFactory in _RMF:
_RMF.FilterProvenanceConstFactory_swigregister(FilterProvenanceConstFactory)

class ClusterProvenanceConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ClusterProvenanceConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_members(self):
        r"""get_members(ClusterProvenanceConst self) -> RMF::Int"""
        return _RMF.ClusterProvenanceConst_get_members(self)

    def get_frame_members(self):
        r"""get_frame_members(ClusterProvenanceConst self) -> RMF::Int"""
        return _RMF.ClusterProvenanceConst_get_frame_members(self)

    def get_static_members(self):
        r"""get_static_members(ClusterProvenanceConst self) -> RMF::Int"""
        return _RMF.ClusterProvenanceConst_get_static_members(self)

    def get_precision(self):
        r"""get_precision(ClusterProvenanceConst self) -> RMF::Float"""
        return _RMF.ClusterProvenanceConst_get_precision(self)

    def get_frame_precision(self):
        r"""get_frame_precision(ClusterProvenanceConst self) -> RMF::Float"""
        return _RMF.ClusterProvenanceConst_get_frame_precision(self)

    def get_static_precision(self):
        r"""get_static_precision(ClusterProvenanceConst self) -> RMF::Float"""
        return _RMF.ClusterProvenanceConst_get_static_precision(self)

    def get_density(self):
        r"""get_density(ClusterProvenanceConst self) -> RMF::String"""
        return _RMF.ClusterProvenanceConst_get_density(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ClusterProvenanceConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ClusterProvenanceConst self) -> std::string"""
        return _RMF.ClusterProvenanceConst___str__(self)

    def __repr__(self):
        r"""__repr__(ClusterProvenanceConst self) -> std::string"""
        return _RMF.ClusterProvenanceConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ClusterProvenanceConst

# Register ClusterProvenanceConst in _RMF:
_RMF.ClusterProvenanceConst_swigregister(ClusterProvenanceConst)

def ClusterProvenanceConst_get_decorator_type_name():
    r"""ClusterProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.ClusterProvenanceConst_get_decorator_type_name()

class ClusterProvenance(ClusterProvenanceConst):
    r"""Proxy of C++ RMF::decorator::ClusterProvenance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_members(self, v):
        r"""set_members(ClusterProvenance self, RMF::Int v)"""
        return _RMF.ClusterProvenance_set_members(self, v)

    def set_frame_members(self, v):
        r"""set_frame_members(ClusterProvenance self, RMF::Int v)"""
        return _RMF.ClusterProvenance_set_frame_members(self, v)

    def set_static_members(self, v):
        r"""set_static_members(ClusterProvenance self, RMF::Int v)"""
        return _RMF.ClusterProvenance_set_static_members(self, v)

    def set_precision(self, v):
        r"""set_precision(ClusterProvenance self, RMF::Float v)"""
        return _RMF.ClusterProvenance_set_precision(self, v)

    def set_frame_precision(self, v):
        r"""set_frame_precision(ClusterProvenance self, RMF::Float v)"""
        return _RMF.ClusterProvenance_set_frame_precision(self, v)

    def set_static_precision(self, v):
        r"""set_static_precision(ClusterProvenance self, RMF::Float v)"""
        return _RMF.ClusterProvenance_set_static_precision(self, v)

    def set_density(self, path):
        r"""set_density(ClusterProvenance self, RMF::String path)"""
        return _RMF.ClusterProvenance_set_density(self, path)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ClusterProvenance_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_ClusterProvenance

# Register ClusterProvenance in _RMF:
_RMF.ClusterProvenance_swigregister(ClusterProvenance)

def ClusterProvenance_get_decorator_type_name():
    r"""ClusterProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.ClusterProvenance_get_decorator_type_name()

class ClusterProvenanceFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ClusterProvenanceFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ClusterProvenanceFactory self, FileConstHandle fh) -> ClusterProvenanceFactory
        __init__(ClusterProvenanceFactory self, FileHandle fh) -> ClusterProvenanceFactory
        """
        _RMF.ClusterProvenanceFactory_swiginit(self, _RMF.new_ClusterProvenanceFactory(*args))

    def get(self, *args):
        r"""
        get(ClusterProvenanceFactory self, NodeConstHandle nh) -> ClusterProvenanceConst
        get(ClusterProvenanceFactory self, NodeHandle nh) -> ClusterProvenance
        """
        return _RMF.ClusterProvenanceFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ClusterProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ClusterProvenanceFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ClusterProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ClusterProvenanceFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ClusterProvenanceFactory self) -> std::string"""
        return _RMF.ClusterProvenanceFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ClusterProvenanceFactory self) -> std::string"""
        return _RMF.ClusterProvenanceFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ClusterProvenanceFactory

# Register ClusterProvenanceFactory in _RMF:
_RMF.ClusterProvenanceFactory_swigregister(ClusterProvenanceFactory)

class ClusterProvenanceConstFactory(ClusterProvenanceFactory):
    r"""Proxy of C++ RMF::decorator::ClusterProvenanceConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ClusterProvenanceConstFactory self, FileConstHandle fh) -> ClusterProvenanceConstFactory
        __init__(ClusterProvenanceConstFactory self, FileHandle fh) -> ClusterProvenanceConstFactory
        """
        _RMF.ClusterProvenanceConstFactory_swiginit(self, _RMF.new_ClusterProvenanceConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ClusterProvenanceConstFactory

# Register ClusterProvenanceConstFactory in _RMF:
_RMF.ClusterProvenanceConstFactory_swigregister(ClusterProvenanceConstFactory)

class ScriptProvenanceConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ScriptProvenanceConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_filename(self):
        r"""get_filename(ScriptProvenanceConst self) -> RMF::String"""
        return _RMF.ScriptProvenanceConst_get_filename(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ScriptProvenanceConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ScriptProvenanceConst self) -> std::string"""
        return _RMF.ScriptProvenanceConst___str__(self)

    def __repr__(self):
        r"""__repr__(ScriptProvenanceConst self) -> std::string"""
        return _RMF.ScriptProvenanceConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ScriptProvenanceConst

# Register ScriptProvenanceConst in _RMF:
_RMF.ScriptProvenanceConst_swigregister(ScriptProvenanceConst)

def ScriptProvenanceConst_get_decorator_type_name():
    r"""ScriptProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.ScriptProvenanceConst_get_decorator_type_name()

class ScriptProvenance(ScriptProvenanceConst):
    r"""Proxy of C++ RMF::decorator::ScriptProvenance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_filename(self, path):
        r"""set_filename(ScriptProvenance self, RMF::String path)"""
        return _RMF.ScriptProvenance_set_filename(self, path)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ScriptProvenance_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_ScriptProvenance

# Register ScriptProvenance in _RMF:
_RMF.ScriptProvenance_swigregister(ScriptProvenance)

def ScriptProvenance_get_decorator_type_name():
    r"""ScriptProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.ScriptProvenance_get_decorator_type_name()

class ScriptProvenanceFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ScriptProvenanceFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ScriptProvenanceFactory self, FileConstHandle fh) -> ScriptProvenanceFactory
        __init__(ScriptProvenanceFactory self, FileHandle fh) -> ScriptProvenanceFactory
        """
        _RMF.ScriptProvenanceFactory_swiginit(self, _RMF.new_ScriptProvenanceFactory(*args))

    def get(self, *args):
        r"""
        get(ScriptProvenanceFactory self, NodeConstHandle nh) -> ScriptProvenanceConst
        get(ScriptProvenanceFactory self, NodeHandle nh) -> ScriptProvenance
        """
        return _RMF.ScriptProvenanceFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ScriptProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScriptProvenanceFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ScriptProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScriptProvenanceFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ScriptProvenanceFactory self) -> std::string"""
        return _RMF.ScriptProvenanceFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ScriptProvenanceFactory self) -> std::string"""
        return _RMF.ScriptProvenanceFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ScriptProvenanceFactory

# Register ScriptProvenanceFactory in _RMF:
_RMF.ScriptProvenanceFactory_swigregister(ScriptProvenanceFactory)

class ScriptProvenanceConstFactory(ScriptProvenanceFactory):
    r"""Proxy of C++ RMF::decorator::ScriptProvenanceConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ScriptProvenanceConstFactory self, FileConstHandle fh) -> ScriptProvenanceConstFactory
        __init__(ScriptProvenanceConstFactory self, FileHandle fh) -> ScriptProvenanceConstFactory
        """
        _RMF.ScriptProvenanceConstFactory_swiginit(self, _RMF.new_ScriptProvenanceConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ScriptProvenanceConstFactory

# Register ScriptProvenanceConstFactory in _RMF:
_RMF.ScriptProvenanceConstFactory_swigregister(ScriptProvenanceConstFactory)

class SoftwareProvenanceConst(Decorator):
    r"""Proxy of C++ RMF::decorator::SoftwareProvenanceConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_name(self):
        r"""get_name(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_name(self)

    def get_frame_name(self):
        r"""get_frame_name(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_frame_name(self)

    def get_static_name(self):
        r"""get_static_name(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_static_name(self)

    def get_version(self):
        r"""get_version(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_version(self)

    def get_frame_version(self):
        r"""get_frame_version(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_frame_version(self)

    def get_static_version(self):
        r"""get_static_version(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_static_version(self)

    def get_location(self):
        r"""get_location(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_location(self)

    def get_frame_location(self):
        r"""get_frame_location(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_frame_location(self)

    def get_static_location(self):
        r"""get_static_location(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_static_location(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.SoftwareProvenanceConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(SoftwareProvenanceConst self) -> std::string"""
        return _RMF.SoftwareProvenanceConst___str__(self)

    def __repr__(self):
        r"""__repr__(SoftwareProvenanceConst self) -> std::string"""
        return _RMF.SoftwareProvenanceConst___repr__(self)
    __swig_destroy__ = _RMF.delete_SoftwareProvenanceConst

# Register SoftwareProvenanceConst in _RMF:
_RMF.SoftwareProvenanceConst_swigregister(SoftwareProvenanceConst)

def SoftwareProvenanceConst_get_decorator_type_name():
    r"""SoftwareProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.SoftwareProvenanceConst_get_decorator_type_name()

class SoftwareProvenance(SoftwareProvenanceConst):
    r"""Proxy of C++ RMF::decorator::SoftwareProvenance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_name(self, v):
        r"""set_name(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_name(self, v)

    def set_frame_name(self, v):
        r"""set_frame_name(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_frame_name(self, v)

    def set_static_name(self, v):
        r"""set_static_name(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_static_name(self, v)

    def set_version(self, v):
        r"""set_version(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_version(self, v)

    def set_frame_version(self, v):
        r"""set_frame_version(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_frame_version(self, v)

    def set_static_version(self, v):
        r"""set_static_version(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_static_version(self, v)

    def set_location(self, v):
        r"""set_location(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_location(self, v)

    def set_frame_location(self, v):
        r"""set_frame_location(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_frame_location(self, v)

    def set_static_location(self, v):
        r"""set_static_location(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_static_location(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.SoftwareProvenance_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_SoftwareProvenance

# Register SoftwareProvenance in _RMF:
_RMF.SoftwareProvenance_swigregister(SoftwareProvenance)

def SoftwareProvenance_get_decorator_type_name():
    r"""SoftwareProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.SoftwareProvenance_get_decorator_type_name()

class SoftwareProvenanceFactory(Factory):
    r"""Proxy of C++ RMF::decorator::SoftwareProvenanceFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(SoftwareProvenanceFactory self, FileConstHandle fh) -> SoftwareProvenanceFactory
        __init__(SoftwareProvenanceFactory self, FileHandle fh) -> SoftwareProvenanceFactory
        """
        _RMF.SoftwareProvenanceFactory_swiginit(self, _RMF.new_SoftwareProvenanceFactory(*args))

    def get(self, *args):
        r"""
        get(SoftwareProvenanceFactory self, NodeConstHandle nh) -> SoftwareProvenanceConst
        get(SoftwareProvenanceFactory self, NodeHandle nh) -> SoftwareProvenance
        """
        return _RMF.SoftwareProvenanceFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(SoftwareProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SoftwareProvenanceFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(SoftwareProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SoftwareProvenanceFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(SoftwareProvenanceFactory self) -> std::string"""
        return _RMF.SoftwareProvenanceFactory___str__(self)

    def __repr__(self):
        r"""__repr__(SoftwareProvenanceFactory self) -> std::string"""
        return _RMF.SoftwareProvenanceFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_SoftwareProvenanceFactory

# Register SoftwareProvenanceFactory in _RMF:
_RMF.SoftwareProvenanceFactory_swigregister(SoftwareProvenanceFactory)

class SoftwareProvenanceConstFactory(SoftwareProvenanceFactory):
    r"""Proxy of C++ RMF::decorator::SoftwareProvenanceConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SoftwareProvenanceConstFactory self, FileConstHandle fh) -> SoftwareProvenanceConstFactory
        __init__(SoftwareProvenanceConstFactory self, FileHandle fh) -> SoftwareProvenanceConstFactory
        """
        _RMF.SoftwareProvenanceConstFactory_swiginit(self, _RMF.new_SoftwareProvenanceConstFactory(*args))
    __swig_destroy__ = _RMF.delete_SoftwareProvenanceConstFactory

# Register SoftwareProvenanceConstFactory in _RMF:
_RMF.SoftwareProvenanceConstFactory_swigregister(SoftwareProvenanceConstFactory)

class ScaleConst(Decorator):
    r"""Proxy of C++ RMF::decorator::ScaleConst class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_scale(self):
        r"""get_scale(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_scale(self)

    def get_frame_scale(self):
        r"""get_frame_scale(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_frame_scale(self)

    def get_static_scale(self):
        r"""get_static_scale(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_static_scale(self)

    def get_lower(self):
        r"""get_lower(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_lower(self)

    def get_frame_lower(self):
        r"""get_frame_lower(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_frame_lower(self)

    def get_static_lower(self):
        r"""get_static_lower(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_static_lower(self)

    def get_upper(self):
        r"""get_upper(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_upper(self)

    def get_frame_upper(self):
        r"""get_frame_upper(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_frame_upper(self)

    def get_static_upper(self):
        r"""get_static_upper(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_static_upper(self)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.ScaleConst_get_decorator_type_name()

    def __str__(self):
        r"""__str__(ScaleConst self) -> std::string"""
        return _RMF.ScaleConst___str__(self)

    def __repr__(self):
        r"""__repr__(ScaleConst self) -> std::string"""
        return _RMF.ScaleConst___repr__(self)
    __swig_destroy__ = _RMF.delete_ScaleConst

# Register ScaleConst in _RMF:
_RMF.ScaleConst_swigregister(ScaleConst)

def ScaleConst_get_decorator_type_name():
    r"""ScaleConst_get_decorator_type_name() -> std::string"""
    return _RMF.ScaleConst_get_decorator_type_name()

class Scale(ScaleConst):
    r"""Proxy of C++ RMF::decorator::Scale class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_scale(self, v):
        r"""set_scale(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_scale(self, v)

    def set_frame_scale(self, v):
        r"""set_frame_scale(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_frame_scale(self, v)

    def set_static_scale(self, v):
        r"""set_static_scale(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_static_scale(self, v)

    def set_lower(self, v):
        r"""set_lower(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_lower(self, v)

    def set_frame_lower(self, v):
        r"""set_frame_lower(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_frame_lower(self, v)

    def set_static_lower(self, v):
        r"""set_static_lower(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_static_lower(self, v)

    def set_upper(self, v):
        r"""set_upper(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_upper(self, v)

    def set_frame_upper(self, v):
        r"""set_frame_upper(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_frame_upper(self, v)

    def set_static_upper(self, v):
        r"""set_static_upper(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_static_upper(self, v)

    @staticmethod
    def get_decorator_type_name():
        r"""get_decorator_type_name() -> std::string"""
        return _RMF.Scale_get_decorator_type_name()
    __swig_destroy__ = _RMF.delete_Scale

# Register Scale in _RMF:
_RMF.Scale_swigregister(Scale)

def Scale_get_decorator_type_name():
    r"""Scale_get_decorator_type_name() -> std::string"""
    return _RMF.Scale_get_decorator_type_name()

class ScaleFactory(Factory):
    r"""Proxy of C++ RMF::decorator::ScaleFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(ScaleFactory self, FileConstHandle fh) -> ScaleFactory
        __init__(ScaleFactory self, FileHandle fh) -> ScaleFactory
        """
        _RMF.ScaleFactory_swiginit(self, _RMF.new_ScaleFactory(*args))

    def get(self, *args):
        r"""
        get(ScaleFactory self, NodeConstHandle nh) -> ScaleConst
        get(ScaleFactory self, NodeHandle nh) -> Scale
        """
        return _RMF.ScaleFactory_get(self, *args)

    def get_is(self, nh):
        r"""get_is(ScaleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScaleFactory_get_is(self, nh)

    def get_is_static(self, nh):
        r"""get_is_static(ScaleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScaleFactory_get_is_static(self, nh)

    def __str__(self):
        r"""__str__(ScaleFactory self) -> std::string"""
        return _RMF.ScaleFactory___str__(self)

    def __repr__(self):
        r"""__repr__(ScaleFactory self) -> std::string"""
        return _RMF.ScaleFactory___repr__(self)
    __swig_destroy__ = _RMF.delete_ScaleFactory

# Register ScaleFactory in _RMF:
_RMF.ScaleFactory_swigregister(ScaleFactory)

class ScaleConstFactory(ScaleFactory):
    r"""Proxy of C++ RMF::decorator::ScaleConstFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ScaleConstFactory self, FileConstHandle fh) -> ScaleConstFactory
        __init__(ScaleConstFactory self, FileHandle fh) -> ScaleConstFactory
        """
        _RMF.ScaleConstFactory_swiginit(self, _RMF.new_ScaleConstFactory(*args))
    __swig_destroy__ = _RMF.delete_ScaleConstFactory

# Register ScaleConstFactory in _RMF:
_RMF.ScaleConstFactory_swigregister(ScaleConstFactory)

class SetCurrentFrame(object):
    r"""Proxy of C++ RMF::SetCurrentFrame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, file, current_frame):
        r"""__init__(SetCurrentFrame self, FileConstHandle file, FrameID current_frame) -> SetCurrentFrame"""
        _RMF.SetCurrentFrame_swiginit(self, _RMF.new_SetCurrentFrame(file, current_frame))
    __swig_destroy__ = _RMF.delete_SetCurrentFrame

    def __str__(self):
        r"""__str__(SetCurrentFrame self) -> std::string"""
        return _RMF.SetCurrentFrame___str__(self)

    def __repr__(self):
        r"""__repr__(SetCurrentFrame self) -> std::string"""
        return _RMF.SetCurrentFrame___repr__(self)

# Register SetCurrentFrame in _RMF:
_RMF.SetCurrentFrame_swigregister(SetCurrentFrame)

class RestoreCurrentFrame(object):
    r"""Proxy of C++ RMF::RestoreCurrentFrame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, file):
        r"""__init__(RestoreCurrentFrame self, FileConstHandle file) -> RestoreCurrentFrame"""
        _RMF.RestoreCurrentFrame_swiginit(self, _RMF.new_RestoreCurrentFrame(file))
    __swig_destroy__ = _RMF.delete_RestoreCurrentFrame

    def __str__(self):
        r"""__str__(RestoreCurrentFrame self) -> std::string"""
        return _RMF.RestoreCurrentFrame___str__(self)

    def __repr__(self):
        r"""__repr__(RestoreCurrentFrame self) -> std::string"""
        return _RMF.RestoreCurrentFrame___repr__(self)

# Register RestoreCurrentFrame in _RMF:
_RMF.RestoreCurrentFrame_swigregister(RestoreCurrentFrame)

class CoordinateTransformer(object):
    r"""Proxy of C++ RMF::CoordinateTransformer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(CoordinateTransformer self) -> CoordinateTransformer
        __init__(CoordinateTransformer self, CoordinateTransformer base, ReferenceFrameConst rb) -> CoordinateTransformer
        """
        _RMF.CoordinateTransformer_swiginit(self, _RMF.new_CoordinateTransformer(*args))

    def __str__(self):
        r"""__str__(CoordinateTransformer self) -> std::string"""
        return _RMF.CoordinateTransformer___str__(self)

    def __repr__(self):
        r"""__repr__(CoordinateTransformer self) -> std::string"""
        return _RMF.CoordinateTransformer___repr__(self)

    def get_global_coordinates(self, internal):
        r"""get_global_coordinates(CoordinateTransformer self, Vector3 internal) -> Vector3"""
        return _RMF.CoordinateTransformer_get_global_coordinates(self, internal)

    def get_translation(self):
        r"""get_translation(CoordinateTransformer self) -> Vector3"""
        return _RMF.CoordinateTransformer_get_translation(self)

    def get_rotation(self):
        r"""get_rotation(CoordinateTransformer self) -> Vector4"""
        return _RMF.CoordinateTransformer_get_rotation(self)
    __swig_destroy__ = _RMF.delete_CoordinateTransformer

# Register CoordinateTransformer in _RMF:
_RMF.CoordinateTransformer_swigregister(CoordinateTransformer)

class TraverseHelper(NodeConstHandle):
    r"""Proxy of C++ RMF::TraverseHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TraverseHelper self) -> TraverseHelper
        __init__(TraverseHelper self, NodeConstHandle root, std::string molecule_name, double resolution=10000, int state_filter=-1) -> TraverseHelper
        """
        _RMF.TraverseHelper_swiginit(self, _RMF.new_TraverseHelper(*args))

    def get_chain_id(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_chain_id(self, *args))



    def get_residue_index(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_residue_index(self, *args))



    def get_residue_type(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_residue_type(self, *args))



    def get_molecule_name(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_molecule_name(self, *args))



    def get_rgb_color(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_rgb_color(self, *args))



    def get_state_index(self):
        r"""get_state_index(TraverseHelper self) -> unsigned int"""
        return _RMF.TraverseHelper_get_state_index(self)

    def get_copy_index(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_copy_index(self, *args))



    def get_global_coordinates(self, v):
        r"""get_global_coordinates(TraverseHelper self, Vector3 v) -> Vector3"""
        return _RMF.TraverseHelper_get_global_coordinates(self, v)

    def set_is_displayed(self):
        r"""set_is_displayed(TraverseHelper self) -> unsigned int"""
        return _RMF.TraverseHelper_set_is_displayed(self)

    def get_is_displayed(self, n):
        r"""get_is_displayed(TraverseHelper self, NodeID n) -> bool"""
        return _RMF.TraverseHelper_get_is_displayed(self, n)

    def get_index(self, n):
        r"""get_index(TraverseHelper self, NodeID n) -> unsigned int"""
        return _RMF.TraverseHelper_get_index(self, n)

    def get_children(self):
        r"""get_children(TraverseHelper self) -> TraverseHelpers"""
        return _RMF.TraverseHelper_get_children(self)
    __swig_destroy__ = _RMF.delete_TraverseHelper

# Register TraverseHelper in _RMF:
_RMF.TraverseHelper_swigregister(TraverseHelper)

class TraverseHelpers(object):
    r"""Proxy of C++ std::vector< RMF::TraverseHelper > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self):
        r"""iterator(TraverseHelpers self) -> RMF_SwigPyIterator"""
        return _RMF.TraverseHelpers_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(TraverseHelpers self) -> bool"""
        return _RMF.TraverseHelpers___nonzero__(self)

    def __bool__(self):
        r"""__bool__(TraverseHelpers self) -> bool"""
        return _RMF.TraverseHelpers___bool__(self)

    def __len__(self):
        r"""__len__(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::size_type"""
        return _RMF.TraverseHelpers___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i, std::vector< RMF::TraverseHelper >::difference_type j) -> TraverseHelpers"""
        return _RMF.TraverseHelpers___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i, std::vector< RMF::TraverseHelper >::difference_type j)
        __setslice__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i, std::vector< RMF::TraverseHelper >::difference_type j, TraverseHelpers v)
        """
        return _RMF.TraverseHelpers___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i, std::vector< RMF::TraverseHelper >::difference_type j)"""
        return _RMF.TraverseHelpers___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i)
        __delitem__(TraverseHelpers self, PySliceObject * slice)
        """
        return _RMF.TraverseHelpers___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(TraverseHelpers self, PySliceObject * slice) -> TraverseHelpers
        __getitem__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i) -> TraverseHelper
        """
        return _RMF.TraverseHelpers___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(TraverseHelpers self, PySliceObject * slice, TraverseHelpers v)
        __setitem__(TraverseHelpers self, PySliceObject * slice)
        __setitem__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i, TraverseHelper x)
        """
        return _RMF.TraverseHelpers___setitem__(self, *args)

    def pop(self):
        r"""pop(TraverseHelpers self) -> TraverseHelper"""
        return _RMF.TraverseHelpers_pop(self)

    def append(self, x):
        r"""append(TraverseHelpers self, TraverseHelper x)"""
        return _RMF.TraverseHelpers_append(self, x)

    def empty(self):
        r"""empty(TraverseHelpers self) -> bool"""
        return _RMF.TraverseHelpers_empty(self)

    def size(self):
        r"""size(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::size_type"""
        return _RMF.TraverseHelpers_size(self)

    def swap(self, v):
        r"""swap(TraverseHelpers self, TraverseHelpers v)"""
        return _RMF.TraverseHelpers_swap(self, v)

    def begin(self):
        r"""begin(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::iterator"""
        return _RMF.TraverseHelpers_begin(self)

    def end(self):
        r"""end(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::iterator"""
        return _RMF.TraverseHelpers_end(self)

    def rbegin(self):
        r"""rbegin(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::reverse_iterator"""
        return _RMF.TraverseHelpers_rbegin(self)

    def rend(self):
        r"""rend(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::reverse_iterator"""
        return _RMF.TraverseHelpers_rend(self)

    def clear(self):
        r"""clear(TraverseHelpers self)"""
        return _RMF.TraverseHelpers_clear(self)

    def get_allocator(self):
        r"""get_allocator(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::allocator_type"""
        return _RMF.TraverseHelpers_get_allocator(self)

    def pop_back(self):
        r"""pop_back(TraverseHelpers self)"""
        return _RMF.TraverseHelpers_pop_back(self)

    def erase(self, *args):
        r"""
        erase(TraverseHelpers self, std::vector< RMF::TraverseHelper >::iterator pos) -> std::vector< RMF::TraverseHelper >::iterator
        erase(TraverseHelpers self, std::vector< RMF::TraverseHelper >::iterator first, std::vector< RMF::TraverseHelper >::iterator last) -> std::vector< RMF::TraverseHelper >::iterator
        """
        return _RMF.TraverseHelpers_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(TraverseHelpers self) -> TraverseHelpers
        __init__(TraverseHelpers self, TraverseHelpers other) -> TraverseHelpers
        __init__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::size_type size) -> TraverseHelpers
        __init__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::size_type size, TraverseHelper value) -> TraverseHelpers
        """
        _RMF.TraverseHelpers_swiginit(self, _RMF.new_TraverseHelpers(*args))

    def push_back(self, x):
        r"""push_back(TraverseHelpers self, TraverseHelper x)"""
        return _RMF.TraverseHelpers_push_back(self, x)

    def front(self):
        r"""front(TraverseHelpers self) -> TraverseHelper"""
        return _RMF.TraverseHelpers_front(self)

    def back(self):
        r"""back(TraverseHelpers self) -> TraverseHelper"""
        return _RMF.TraverseHelpers_back(self)

    def assign(self, n, x):
        r"""assign(TraverseHelpers self, std::vector< RMF::TraverseHelper >::size_type n, TraverseHelper x)"""
        return _RMF.TraverseHelpers_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(TraverseHelpers self, std::vector< RMF::TraverseHelper >::size_type new_size)
        resize(TraverseHelpers self, std::vector< RMF::TraverseHelper >::size_type new_size, TraverseHelper x)
        """
        return _RMF.TraverseHelpers_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(TraverseHelpers self, std::vector< RMF::TraverseHelper >::iterator pos, TraverseHelper x) -> std::vector< RMF::TraverseHelper >::iterator
        insert(TraverseHelpers self, std::vector< RMF::TraverseHelper >::iterator pos, std::vector< RMF::TraverseHelper >::size_type n, TraverseHelper x)
        """
        return _RMF.TraverseHelpers_insert(self, *args)

    def reserve(self, n):
        r"""reserve(TraverseHelpers self, std::vector< RMF::TraverseHelper >::size_type n)"""
        return _RMF.TraverseHelpers_reserve(self, n)

    def capacity(self):
        r"""capacity(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::size_type"""
        return _RMF.TraverseHelpers_capacity(self)

    def __str__(self):
        r"""__str__(TraverseHelpers self) -> std::string"""
        return _RMF.TraverseHelpers___str__(self)

    def __repr__(self):
        r"""__repr__(TraverseHelpers self) -> std::string"""
        return _RMF.TraverseHelpers___repr__(self)
    __swig_destroy__ = _RMF.delete_TraverseHelpers

# Register TraverseHelpers in _RMF:
_RMF.TraverseHelpers_swigregister(TraverseHelpers)


def show_info(*args):
    r"""show_info(FileConstHandle rh, std::ostream & out=std::cout)"""
    return _RMF.show_info(*args)

def set_log_level(level):
    r"""set_log_level(std::string level)"""
    return _RMF.set_log_level(level)

def get_as_node_name(input):
    r"""get_as_node_name(std::string input) -> std::string"""
    return _RMF.get_as_node_name(input)

def get_is_valid_key_name(name):
    r"""get_is_valid_key_name(std::string name) -> bool"""
    return _RMF.get_is_valid_key_name(name)

def get_is_valid_node_name(name):
    r"""get_is_valid_node_name(std::string name) -> bool"""
    return _RMF.get_is_valid_node_name(name)

def show_hierarchy(*args):
    r"""
    show_hierarchy(NodeConstHandle root, std::ostream & out)
    show_hierarchy(NodeConstHandle root)
    """
    return _RMF.show_hierarchy(*args)

def show_hierarchy_with_values(*args):
    r"""
    show_hierarchy_with_values(NodeConstHandle root, std::ostream & out)
    show_hierarchy_with_values(NodeConstHandle root)
    """
    return _RMF.show_hierarchy_with_values(*args)

def show_hierarchy_with_decorators(*args):
    r"""show_hierarchy_with_decorators(NodeConstHandle root, bool verbose=False, std::ostream & out=std::cout)"""
    return _RMF.show_hierarchy_with_decorators(*args)

def show_frames(*args):
    r"""show_frames(FileConstHandle fh, std::ostream & out=std::cout)"""
    return _RMF.show_frames(*args)

def get_signature_string(file):
    r"""get_signature_string(FileConstHandle file) -> std::string"""
    return _RMF.get_signature_string(file)

def clone_file_info(input, output):
    r"""clone_file_info(FileConstHandle input, FileHandle output)"""
    return _RMF.clone_file_info(input, output)

def clone_hierarchy(input, output):
    r"""clone_hierarchy(FileConstHandle input, FileHandle output)"""
    return _RMF.clone_hierarchy(input, output)

def clone_loaded_frame(input, output):
    r"""clone_loaded_frame(FileConstHandle input, FileHandle output)"""
    return _RMF.clone_loaded_frame(input, output)

def clone_static_frame(input, output):
    r"""clone_static_frame(FileConstHandle input, FileHandle output)"""
    return _RMF.clone_static_frame(input, output)

def get_equal_structure(input, output, print_diff=False):
    r"""get_equal_structure(FileConstHandle input, FileConstHandle output, bool print_diff=False) -> bool"""
    return _RMF.get_equal_structure(input, output, print_diff)

def get_equal_current_values(input, out):
    r"""get_equal_current_values(FileConstHandle input, FileConstHandle out) -> bool"""
    return _RMF.get_equal_current_values(input, out)

def get_equal_static_values(input, out):
    r"""get_equal_static_values(FileConstHandle input, FileConstHandle out) -> bool"""
    return _RMF.get_equal_static_values(input, out)

def test_throw_exception():
    r"""test_throw_exception()"""
    return _RMF.test_throw_exception()

def get_bounding_box(root):
    r"""get_bounding_box(NodeConstHandle root) -> std::array< RMF::Vector3,2 >"""
    return _RMF.get_bounding_box(root)

def get_diameter(root):
    r"""get_diameter(NodeConstHandle root) -> float"""
    return _RMF.get_diameter(root)

def validate(fh):
    r"""validate(FileConstHandle fh)"""
    return _RMF.validate(fh)

_tmpdir=None

def _get_temporary_file_path(name):
   global _tmpdir
   if not _tmpdir:
       import tempfile
       _tmpdir = tempfile.mkdtemp()
   import os.path
   return os.path.join(_tmpdir, name)

def _get_test_input_file_path(name):
   import sys
   import os.path
   dir= os.path.split(sys.argv[0])[0]
   return os.path.join(dir, "input", name)

def _os_path_split_asunder(path):
    import os.path
    parts = []
    while True:
        newpath, tail = os.path.split(path)
        if newpath == path:
            assert not tail
            if path: parts.append(path)
            break
        parts.append(tail)
        path = newpath
    parts.reverse()
    return parts


def get_example_path(name):
   import sys
   import os.path
   dir= _os_path_split_asunder(sys.argv[0])[:-1]
   dir.append(name)
   return os.path.join(*dir)

def _assert_signatures_equal(sa, sb):
  if sa == sb:
     return
  else:
     import difflib
     for l in difflib.unified_diff(sa.split("\n"), sb.split("\n")):
        stl = str(l)
        print(stl)
     raise RuntimeError("not equal")

suffixes=["rmf", "rmfz"]

try:
  import RMF_HDF5
  HDF5=RMF_HDF5
except:
  pass




suffixes.extend(["rmf-avro", "rmf3", "rmf-hdf5", "_rmf_test_buffer"])


def get_all_global_coordinates(fh, nh, coord):
    r"""get_all_global_coordinates(FileConstHandle fh, NodeConstHandle nh, PyObject * coord)"""
    return _RMF.get_all_global_coordinates(fh, nh, coord)

ALL_FRAMES = cvar.ALL_FRAMES

