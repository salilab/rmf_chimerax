# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RMF')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RMF')
    _RMF = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RMF', [dirname(__file__)])
        except ImportError:
            import _RMF
            return _RMF
        try:
            _mod = imp.load_module('_RMF', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RMF = swig_import_helper()
    del swig_import_helper
else:
    import _RMF
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class RMF_SwigPyIterator(_object):
    """Proxy of C++ swig::RMF_SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMF_SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMF_SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RMF.delete_RMF_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(RMF_SwigPyIterator self) -> PyObject *"""
        return _RMF.RMF_SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(RMF_SwigPyIterator self, size_t n=1) -> RMF_SwigPyIterator
        incr(RMF_SwigPyIterator self) -> RMF_SwigPyIterator
        """
        return _RMF.RMF_SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(RMF_SwigPyIterator self, size_t n=1) -> RMF_SwigPyIterator
        decr(RMF_SwigPyIterator self) -> RMF_SwigPyIterator
        """
        return _RMF.RMF_SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(RMF_SwigPyIterator self, RMF_SwigPyIterator x) -> ptrdiff_t"""
        return _RMF.RMF_SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(RMF_SwigPyIterator self, RMF_SwigPyIterator x) -> bool"""
        return _RMF.RMF_SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(RMF_SwigPyIterator self) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator_copy(self)


    def next(self):
        """next(RMF_SwigPyIterator self) -> PyObject *"""
        return _RMF.RMF_SwigPyIterator_next(self)


    def __next__(self):
        """__next__(RMF_SwigPyIterator self) -> PyObject *"""
        return _RMF.RMF_SwigPyIterator___next__(self)


    def previous(self):
        """previous(RMF_SwigPyIterator self) -> PyObject *"""
        return _RMF.RMF_SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(RMF_SwigPyIterator self, ptrdiff_t n) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(RMF_SwigPyIterator self, RMF_SwigPyIterator x) -> bool"""
        return _RMF.RMF_SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(RMF_SwigPyIterator self, RMF_SwigPyIterator x) -> bool"""
        return _RMF.RMF_SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(RMF_SwigPyIterator self, ptrdiff_t n) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(RMF_SwigPyIterator self, ptrdiff_t n) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(RMF_SwigPyIterator self, ptrdiff_t n) -> RMF_SwigPyIterator"""
        return _RMF.RMF_SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(RMF_SwigPyIterator self, ptrdiff_t n) -> RMF_SwigPyIterator
        __sub__(RMF_SwigPyIterator self, RMF_SwigPyIterator x) -> ptrdiff_t
        """
        return _RMF.RMF_SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
RMF_SwigPyIterator_swigregister = _RMF.RMF_SwigPyIterator_swigregister
RMF_SwigPyIterator_swigregister(RMF_SwigPyIterator)

RMF_VERSION_MAJOR = _RMF.RMF_VERSION_MAJOR
RMF_VERSION_MINOR = _RMF.RMF_VERSION_MINOR
RMF_VERSION_MICRO = _RMF.RMF_VERSION_MICRO
RMF_VERSION = _RMF.RMF_VERSION
RMF_HAS_LOG4CXX = _RMF.RMF_HAS_LOG4CXX
RMF_HAS_NUMPY = _RMF.RMF_HAS_NUMPY
RMF_HAS_DEPRECATED_BACKENDS = _RMF.RMF_HAS_DEPRECATED_BACKENDS
class FrameTag(_object):
    """Proxy of C++ RMF::FrameTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameTag, name)
    __repr__ = _swig_repr

    def get_tag():
        """get_tag() -> std::string"""
        return _RMF.FrameTag_get_tag()

    get_tag = staticmethod(get_tag)

    def __init__(self):
        """__init__(RMF::FrameTag self) -> FrameTag"""
        this = _RMF.new_FrameTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_FrameTag
    __del__ = lambda self: None
FrameTag_swigregister = _RMF.FrameTag_swigregister
FrameTag_swigregister(FrameTag)

def FrameTag_get_tag():
    """FrameTag_get_tag() -> std::string"""
    return _RMF.FrameTag_get_tag()

class NodeTag(_object):
    """Proxy of C++ RMF::NodeTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeTag, name)
    __repr__ = _swig_repr

    def get_tag():
        """get_tag() -> std::string"""
        return _RMF.NodeTag_get_tag()

    get_tag = staticmethod(get_tag)

    def __init__(self):
        """__init__(RMF::NodeTag self) -> NodeTag"""
        this = _RMF.new_NodeTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_NodeTag
    __del__ = lambda self: None
NodeTag_swigregister = _RMF.NodeTag_swigregister
NodeTag_swigregister(NodeTag)

def NodeTag_get_tag():
    """NodeTag_get_tag() -> std::string"""
    return _RMF.NodeTag_get_tag()

class CategoryTag(_object):
    """Proxy of C++ RMF::CategoryTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CategoryTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CategoryTag, name)
    __repr__ = _swig_repr

    def get_tag():
        """get_tag() -> std::string"""
        return _RMF.CategoryTag_get_tag()

    get_tag = staticmethod(get_tag)

    def __init__(self):
        """__init__(RMF::CategoryTag self) -> CategoryTag"""
        this = _RMF.new_CategoryTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_CategoryTag
    __del__ = lambda self: None
CategoryTag_swigregister = _RMF.CategoryTag_swigregister
CategoryTag_swigregister(CategoryTag)

def CategoryTag_get_tag():
    """CategoryTag_get_tag() -> std::string"""
    return _RMF.CategoryTag_get_tag()

class FrameID(_object):
    """Proxy of C++ RMF::ID<(RMF::FrameTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameID, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::FrameTag)> self, unsigned int i) -> FrameID
        __init__(RMF::ID<(RMF::FrameTag)> self) -> FrameID
        """
        this = _RMF.new_FrameID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(FrameID self) -> unsigned int"""
        return _RMF.FrameID_get_index(self)


    def __eq__(self, o):
        """__eq__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___eq__(self, o)


    def __ne__(self, o):
        """__ne__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___ne__(self, o)


    def __lt__(self, o):
        """__lt__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___lt__(self, o)


    def __gt__(self, o):
        """__gt__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___gt__(self, o)


    def __ge__(self, o):
        """__ge__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___ge__(self, o)


    def __le__(self, o):
        """__le__(FrameID self, FrameID o) -> bool"""
        return _RMF.FrameID___le__(self, o)


    def __hash__(self):
        """__hash__(FrameID self) -> std::size_t"""
        return _RMF.FrameID___hash__(self)


    def __str__(self):
        """__str__(FrameID self) -> std::string"""
        return _RMF.FrameID___str__(self)


    def __repr__(self):
        """__repr__(FrameID self) -> std::string"""
        return _RMF.FrameID___repr__(self)

    __swig_destroy__ = _RMF.delete_FrameID
    __del__ = lambda self: None
FrameID_swigregister = _RMF.FrameID_swigregister
FrameID_swigregister(FrameID)

class NodeID(_object):
    """Proxy of C++ RMF::ID<(RMF::NodeTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeID, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::NodeTag)> self, unsigned int i) -> NodeID
        __init__(RMF::ID<(RMF::NodeTag)> self) -> NodeID
        """
        this = _RMF.new_NodeID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(NodeID self) -> unsigned int"""
        return _RMF.NodeID_get_index(self)


    def __eq__(self, o):
        """__eq__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___eq__(self, o)


    def __ne__(self, o):
        """__ne__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___ne__(self, o)


    def __lt__(self, o):
        """__lt__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___lt__(self, o)


    def __gt__(self, o):
        """__gt__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___gt__(self, o)


    def __ge__(self, o):
        """__ge__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___ge__(self, o)


    def __le__(self, o):
        """__le__(NodeID self, NodeID o) -> bool"""
        return _RMF.NodeID___le__(self, o)


    def __hash__(self):
        """__hash__(NodeID self) -> std::size_t"""
        return _RMF.NodeID___hash__(self)


    def __str__(self):
        """__str__(NodeID self) -> std::string"""
        return _RMF.NodeID___str__(self)


    def __repr__(self):
        """__repr__(NodeID self) -> std::string"""
        return _RMF.NodeID___repr__(self)

    __swig_destroy__ = _RMF.delete_NodeID
    __del__ = lambda self: None
NodeID_swigregister = _RMF.NodeID_swigregister
NodeID_swigregister(NodeID)

class Category(_object):
    """Proxy of C++ RMF::ID<(RMF::CategoryTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Category, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Category, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::CategoryTag)> self, unsigned int i) -> Category
        __init__(RMF::ID<(RMF::CategoryTag)> self) -> Category
        """
        this = _RMF.new_Category(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(Category self) -> unsigned int"""
        return _RMF.Category_get_index(self)


    def __eq__(self, o):
        """__eq__(Category self, Category o) -> bool"""
        return _RMF.Category___eq__(self, o)


    def __ne__(self, o):
        """__ne__(Category self, Category o) -> bool"""
        return _RMF.Category___ne__(self, o)


    def __lt__(self, o):
        """__lt__(Category self, Category o) -> bool"""
        return _RMF.Category___lt__(self, o)


    def __gt__(self, o):
        """__gt__(Category self, Category o) -> bool"""
        return _RMF.Category___gt__(self, o)


    def __ge__(self, o):
        """__ge__(Category self, Category o) -> bool"""
        return _RMF.Category___ge__(self, o)


    def __le__(self, o):
        """__le__(Category self, Category o) -> bool"""
        return _RMF.Category___le__(self, o)


    def __hash__(self):
        """__hash__(Category self) -> std::size_t"""
        return _RMF.Category___hash__(self)


    def __str__(self):
        """__str__(Category self) -> std::string"""
        return _RMF.Category___str__(self)


    def __repr__(self):
        """__repr__(Category self) -> std::string"""
        return _RMF.Category___repr__(self)

    __swig_destroy__ = _RMF.delete_Category
    __del__ = lambda self: None
Category_swigregister = _RMF.Category_swigregister
Category_swigregister(Category)

class FrameIDs(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::FrameTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameIDs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameIDs, name)

    def iterator(self):
        """iterator(FrameIDs self) -> RMF_SwigPyIterator"""
        return _RMF.FrameIDs_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(FrameIDs self) -> bool"""
        return _RMF.FrameIDs___nonzero__(self)


    def __bool__(self):
        """__bool__(FrameIDs self) -> bool"""
        return _RMF.FrameIDs___bool__(self)


    def __len__(self):
        """__len__(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::size_type"""
        return _RMF.FrameIDs___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i, std::vector< RMF::ID< RMF::FrameTag > >::difference_type j) -> FrameIDs"""
        return _RMF.FrameIDs___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i, std::vector< RMF::ID< RMF::FrameTag > >::difference_type j)
        __setslice__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i, std::vector< RMF::ID< RMF::FrameTag > >::difference_type j, FrameIDs v)
        """
        return _RMF.FrameIDs___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i, std::vector< RMF::ID< RMF::FrameTag > >::difference_type j)"""
        return _RMF.FrameIDs___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i)
        __delitem__(FrameIDs self, PySliceObject * slice)
        """
        return _RMF.FrameIDs___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(FrameIDs self, PySliceObject * slice) -> FrameIDs
        __getitem__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i) -> FrameID
        """
        return _RMF.FrameIDs___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(FrameIDs self, PySliceObject * slice, FrameIDs v)
        __setitem__(FrameIDs self, PySliceObject * slice)
        __setitem__(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::difference_type i, FrameID x)
        """
        return _RMF.FrameIDs___setitem__(self, *args)


    def pop(self):
        """pop(FrameIDs self) -> FrameID"""
        return _RMF.FrameIDs_pop(self)


    def append(self, x):
        """append(FrameIDs self, FrameID x)"""
        return _RMF.FrameIDs_append(self, x)


    def empty(self):
        """empty(FrameIDs self) -> bool"""
        return _RMF.FrameIDs_empty(self)


    def size(self):
        """size(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::size_type"""
        return _RMF.FrameIDs_size(self)


    def swap(self, v):
        """swap(FrameIDs self, FrameIDs v)"""
        return _RMF.FrameIDs_swap(self, v)


    def begin(self):
        """begin(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::iterator"""
        return _RMF.FrameIDs_begin(self)


    def end(self):
        """end(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::iterator"""
        return _RMF.FrameIDs_end(self)


    def rbegin(self):
        """rbegin(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::reverse_iterator"""
        return _RMF.FrameIDs_rbegin(self)


    def rend(self):
        """rend(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::reverse_iterator"""
        return _RMF.FrameIDs_rend(self)


    def clear(self):
        """clear(FrameIDs self)"""
        return _RMF.FrameIDs_clear(self)


    def get_allocator(self):
        """get_allocator(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::allocator_type"""
        return _RMF.FrameIDs_get_allocator(self)


    def pop_back(self):
        """pop_back(FrameIDs self)"""
        return _RMF.FrameIDs_pop_back(self)


    def erase(self, *args):
        """
        erase(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::iterator pos) -> std::vector< RMF::ID< RMF::FrameTag > >::iterator
        erase(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::iterator first, std::vector< RMF::ID< RMF::FrameTag > >::iterator last) -> std::vector< RMF::ID< RMF::FrameTag > >::iterator
        """
        return _RMF.FrameIDs_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::FrameTag)>)> self) -> FrameIDs
        __init__(std::vector<(RMF::ID<(RMF::FrameTag)>)> self, FrameIDs arg2) -> FrameIDs
        __init__(std::vector<(RMF::ID<(RMF::FrameTag)>)> self, std::vector< RMF::ID< RMF::FrameTag > >::size_type size) -> FrameIDs
        __init__(std::vector<(RMF::ID<(RMF::FrameTag)>)> self, std::vector< RMF::ID< RMF::FrameTag > >::size_type size, FrameID value) -> FrameIDs
        """
        this = _RMF.new_FrameIDs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(FrameIDs self, FrameID x)"""
        return _RMF.FrameIDs_push_back(self, x)


    def front(self):
        """front(FrameIDs self) -> FrameID"""
        return _RMF.FrameIDs_front(self)


    def back(self):
        """back(FrameIDs self) -> FrameID"""
        return _RMF.FrameIDs_back(self)


    def assign(self, n, x):
        """assign(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::size_type n, FrameID x)"""
        return _RMF.FrameIDs_assign(self, n, x)


    def resize(self, *args):
        """
        resize(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::size_type new_size)
        resize(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::size_type new_size, FrameID x)
        """
        return _RMF.FrameIDs_resize(self, *args)


    def insert(self, *args):
        """
        insert(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::iterator pos, FrameID x) -> std::vector< RMF::ID< RMF::FrameTag > >::iterator
        insert(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::iterator pos, std::vector< RMF::ID< RMF::FrameTag > >::size_type n, FrameID x)
        """
        return _RMF.FrameIDs_insert(self, *args)


    def reserve(self, n):
        """reserve(FrameIDs self, std::vector< RMF::ID< RMF::FrameTag > >::size_type n)"""
        return _RMF.FrameIDs_reserve(self, n)


    def capacity(self):
        """capacity(FrameIDs self) -> std::vector< RMF::ID< RMF::FrameTag > >::size_type"""
        return _RMF.FrameIDs_capacity(self)


    def __str__(self):
        """__str__(FrameIDs self) -> std::string"""
        return _RMF.FrameIDs___str__(self)


    def __repr__(self):
        """__repr__(FrameIDs self) -> std::string"""
        return _RMF.FrameIDs___repr__(self)

    __swig_destroy__ = _RMF.delete_FrameIDs
    __del__ = lambda self: None
FrameIDs_swigregister = _RMF.FrameIDs_swigregister
FrameIDs_swigregister(FrameIDs)

class NodeIDs(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::NodeTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeIDs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeIDs, name)

    def iterator(self):
        """iterator(NodeIDs self) -> RMF_SwigPyIterator"""
        return _RMF.NodeIDs_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(NodeIDs self) -> bool"""
        return _RMF.NodeIDs___nonzero__(self)


    def __bool__(self):
        """__bool__(NodeIDs self) -> bool"""
        return _RMF.NodeIDs___bool__(self)


    def __len__(self):
        """__len__(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::size_type"""
        return _RMF.NodeIDs___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i, std::vector< RMF::ID< RMF::NodeTag > >::difference_type j) -> NodeIDs"""
        return _RMF.NodeIDs___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i, std::vector< RMF::ID< RMF::NodeTag > >::difference_type j)
        __setslice__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i, std::vector< RMF::ID< RMF::NodeTag > >::difference_type j, NodeIDs v)
        """
        return _RMF.NodeIDs___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i, std::vector< RMF::ID< RMF::NodeTag > >::difference_type j)"""
        return _RMF.NodeIDs___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i)
        __delitem__(NodeIDs self, PySliceObject * slice)
        """
        return _RMF.NodeIDs___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(NodeIDs self, PySliceObject * slice) -> NodeIDs
        __getitem__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i) -> NodeID
        """
        return _RMF.NodeIDs___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(NodeIDs self, PySliceObject * slice, NodeIDs v)
        __setitem__(NodeIDs self, PySliceObject * slice)
        __setitem__(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::difference_type i, NodeID x)
        """
        return _RMF.NodeIDs___setitem__(self, *args)


    def pop(self):
        """pop(NodeIDs self) -> NodeID"""
        return _RMF.NodeIDs_pop(self)


    def append(self, x):
        """append(NodeIDs self, NodeID x)"""
        return _RMF.NodeIDs_append(self, x)


    def empty(self):
        """empty(NodeIDs self) -> bool"""
        return _RMF.NodeIDs_empty(self)


    def size(self):
        """size(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::size_type"""
        return _RMF.NodeIDs_size(self)


    def swap(self, v):
        """swap(NodeIDs self, NodeIDs v)"""
        return _RMF.NodeIDs_swap(self, v)


    def begin(self):
        """begin(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::iterator"""
        return _RMF.NodeIDs_begin(self)


    def end(self):
        """end(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::iterator"""
        return _RMF.NodeIDs_end(self)


    def rbegin(self):
        """rbegin(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::reverse_iterator"""
        return _RMF.NodeIDs_rbegin(self)


    def rend(self):
        """rend(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::reverse_iterator"""
        return _RMF.NodeIDs_rend(self)


    def clear(self):
        """clear(NodeIDs self)"""
        return _RMF.NodeIDs_clear(self)


    def get_allocator(self):
        """get_allocator(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::allocator_type"""
        return _RMF.NodeIDs_get_allocator(self)


    def pop_back(self):
        """pop_back(NodeIDs self)"""
        return _RMF.NodeIDs_pop_back(self)


    def erase(self, *args):
        """
        erase(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::iterator pos) -> std::vector< RMF::ID< RMF::NodeTag > >::iterator
        erase(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::iterator first, std::vector< RMF::ID< RMF::NodeTag > >::iterator last) -> std::vector< RMF::ID< RMF::NodeTag > >::iterator
        """
        return _RMF.NodeIDs_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::NodeTag)>)> self) -> NodeIDs
        __init__(std::vector<(RMF::ID<(RMF::NodeTag)>)> self, NodeIDs arg2) -> NodeIDs
        __init__(std::vector<(RMF::ID<(RMF::NodeTag)>)> self, std::vector< RMF::ID< RMF::NodeTag > >::size_type size) -> NodeIDs
        __init__(std::vector<(RMF::ID<(RMF::NodeTag)>)> self, std::vector< RMF::ID< RMF::NodeTag > >::size_type size, NodeID value) -> NodeIDs
        """
        this = _RMF.new_NodeIDs(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(NodeIDs self, NodeID x)"""
        return _RMF.NodeIDs_push_back(self, x)


    def front(self):
        """front(NodeIDs self) -> NodeID"""
        return _RMF.NodeIDs_front(self)


    def back(self):
        """back(NodeIDs self) -> NodeID"""
        return _RMF.NodeIDs_back(self)


    def assign(self, n, x):
        """assign(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::size_type n, NodeID x)"""
        return _RMF.NodeIDs_assign(self, n, x)


    def resize(self, *args):
        """
        resize(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::size_type new_size)
        resize(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::size_type new_size, NodeID x)
        """
        return _RMF.NodeIDs_resize(self, *args)


    def insert(self, *args):
        """
        insert(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::iterator pos, NodeID x) -> std::vector< RMF::ID< RMF::NodeTag > >::iterator
        insert(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::iterator pos, std::vector< RMF::ID< RMF::NodeTag > >::size_type n, NodeID x)
        """
        return _RMF.NodeIDs_insert(self, *args)


    def reserve(self, n):
        """reserve(NodeIDs self, std::vector< RMF::ID< RMF::NodeTag > >::size_type n)"""
        return _RMF.NodeIDs_reserve(self, n)


    def capacity(self):
        """capacity(NodeIDs self) -> std::vector< RMF::ID< RMF::NodeTag > >::size_type"""
        return _RMF.NodeIDs_capacity(self)


    def __str__(self):
        """__str__(NodeIDs self) -> std::string"""
        return _RMF.NodeIDs___str__(self)


    def __repr__(self):
        """__repr__(NodeIDs self) -> std::string"""
        return _RMF.NodeIDs___repr__(self)

    __swig_destroy__ = _RMF.delete_NodeIDs
    __del__ = lambda self: None
NodeIDs_swigregister = _RMF.NodeIDs_swigregister
NodeIDs_swigregister(NodeIDs)

class Categories(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::CategoryTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Categories, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Categories, name)

    def iterator(self):
        """iterator(Categories self) -> RMF_SwigPyIterator"""
        return _RMF.Categories_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Categories self) -> bool"""
        return _RMF.Categories___nonzero__(self)


    def __bool__(self):
        """__bool__(Categories self) -> bool"""
        return _RMF.Categories___bool__(self)


    def __len__(self):
        """__len__(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::size_type"""
        return _RMF.Categories___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type j) -> Categories"""
        return _RMF.Categories___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type j)
        __setslice__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type j, Categories v)
        """
        return _RMF.Categories___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type j)"""
        return _RMF.Categories___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i)
        __delitem__(Categories self, PySliceObject * slice)
        """
        return _RMF.Categories___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Categories self, PySliceObject * slice) -> Categories
        __getitem__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i) -> Category
        """
        return _RMF.Categories___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Categories self, PySliceObject * slice, Categories v)
        __setitem__(Categories self, PySliceObject * slice)
        __setitem__(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::difference_type i, Category x)
        """
        return _RMF.Categories___setitem__(self, *args)


    def pop(self):
        """pop(Categories self) -> Category"""
        return _RMF.Categories_pop(self)


    def append(self, x):
        """append(Categories self, Category x)"""
        return _RMF.Categories_append(self, x)


    def empty(self):
        """empty(Categories self) -> bool"""
        return _RMF.Categories_empty(self)


    def size(self):
        """size(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::size_type"""
        return _RMF.Categories_size(self)


    def swap(self, v):
        """swap(Categories self, Categories v)"""
        return _RMF.Categories_swap(self, v)


    def begin(self):
        """begin(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::iterator"""
        return _RMF.Categories_begin(self)


    def end(self):
        """end(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::iterator"""
        return _RMF.Categories_end(self)


    def rbegin(self):
        """rbegin(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::reverse_iterator"""
        return _RMF.Categories_rbegin(self)


    def rend(self):
        """rend(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::reverse_iterator"""
        return _RMF.Categories_rend(self)


    def clear(self):
        """clear(Categories self)"""
        return _RMF.Categories_clear(self)


    def get_allocator(self):
        """get_allocator(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::allocator_type"""
        return _RMF.Categories_get_allocator(self)


    def pop_back(self):
        """pop_back(Categories self)"""
        return _RMF.Categories_pop_back(self)


    def erase(self, *args):
        """
        erase(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::iterator pos) -> std::vector< RMF::ID< RMF::CategoryTag > >::iterator
        erase(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::iterator first, std::vector< RMF::ID< RMF::CategoryTag > >::iterator last) -> std::vector< RMF::ID< RMF::CategoryTag > >::iterator
        """
        return _RMF.Categories_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::CategoryTag)>)> self) -> Categories
        __init__(std::vector<(RMF::ID<(RMF::CategoryTag)>)> self, Categories arg2) -> Categories
        __init__(std::vector<(RMF::ID<(RMF::CategoryTag)>)> self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type size) -> Categories
        __init__(std::vector<(RMF::ID<(RMF::CategoryTag)>)> self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type size, Category value) -> Categories
        """
        this = _RMF.new_Categories(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Categories self, Category x)"""
        return _RMF.Categories_push_back(self, x)


    def front(self):
        """front(Categories self) -> Category"""
        return _RMF.Categories_front(self)


    def back(self):
        """back(Categories self) -> Category"""
        return _RMF.Categories_back(self)


    def assign(self, n, x):
        """assign(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type n, Category x)"""
        return _RMF.Categories_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type new_size)
        resize(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type new_size, Category x)
        """
        return _RMF.Categories_resize(self, *args)


    def insert(self, *args):
        """
        insert(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::iterator pos, Category x) -> std::vector< RMF::ID< RMF::CategoryTag > >::iterator
        insert(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::iterator pos, std::vector< RMF::ID< RMF::CategoryTag > >::size_type n, Category x)
        """
        return _RMF.Categories_insert(self, *args)


    def reserve(self, n):
        """reserve(Categories self, std::vector< RMF::ID< RMF::CategoryTag > >::size_type n)"""
        return _RMF.Categories_reserve(self, n)


    def capacity(self):
        """capacity(Categories self) -> std::vector< RMF::ID< RMF::CategoryTag > >::size_type"""
        return _RMF.Categories_capacity(self)


    def __str__(self):
        """__str__(Categories self) -> std::string"""
        return _RMF.Categories___str__(self)


    def __repr__(self):
        """__repr__(Categories self) -> std::string"""
        return _RMF.Categories___repr__(self)

    __swig_destroy__ = _RMF.delete_Categories
    __del__ = lambda self: None
Categories_swigregister = _RMF.Categories_swigregister
Categories_swigregister(Categories)

class Vector3(_object):
    """Proxy of C++ RMF::Vector<(3U)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::Vector<(3U)> self) -> Vector3
        __init__(RMF::Vector<(3U)> self, Vector3 o) -> Vector3
        __init__(RMF::Vector<(3U)> self, float x, float y, float z) -> Vector3
        """
        this = _RMF.new_Vector3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """__getitem__(Vector3 self, unsigned int i) -> float"""
        return _RMF.Vector3___getitem__(self, i)


    def __len__(self):
        """__len__(Vector3 self) -> unsigned int"""
        return _RMF.Vector3___len__(self)


    def get_dimension():
        """get_dimension() -> unsigned int"""
        return _RMF.Vector3_get_dimension()

    get_dimension = staticmethod(get_dimension)

    def __eq__(self, o):
        """__eq__(Vector3 self, Vector3 o) -> bool"""
        return _RMF.Vector3___eq__(self, o)


    def __ne__(self, o):
        """__ne__(Vector3 self, Vector3 o) -> bool"""
        return _RMF.Vector3___ne__(self, o)


    def __str__(self):
       return str([x for x in self])
    def __repr__(self):
         return self.__str__()

    __swig_destroy__ = _RMF.delete_Vector3
    __del__ = lambda self: None
Vector3_swigregister = _RMF.Vector3_swigregister
Vector3_swigregister(Vector3)

def Vector3_get_dimension():
    """Vector3_get_dimension() -> unsigned int"""
    return _RMF.Vector3_get_dimension()

class Vector4(_object):
    """Proxy of C++ RMF::Vector<(4U)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector4, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::Vector<(4U)> self) -> Vector4
        __init__(RMF::Vector<(4U)> self, Vector4 o) -> Vector4
        __init__(RMF::Vector<(4U)> self, float w, float x, float y, float z) -> Vector4
        """
        this = _RMF.new_Vector4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, i):
        """__getitem__(Vector4 self, unsigned int i) -> float"""
        return _RMF.Vector4___getitem__(self, i)


    def __len__(self):
        """__len__(Vector4 self) -> unsigned int"""
        return _RMF.Vector4___len__(self)


    def get_dimension():
        """get_dimension() -> unsigned int"""
        return _RMF.Vector4_get_dimension()

    get_dimension = staticmethod(get_dimension)

    def __eq__(self, o):
        """__eq__(Vector4 self, Vector4 o) -> bool"""
        return _RMF.Vector4___eq__(self, o)


    def __ne__(self, o):
        """__ne__(Vector4 self, Vector4 o) -> bool"""
        return _RMF.Vector4___ne__(self, o)


    def __str__(self):
       return str([x for x in self])
    def __repr__(self):
         return self.__str__()

    __swig_destroy__ = _RMF.delete_Vector4
    __del__ = lambda self: None
Vector4_swigregister = _RMF.Vector4_swigregister
Vector4_swigregister(Vector4)

def Vector4_get_dimension():
    """Vector4_get_dimension() -> unsigned int"""
    return _RMF.Vector4_get_dimension()

class IntRange(_object):
    """Proxy of C++ std::array<(int,2)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntRange, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(std::array<(int,2)> self) -> IntRange"""
        this = _RMF.new_IntRange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def at(self, i):
        """at(IntRange self, int i) -> int"""
        return _RMF.IntRange_at(self, i)


    def size(self):
        """size(IntRange self) -> int"""
        return _RMF.IntRange_size(self)


    def __getitem__(self, d):
      if d >= self.size() or d < 0:
        raise IndexError()
      return self.at(d)

    def __len__(self):
      return self.size()

    __swig_destroy__ = _RMF.delete_IntRange
    __del__ = lambda self: None
IntRange_swigregister = _RMF.IntRange_swigregister
IntRange_swigregister(IntRange)

class Ints(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ints, name)

    def iterator(self):
        """iterator(Ints self) -> RMF_SwigPyIterator"""
        return _RMF.Ints_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Ints self) -> bool"""
        return _RMF.Ints___nonzero__(self)


    def __bool__(self):
        """__bool__(Ints self) -> bool"""
        return _RMF.Ints___bool__(self)


    def __len__(self):
        """__len__(Ints self) -> std::vector< int >::size_type"""
        return _RMF.Ints___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Ints self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> Ints"""
        return _RMF.Ints___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Ints self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(Ints self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, Ints v)
        """
        return _RMF.Ints___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Ints self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _RMF.Ints___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Ints self, std::vector< int >::difference_type i)
        __delitem__(Ints self, PySliceObject * slice)
        """
        return _RMF.Ints___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Ints self, PySliceObject * slice) -> Ints
        __getitem__(Ints self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _RMF.Ints___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Ints self, PySliceObject * slice, Ints v)
        __setitem__(Ints self, PySliceObject * slice)
        __setitem__(Ints self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _RMF.Ints___setitem__(self, *args)


    def pop(self):
        """pop(Ints self) -> std::vector< int >::value_type"""
        return _RMF.Ints_pop(self)


    def append(self, x):
        """append(Ints self, std::vector< int >::value_type const & x)"""
        return _RMF.Ints_append(self, x)


    def empty(self):
        """empty(Ints self) -> bool"""
        return _RMF.Ints_empty(self)


    def size(self):
        """size(Ints self) -> std::vector< int >::size_type"""
        return _RMF.Ints_size(self)


    def swap(self, v):
        """swap(Ints self, Ints v)"""
        return _RMF.Ints_swap(self, v)


    def begin(self):
        """begin(Ints self) -> std::vector< int >::iterator"""
        return _RMF.Ints_begin(self)


    def end(self):
        """end(Ints self) -> std::vector< int >::iterator"""
        return _RMF.Ints_end(self)


    def rbegin(self):
        """rbegin(Ints self) -> std::vector< int >::reverse_iterator"""
        return _RMF.Ints_rbegin(self)


    def rend(self):
        """rend(Ints self) -> std::vector< int >::reverse_iterator"""
        return _RMF.Ints_rend(self)


    def clear(self):
        """clear(Ints self)"""
        return _RMF.Ints_clear(self)


    def get_allocator(self):
        """get_allocator(Ints self) -> std::vector< int >::allocator_type"""
        return _RMF.Ints_get_allocator(self)


    def pop_back(self):
        """pop_back(Ints self)"""
        return _RMF.Ints_pop_back(self)


    def erase(self, *args):
        """
        erase(Ints self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(Ints self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _RMF.Ints_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> Ints
        __init__(std::vector<(int)> self, Ints arg2) -> Ints
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> Ints
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> Ints
        """
        this = _RMF.new_Ints(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Ints self, std::vector< int >::value_type const & x)"""
        return _RMF.Ints_push_back(self, x)


    def front(self):
        """front(Ints self) -> std::vector< int >::value_type const &"""
        return _RMF.Ints_front(self)


    def back(self):
        """back(Ints self) -> std::vector< int >::value_type const &"""
        return _RMF.Ints_back(self)


    def assign(self, n, x):
        """assign(Ints self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _RMF.Ints_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Ints self, std::vector< int >::size_type new_size)
        resize(Ints self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _RMF.Ints_resize(self, *args)


    def insert(self, *args):
        """
        insert(Ints self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(Ints self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _RMF.Ints_insert(self, *args)


    def reserve(self, n):
        """reserve(Ints self, std::vector< int >::size_type n)"""
        return _RMF.Ints_reserve(self, n)


    def capacity(self):
        """capacity(Ints self) -> std::vector< int >::size_type"""
        return _RMF.Ints_capacity(self)


    def __str__(self):
        """__str__(Ints self) -> std::string"""
        return _RMF.Ints___str__(self)


    def __repr__(self):
        """__repr__(Ints self) -> std::string"""
        return _RMF.Ints___repr__(self)

    __swig_destroy__ = _RMF.delete_Ints
    __del__ = lambda self: None
Ints_swigregister = _RMF.Ints_swigregister
Ints_swigregister(Ints)

class Floats(_object):
    """Proxy of C++ std::vector<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Floats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Floats, name)

    def iterator(self):
        """iterator(Floats self) -> RMF_SwigPyIterator"""
        return _RMF.Floats_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Floats self) -> bool"""
        return _RMF.Floats___nonzero__(self)


    def __bool__(self):
        """__bool__(Floats self) -> bool"""
        return _RMF.Floats___bool__(self)


    def __len__(self):
        """__len__(Floats self) -> std::vector< float >::size_type"""
        return _RMF.Floats___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Floats self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> Floats"""
        return _RMF.Floats___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Floats self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)
        __setslice__(Floats self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, Floats v)
        """
        return _RMF.Floats___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Floats self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"""
        return _RMF.Floats___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Floats self, std::vector< float >::difference_type i)
        __delitem__(Floats self, PySliceObject * slice)
        """
        return _RMF.Floats___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Floats self, PySliceObject * slice) -> Floats
        __getitem__(Floats self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &
        """
        return _RMF.Floats___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Floats self, PySliceObject * slice, Floats v)
        __setitem__(Floats self, PySliceObject * slice)
        __setitem__(Floats self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)
        """
        return _RMF.Floats___setitem__(self, *args)


    def pop(self):
        """pop(Floats self) -> std::vector< float >::value_type"""
        return _RMF.Floats_pop(self)


    def append(self, x):
        """append(Floats self, std::vector< float >::value_type const & x)"""
        return _RMF.Floats_append(self, x)


    def empty(self):
        """empty(Floats self) -> bool"""
        return _RMF.Floats_empty(self)


    def size(self):
        """size(Floats self) -> std::vector< float >::size_type"""
        return _RMF.Floats_size(self)


    def swap(self, v):
        """swap(Floats self, Floats v)"""
        return _RMF.Floats_swap(self, v)


    def begin(self):
        """begin(Floats self) -> std::vector< float >::iterator"""
        return _RMF.Floats_begin(self)


    def end(self):
        """end(Floats self) -> std::vector< float >::iterator"""
        return _RMF.Floats_end(self)


    def rbegin(self):
        """rbegin(Floats self) -> std::vector< float >::reverse_iterator"""
        return _RMF.Floats_rbegin(self)


    def rend(self):
        """rend(Floats self) -> std::vector< float >::reverse_iterator"""
        return _RMF.Floats_rend(self)


    def clear(self):
        """clear(Floats self)"""
        return _RMF.Floats_clear(self)


    def get_allocator(self):
        """get_allocator(Floats self) -> std::vector< float >::allocator_type"""
        return _RMF.Floats_get_allocator(self)


    def pop_back(self):
        """pop_back(Floats self)"""
        return _RMF.Floats_pop_back(self)


    def erase(self, *args):
        """
        erase(Floats self, std::vector< float >::iterator pos) -> std::vector< float >::iterator
        erase(Floats self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator
        """
        return _RMF.Floats_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(float)> self) -> Floats
        __init__(std::vector<(float)> self, Floats arg2) -> Floats
        __init__(std::vector<(float)> self, std::vector< float >::size_type size) -> Floats
        __init__(std::vector<(float)> self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> Floats
        """
        this = _RMF.new_Floats(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Floats self, std::vector< float >::value_type const & x)"""
        return _RMF.Floats_push_back(self, x)


    def front(self):
        """front(Floats self) -> std::vector< float >::value_type const &"""
        return _RMF.Floats_front(self)


    def back(self):
        """back(Floats self) -> std::vector< float >::value_type const &"""
        return _RMF.Floats_back(self)


    def assign(self, n, x):
        """assign(Floats self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"""
        return _RMF.Floats_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Floats self, std::vector< float >::size_type new_size)
        resize(Floats self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)
        """
        return _RMF.Floats_resize(self, *args)


    def insert(self, *args):
        """
        insert(Floats self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator
        insert(Floats self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)
        """
        return _RMF.Floats_insert(self, *args)


    def reserve(self, n):
        """reserve(Floats self, std::vector< float >::size_type n)"""
        return _RMF.Floats_reserve(self, n)


    def capacity(self):
        """capacity(Floats self) -> std::vector< float >::size_type"""
        return _RMF.Floats_capacity(self)


    def __str__(self):
        """__str__(Floats self) -> std::string"""
        return _RMF.Floats___str__(self)


    def __repr__(self):
        """__repr__(Floats self) -> std::string"""
        return _RMF.Floats___repr__(self)

    __swig_destroy__ = _RMF.delete_Floats
    __del__ = lambda self: None
Floats_swigregister = _RMF.Floats_swigregister
Floats_swigregister(Floats)

class Strings(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Strings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Strings, name)

    def iterator(self):
        """iterator(Strings self) -> RMF_SwigPyIterator"""
        return _RMF.Strings_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Strings self) -> bool"""
        return _RMF.Strings___nonzero__(self)


    def __bool__(self):
        """__bool__(Strings self) -> bool"""
        return _RMF.Strings___bool__(self)


    def __len__(self):
        """__len__(Strings self) -> std::vector< std::string >::size_type"""
        return _RMF.Strings___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Strings self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> Strings"""
        return _RMF.Strings___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Strings self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(Strings self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, Strings v)
        """
        return _RMF.Strings___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Strings self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _RMF.Strings___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Strings self, std::vector< std::string >::difference_type i)
        __delitem__(Strings self, PySliceObject * slice)
        """
        return _RMF.Strings___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Strings self, PySliceObject * slice) -> Strings
        __getitem__(Strings self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _RMF.Strings___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Strings self, PySliceObject * slice, Strings v)
        __setitem__(Strings self, PySliceObject * slice)
        __setitem__(Strings self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _RMF.Strings___setitem__(self, *args)


    def pop(self):
        """pop(Strings self) -> std::vector< std::string >::value_type"""
        return _RMF.Strings_pop(self)


    def append(self, x):
        """append(Strings self, std::vector< std::string >::value_type const & x)"""
        return _RMF.Strings_append(self, x)


    def empty(self):
        """empty(Strings self) -> bool"""
        return _RMF.Strings_empty(self)


    def size(self):
        """size(Strings self) -> std::vector< std::string >::size_type"""
        return _RMF.Strings_size(self)


    def swap(self, v):
        """swap(Strings self, Strings v)"""
        return _RMF.Strings_swap(self, v)


    def begin(self):
        """begin(Strings self) -> std::vector< std::string >::iterator"""
        return _RMF.Strings_begin(self)


    def end(self):
        """end(Strings self) -> std::vector< std::string >::iterator"""
        return _RMF.Strings_end(self)


    def rbegin(self):
        """rbegin(Strings self) -> std::vector< std::string >::reverse_iterator"""
        return _RMF.Strings_rbegin(self)


    def rend(self):
        """rend(Strings self) -> std::vector< std::string >::reverse_iterator"""
        return _RMF.Strings_rend(self)


    def clear(self):
        """clear(Strings self)"""
        return _RMF.Strings_clear(self)


    def get_allocator(self):
        """get_allocator(Strings self) -> std::vector< std::string >::allocator_type"""
        return _RMF.Strings_get_allocator(self)


    def pop_back(self):
        """pop_back(Strings self)"""
        return _RMF.Strings_pop_back(self)


    def erase(self, *args):
        """
        erase(Strings self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(Strings self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _RMF.Strings_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> Strings
        __init__(std::vector<(std::string)> self, Strings arg2) -> Strings
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> Strings
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> Strings
        """
        this = _RMF.new_Strings(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Strings self, std::vector< std::string >::value_type const & x)"""
        return _RMF.Strings_push_back(self, x)


    def front(self):
        """front(Strings self) -> std::vector< std::string >::value_type const &"""
        return _RMF.Strings_front(self)


    def back(self):
        """back(Strings self) -> std::vector< std::string >::value_type const &"""
        return _RMF.Strings_back(self)


    def assign(self, n, x):
        """assign(Strings self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _RMF.Strings_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Strings self, std::vector< std::string >::size_type new_size)
        resize(Strings self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _RMF.Strings_resize(self, *args)


    def insert(self, *args):
        """
        insert(Strings self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(Strings self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _RMF.Strings_insert(self, *args)


    def reserve(self, n):
        """reserve(Strings self, std::vector< std::string >::size_type n)"""
        return _RMF.Strings_reserve(self, n)


    def capacity(self):
        """capacity(Strings self) -> std::vector< std::string >::size_type"""
        return _RMF.Strings_capacity(self)


    def __str__(self):
        """__str__(Strings self) -> std::string"""
        return _RMF.Strings___str__(self)


    def __repr__(self):
        """__repr__(Strings self) -> std::string"""
        return _RMF.Strings___repr__(self)

    __swig_destroy__ = _RMF.delete_Strings
    __del__ = lambda self: None
Strings_swigregister = _RMF.Strings_swigregister
Strings_swigregister(Strings)

class Vector3s(_object):
    """Proxy of C++ std::vector<(RMF::Vector<(3U)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3s, name)

    def iterator(self):
        """iterator(Vector3s self) -> RMF_SwigPyIterator"""
        return _RMF.Vector3s_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Vector3s self) -> bool"""
        return _RMF.Vector3s___nonzero__(self)


    def __bool__(self):
        """__bool__(Vector3s self) -> bool"""
        return _RMF.Vector3s___bool__(self)


    def __len__(self):
        """__len__(Vector3s self) -> std::vector< RMF::Vector< 3U > >::size_type"""
        return _RMF.Vector3s___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i, std::vector< RMF::Vector< 3U > >::difference_type j) -> Vector3s"""
        return _RMF.Vector3s___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i, std::vector< RMF::Vector< 3U > >::difference_type j)
        __setslice__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i, std::vector< RMF::Vector< 3U > >::difference_type j, Vector3s v)
        """
        return _RMF.Vector3s___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i, std::vector< RMF::Vector< 3U > >::difference_type j)"""
        return _RMF.Vector3s___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i)
        __delitem__(Vector3s self, PySliceObject * slice)
        """
        return _RMF.Vector3s___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Vector3s self, PySliceObject * slice) -> Vector3s
        __getitem__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i) -> Vector3
        """
        return _RMF.Vector3s___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Vector3s self, PySliceObject * slice, Vector3s v)
        __setitem__(Vector3s self, PySliceObject * slice)
        __setitem__(Vector3s self, std::vector< RMF::Vector< 3U > >::difference_type i, Vector3 x)
        """
        return _RMF.Vector3s___setitem__(self, *args)


    def pop(self):
        """pop(Vector3s self) -> Vector3"""
        return _RMF.Vector3s_pop(self)


    def append(self, x):
        """append(Vector3s self, Vector3 x)"""
        return _RMF.Vector3s_append(self, x)


    def empty(self):
        """empty(Vector3s self) -> bool"""
        return _RMF.Vector3s_empty(self)


    def size(self):
        """size(Vector3s self) -> std::vector< RMF::Vector< 3U > >::size_type"""
        return _RMF.Vector3s_size(self)


    def swap(self, v):
        """swap(Vector3s self, Vector3s v)"""
        return _RMF.Vector3s_swap(self, v)


    def begin(self):
        """begin(Vector3s self) -> std::vector< RMF::Vector< 3U > >::iterator"""
        return _RMF.Vector3s_begin(self)


    def end(self):
        """end(Vector3s self) -> std::vector< RMF::Vector< 3U > >::iterator"""
        return _RMF.Vector3s_end(self)


    def rbegin(self):
        """rbegin(Vector3s self) -> std::vector< RMF::Vector< 3U > >::reverse_iterator"""
        return _RMF.Vector3s_rbegin(self)


    def rend(self):
        """rend(Vector3s self) -> std::vector< RMF::Vector< 3U > >::reverse_iterator"""
        return _RMF.Vector3s_rend(self)


    def clear(self):
        """clear(Vector3s self)"""
        return _RMF.Vector3s_clear(self)


    def get_allocator(self):
        """get_allocator(Vector3s self) -> std::vector< RMF::Vector< 3U > >::allocator_type"""
        return _RMF.Vector3s_get_allocator(self)


    def pop_back(self):
        """pop_back(Vector3s self)"""
        return _RMF.Vector3s_pop_back(self)


    def erase(self, *args):
        """
        erase(Vector3s self, std::vector< RMF::Vector< 3U > >::iterator pos) -> std::vector< RMF::Vector< 3U > >::iterator
        erase(Vector3s self, std::vector< RMF::Vector< 3U > >::iterator first, std::vector< RMF::Vector< 3U > >::iterator last) -> std::vector< RMF::Vector< 3U > >::iterator
        """
        return _RMF.Vector3s_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::Vector<(3U)>)> self) -> Vector3s
        __init__(std::vector<(RMF::Vector<(3U)>)> self, Vector3s arg2) -> Vector3s
        __init__(std::vector<(RMF::Vector<(3U)>)> self, std::vector< RMF::Vector< 3U > >::size_type size) -> Vector3s
        __init__(std::vector<(RMF::Vector<(3U)>)> self, std::vector< RMF::Vector< 3U > >::size_type size, Vector3 value) -> Vector3s
        """
        this = _RMF.new_Vector3s(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Vector3s self, Vector3 x)"""
        return _RMF.Vector3s_push_back(self, x)


    def front(self):
        """front(Vector3s self) -> Vector3"""
        return _RMF.Vector3s_front(self)


    def back(self):
        """back(Vector3s self) -> Vector3"""
        return _RMF.Vector3s_back(self)


    def assign(self, n, x):
        """assign(Vector3s self, std::vector< RMF::Vector< 3U > >::size_type n, Vector3 x)"""
        return _RMF.Vector3s_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Vector3s self, std::vector< RMF::Vector< 3U > >::size_type new_size)
        resize(Vector3s self, std::vector< RMF::Vector< 3U > >::size_type new_size, Vector3 x)
        """
        return _RMF.Vector3s_resize(self, *args)


    def insert(self, *args):
        """
        insert(Vector3s self, std::vector< RMF::Vector< 3U > >::iterator pos, Vector3 x) -> std::vector< RMF::Vector< 3U > >::iterator
        insert(Vector3s self, std::vector< RMF::Vector< 3U > >::iterator pos, std::vector< RMF::Vector< 3U > >::size_type n, Vector3 x)
        """
        return _RMF.Vector3s_insert(self, *args)


    def reserve(self, n):
        """reserve(Vector3s self, std::vector< RMF::Vector< 3U > >::size_type n)"""
        return _RMF.Vector3s_reserve(self, n)


    def capacity(self):
        """capacity(Vector3s self) -> std::vector< RMF::Vector< 3U > >::size_type"""
        return _RMF.Vector3s_capacity(self)


    def __str__(self):
        """__str__(Vector3s self) -> std::string"""
        return _RMF.Vector3s___str__(self)


    def __repr__(self):
        """__repr__(Vector3s self) -> std::string"""
        return _RMF.Vector3s___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector3s
    __del__ = lambda self: None
Vector3s_swigregister = _RMF.Vector3s_swigregister
Vector3s_swigregister(Vector3s)

class Vector4s(_object):
    """Proxy of C++ std::vector<(RMF::Vector<(4U)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector4s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector4s, name)

    def iterator(self):
        """iterator(Vector4s self) -> RMF_SwigPyIterator"""
        return _RMF.Vector4s_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Vector4s self) -> bool"""
        return _RMF.Vector4s___nonzero__(self)


    def __bool__(self):
        """__bool__(Vector4s self) -> bool"""
        return _RMF.Vector4s___bool__(self)


    def __len__(self):
        """__len__(Vector4s self) -> std::vector< RMF::Vector< 4U > >::size_type"""
        return _RMF.Vector4s___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i, std::vector< RMF::Vector< 4U > >::difference_type j) -> Vector4s"""
        return _RMF.Vector4s___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i, std::vector< RMF::Vector< 4U > >::difference_type j)
        __setslice__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i, std::vector< RMF::Vector< 4U > >::difference_type j, Vector4s v)
        """
        return _RMF.Vector4s___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i, std::vector< RMF::Vector< 4U > >::difference_type j)"""
        return _RMF.Vector4s___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i)
        __delitem__(Vector4s self, PySliceObject * slice)
        """
        return _RMF.Vector4s___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Vector4s self, PySliceObject * slice) -> Vector4s
        __getitem__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i) -> Vector4
        """
        return _RMF.Vector4s___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Vector4s self, PySliceObject * slice, Vector4s v)
        __setitem__(Vector4s self, PySliceObject * slice)
        __setitem__(Vector4s self, std::vector< RMF::Vector< 4U > >::difference_type i, Vector4 x)
        """
        return _RMF.Vector4s___setitem__(self, *args)


    def pop(self):
        """pop(Vector4s self) -> Vector4"""
        return _RMF.Vector4s_pop(self)


    def append(self, x):
        """append(Vector4s self, Vector4 x)"""
        return _RMF.Vector4s_append(self, x)


    def empty(self):
        """empty(Vector4s self) -> bool"""
        return _RMF.Vector4s_empty(self)


    def size(self):
        """size(Vector4s self) -> std::vector< RMF::Vector< 4U > >::size_type"""
        return _RMF.Vector4s_size(self)


    def swap(self, v):
        """swap(Vector4s self, Vector4s v)"""
        return _RMF.Vector4s_swap(self, v)


    def begin(self):
        """begin(Vector4s self) -> std::vector< RMF::Vector< 4U > >::iterator"""
        return _RMF.Vector4s_begin(self)


    def end(self):
        """end(Vector4s self) -> std::vector< RMF::Vector< 4U > >::iterator"""
        return _RMF.Vector4s_end(self)


    def rbegin(self):
        """rbegin(Vector4s self) -> std::vector< RMF::Vector< 4U > >::reverse_iterator"""
        return _RMF.Vector4s_rbegin(self)


    def rend(self):
        """rend(Vector4s self) -> std::vector< RMF::Vector< 4U > >::reverse_iterator"""
        return _RMF.Vector4s_rend(self)


    def clear(self):
        """clear(Vector4s self)"""
        return _RMF.Vector4s_clear(self)


    def get_allocator(self):
        """get_allocator(Vector4s self) -> std::vector< RMF::Vector< 4U > >::allocator_type"""
        return _RMF.Vector4s_get_allocator(self)


    def pop_back(self):
        """pop_back(Vector4s self)"""
        return _RMF.Vector4s_pop_back(self)


    def erase(self, *args):
        """
        erase(Vector4s self, std::vector< RMF::Vector< 4U > >::iterator pos) -> std::vector< RMF::Vector< 4U > >::iterator
        erase(Vector4s self, std::vector< RMF::Vector< 4U > >::iterator first, std::vector< RMF::Vector< 4U > >::iterator last) -> std::vector< RMF::Vector< 4U > >::iterator
        """
        return _RMF.Vector4s_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::Vector<(4U)>)> self) -> Vector4s
        __init__(std::vector<(RMF::Vector<(4U)>)> self, Vector4s arg2) -> Vector4s
        __init__(std::vector<(RMF::Vector<(4U)>)> self, std::vector< RMF::Vector< 4U > >::size_type size) -> Vector4s
        __init__(std::vector<(RMF::Vector<(4U)>)> self, std::vector< RMF::Vector< 4U > >::size_type size, Vector4 value) -> Vector4s
        """
        this = _RMF.new_Vector4s(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Vector4s self, Vector4 x)"""
        return _RMF.Vector4s_push_back(self, x)


    def front(self):
        """front(Vector4s self) -> Vector4"""
        return _RMF.Vector4s_front(self)


    def back(self):
        """back(Vector4s self) -> Vector4"""
        return _RMF.Vector4s_back(self)


    def assign(self, n, x):
        """assign(Vector4s self, std::vector< RMF::Vector< 4U > >::size_type n, Vector4 x)"""
        return _RMF.Vector4s_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Vector4s self, std::vector< RMF::Vector< 4U > >::size_type new_size)
        resize(Vector4s self, std::vector< RMF::Vector< 4U > >::size_type new_size, Vector4 x)
        """
        return _RMF.Vector4s_resize(self, *args)


    def insert(self, *args):
        """
        insert(Vector4s self, std::vector< RMF::Vector< 4U > >::iterator pos, Vector4 x) -> std::vector< RMF::Vector< 4U > >::iterator
        insert(Vector4s self, std::vector< RMF::Vector< 4U > >::iterator pos, std::vector< RMF::Vector< 4U > >::size_type n, Vector4 x)
        """
        return _RMF.Vector4s_insert(self, *args)


    def reserve(self, n):
        """reserve(Vector4s self, std::vector< RMF::Vector< 4U > >::size_type n)"""
        return _RMF.Vector4s_reserve(self, n)


    def capacity(self):
        """capacity(Vector4s self) -> std::vector< RMF::Vector< 4U > >::size_type"""
        return _RMF.Vector4s_capacity(self)


    def __str__(self):
        """__str__(Vector4s self) -> std::string"""
        return _RMF.Vector4s___str__(self)


    def __repr__(self):
        """__repr__(Vector4s self) -> std::string"""
        return _RMF.Vector4s___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector4s
    __del__ = lambda self: None
Vector4s_swigregister = _RMF.Vector4s_swigregister
Vector4s_swigregister(Vector4s)

class IntsList(_object):
    """Proxy of C++ std::vector<(std::vector<(int)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntsList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntsList, name)

    def iterator(self):
        """iterator(IntsList self) -> RMF_SwigPyIterator"""
        return _RMF.IntsList_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(IntsList self) -> bool"""
        return _RMF.IntsList___nonzero__(self)


    def __bool__(self):
        """__bool__(IntsList self) -> bool"""
        return _RMF.IntsList___bool__(self)


    def __len__(self):
        """__len__(IntsList self) -> std::vector< std::vector< int > >::size_type"""
        return _RMF.IntsList___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(IntsList self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j) -> IntsList"""
        return _RMF.IntsList___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(IntsList self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)
        __setslice__(IntsList self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j, IntsList v)
        """
        return _RMF.IntsList___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(IntsList self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)"""
        return _RMF.IntsList___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(IntsList self, std::vector< std::vector< int > >::difference_type i)
        __delitem__(IntsList self, PySliceObject * slice)
        """
        return _RMF.IntsList___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(IntsList self, PySliceObject * slice) -> IntsList
        __getitem__(IntsList self, std::vector< std::vector< int > >::difference_type i) -> Ints
        """
        return _RMF.IntsList___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(IntsList self, PySliceObject * slice, IntsList v)
        __setitem__(IntsList self, PySliceObject * slice)
        __setitem__(IntsList self, std::vector< std::vector< int > >::difference_type i, Ints x)
        """
        return _RMF.IntsList___setitem__(self, *args)


    def pop(self):
        """pop(IntsList self) -> Ints"""
        return _RMF.IntsList_pop(self)


    def append(self, x):
        """append(IntsList self, Ints x)"""
        return _RMF.IntsList_append(self, x)


    def empty(self):
        """empty(IntsList self) -> bool"""
        return _RMF.IntsList_empty(self)


    def size(self):
        """size(IntsList self) -> std::vector< std::vector< int > >::size_type"""
        return _RMF.IntsList_size(self)


    def swap(self, v):
        """swap(IntsList self, IntsList v)"""
        return _RMF.IntsList_swap(self, v)


    def begin(self):
        """begin(IntsList self) -> std::vector< std::vector< int > >::iterator"""
        return _RMF.IntsList_begin(self)


    def end(self):
        """end(IntsList self) -> std::vector< std::vector< int > >::iterator"""
        return _RMF.IntsList_end(self)


    def rbegin(self):
        """rbegin(IntsList self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _RMF.IntsList_rbegin(self)


    def rend(self):
        """rend(IntsList self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _RMF.IntsList_rend(self)


    def clear(self):
        """clear(IntsList self)"""
        return _RMF.IntsList_clear(self)


    def get_allocator(self):
        """get_allocator(IntsList self) -> std::vector< std::vector< int > >::allocator_type"""
        return _RMF.IntsList_get_allocator(self)


    def pop_back(self):
        """pop_back(IntsList self)"""
        return _RMF.IntsList_pop_back(self)


    def erase(self, *args):
        """
        erase(IntsList self, std::vector< std::vector< int > >::iterator pos) -> std::vector< std::vector< int > >::iterator
        erase(IntsList self, std::vector< std::vector< int > >::iterator first, std::vector< std::vector< int > >::iterator last) -> std::vector< std::vector< int > >::iterator
        """
        return _RMF.IntsList_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(int)>)> self) -> IntsList
        __init__(std::vector<(std::vector<(int)>)> self, IntsList arg2) -> IntsList
        __init__(std::vector<(std::vector<(int)>)> self, std::vector< std::vector< int > >::size_type size) -> IntsList
        __init__(std::vector<(std::vector<(int)>)> self, std::vector< std::vector< int > >::size_type size, Ints value) -> IntsList
        """
        this = _RMF.new_IntsList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(IntsList self, Ints x)"""
        return _RMF.IntsList_push_back(self, x)


    def front(self):
        """front(IntsList self) -> Ints"""
        return _RMF.IntsList_front(self)


    def back(self):
        """back(IntsList self) -> Ints"""
        return _RMF.IntsList_back(self)


    def assign(self, n, x):
        """assign(IntsList self, std::vector< std::vector< int > >::size_type n, Ints x)"""
        return _RMF.IntsList_assign(self, n, x)


    def resize(self, *args):
        """
        resize(IntsList self, std::vector< std::vector< int > >::size_type new_size)
        resize(IntsList self, std::vector< std::vector< int > >::size_type new_size, Ints x)
        """
        return _RMF.IntsList_resize(self, *args)


    def insert(self, *args):
        """
        insert(IntsList self, std::vector< std::vector< int > >::iterator pos, Ints x) -> std::vector< std::vector< int > >::iterator
        insert(IntsList self, std::vector< std::vector< int > >::iterator pos, std::vector< std::vector< int > >::size_type n, Ints x)
        """
        return _RMF.IntsList_insert(self, *args)


    def reserve(self, n):
        """reserve(IntsList self, std::vector< std::vector< int > >::size_type n)"""
        return _RMF.IntsList_reserve(self, n)


    def capacity(self):
        """capacity(IntsList self) -> std::vector< std::vector< int > >::size_type"""
        return _RMF.IntsList_capacity(self)


    def __str__(self):
        """__str__(IntsList self) -> std::string"""
        return _RMF.IntsList___str__(self)


    def __repr__(self):
        """__repr__(IntsList self) -> std::string"""
        return _RMF.IntsList___repr__(self)

    __swig_destroy__ = _RMF.delete_IntsList
    __del__ = lambda self: None
IntsList_swigregister = _RMF.IntsList_swigregister
IntsList_swigregister(IntsList)

class FloatsList(_object):
    """Proxy of C++ std::vector<(std::vector<(float)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatsList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatsList, name)

    def iterator(self):
        """iterator(FloatsList self) -> RMF_SwigPyIterator"""
        return _RMF.FloatsList_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(FloatsList self) -> bool"""
        return _RMF.FloatsList___nonzero__(self)


    def __bool__(self):
        """__bool__(FloatsList self) -> bool"""
        return _RMF.FloatsList___bool__(self)


    def __len__(self):
        """__len__(FloatsList self) -> std::vector< std::vector< float > >::size_type"""
        return _RMF.FloatsList___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(FloatsList self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j) -> FloatsList"""
        return _RMF.FloatsList___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(FloatsList self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)
        __setslice__(FloatsList self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j, FloatsList v)
        """
        return _RMF.FloatsList___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(FloatsList self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)"""
        return _RMF.FloatsList___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(FloatsList self, std::vector< std::vector< float > >::difference_type i)
        __delitem__(FloatsList self, PySliceObject * slice)
        """
        return _RMF.FloatsList___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(FloatsList self, PySliceObject * slice) -> FloatsList
        __getitem__(FloatsList self, std::vector< std::vector< float > >::difference_type i) -> Floats
        """
        return _RMF.FloatsList___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(FloatsList self, PySliceObject * slice, FloatsList v)
        __setitem__(FloatsList self, PySliceObject * slice)
        __setitem__(FloatsList self, std::vector< std::vector< float > >::difference_type i, Floats x)
        """
        return _RMF.FloatsList___setitem__(self, *args)


    def pop(self):
        """pop(FloatsList self) -> Floats"""
        return _RMF.FloatsList_pop(self)


    def append(self, x):
        """append(FloatsList self, Floats x)"""
        return _RMF.FloatsList_append(self, x)


    def empty(self):
        """empty(FloatsList self) -> bool"""
        return _RMF.FloatsList_empty(self)


    def size(self):
        """size(FloatsList self) -> std::vector< std::vector< float > >::size_type"""
        return _RMF.FloatsList_size(self)


    def swap(self, v):
        """swap(FloatsList self, FloatsList v)"""
        return _RMF.FloatsList_swap(self, v)


    def begin(self):
        """begin(FloatsList self) -> std::vector< std::vector< float > >::iterator"""
        return _RMF.FloatsList_begin(self)


    def end(self):
        """end(FloatsList self) -> std::vector< std::vector< float > >::iterator"""
        return _RMF.FloatsList_end(self)


    def rbegin(self):
        """rbegin(FloatsList self) -> std::vector< std::vector< float > >::reverse_iterator"""
        return _RMF.FloatsList_rbegin(self)


    def rend(self):
        """rend(FloatsList self) -> std::vector< std::vector< float > >::reverse_iterator"""
        return _RMF.FloatsList_rend(self)


    def clear(self):
        """clear(FloatsList self)"""
        return _RMF.FloatsList_clear(self)


    def get_allocator(self):
        """get_allocator(FloatsList self) -> std::vector< std::vector< float > >::allocator_type"""
        return _RMF.FloatsList_get_allocator(self)


    def pop_back(self):
        """pop_back(FloatsList self)"""
        return _RMF.FloatsList_pop_back(self)


    def erase(self, *args):
        """
        erase(FloatsList self, std::vector< std::vector< float > >::iterator pos) -> std::vector< std::vector< float > >::iterator
        erase(FloatsList self, std::vector< std::vector< float > >::iterator first, std::vector< std::vector< float > >::iterator last) -> std::vector< std::vector< float > >::iterator
        """
        return _RMF.FloatsList_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(float)>)> self) -> FloatsList
        __init__(std::vector<(std::vector<(float)>)> self, FloatsList arg2) -> FloatsList
        __init__(std::vector<(std::vector<(float)>)> self, std::vector< std::vector< float > >::size_type size) -> FloatsList
        __init__(std::vector<(std::vector<(float)>)> self, std::vector< std::vector< float > >::size_type size, Floats value) -> FloatsList
        """
        this = _RMF.new_FloatsList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(FloatsList self, Floats x)"""
        return _RMF.FloatsList_push_back(self, x)


    def front(self):
        """front(FloatsList self) -> Floats"""
        return _RMF.FloatsList_front(self)


    def back(self):
        """back(FloatsList self) -> Floats"""
        return _RMF.FloatsList_back(self)


    def assign(self, n, x):
        """assign(FloatsList self, std::vector< std::vector< float > >::size_type n, Floats x)"""
        return _RMF.FloatsList_assign(self, n, x)


    def resize(self, *args):
        """
        resize(FloatsList self, std::vector< std::vector< float > >::size_type new_size)
        resize(FloatsList self, std::vector< std::vector< float > >::size_type new_size, Floats x)
        """
        return _RMF.FloatsList_resize(self, *args)


    def insert(self, *args):
        """
        insert(FloatsList self, std::vector< std::vector< float > >::iterator pos, Floats x) -> std::vector< std::vector< float > >::iterator
        insert(FloatsList self, std::vector< std::vector< float > >::iterator pos, std::vector< std::vector< float > >::size_type n, Floats x)
        """
        return _RMF.FloatsList_insert(self, *args)


    def reserve(self, n):
        """reserve(FloatsList self, std::vector< std::vector< float > >::size_type n)"""
        return _RMF.FloatsList_reserve(self, n)


    def capacity(self):
        """capacity(FloatsList self) -> std::vector< std::vector< float > >::size_type"""
        return _RMF.FloatsList_capacity(self)


    def __str__(self):
        """__str__(FloatsList self) -> std::string"""
        return _RMF.FloatsList___str__(self)


    def __repr__(self):
        """__repr__(FloatsList self) -> std::string"""
        return _RMF.FloatsList___repr__(self)

    __swig_destroy__ = _RMF.delete_FloatsList
    __del__ = lambda self: None
FloatsList_swigregister = _RMF.FloatsList_swigregister
FloatsList_swigregister(FloatsList)

class StringsList(_object):
    """Proxy of C++ std::vector<(std::vector<(std::string)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringsList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringsList, name)

    def iterator(self):
        """iterator(StringsList self) -> RMF_SwigPyIterator"""
        return _RMF.StringsList_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(StringsList self) -> bool"""
        return _RMF.StringsList___nonzero__(self)


    def __bool__(self):
        """__bool__(StringsList self) -> bool"""
        return _RMF.StringsList___bool__(self)


    def __len__(self):
        """__len__(StringsList self) -> std::vector< std::vector< std::string > >::size_type"""
        return _RMF.StringsList___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(StringsList self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j) -> StringsList"""
        return _RMF.StringsList___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(StringsList self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j)
        __setslice__(StringsList self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j, StringsList v)
        """
        return _RMF.StringsList___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(StringsList self, std::vector< std::vector< std::string > >::difference_type i, std::vector< std::vector< std::string > >::difference_type j)"""
        return _RMF.StringsList___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(StringsList self, std::vector< std::vector< std::string > >::difference_type i)
        __delitem__(StringsList self, PySliceObject * slice)
        """
        return _RMF.StringsList___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(StringsList self, PySliceObject * slice) -> StringsList
        __getitem__(StringsList self, std::vector< std::vector< std::string > >::difference_type i) -> Strings
        """
        return _RMF.StringsList___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(StringsList self, PySliceObject * slice, StringsList v)
        __setitem__(StringsList self, PySliceObject * slice)
        __setitem__(StringsList self, std::vector< std::vector< std::string > >::difference_type i, Strings x)
        """
        return _RMF.StringsList___setitem__(self, *args)


    def pop(self):
        """pop(StringsList self) -> Strings"""
        return _RMF.StringsList_pop(self)


    def append(self, x):
        """append(StringsList self, Strings x)"""
        return _RMF.StringsList_append(self, x)


    def empty(self):
        """empty(StringsList self) -> bool"""
        return _RMF.StringsList_empty(self)


    def size(self):
        """size(StringsList self) -> std::vector< std::vector< std::string > >::size_type"""
        return _RMF.StringsList_size(self)


    def swap(self, v):
        """swap(StringsList self, StringsList v)"""
        return _RMF.StringsList_swap(self, v)


    def begin(self):
        """begin(StringsList self) -> std::vector< std::vector< std::string > >::iterator"""
        return _RMF.StringsList_begin(self)


    def end(self):
        """end(StringsList self) -> std::vector< std::vector< std::string > >::iterator"""
        return _RMF.StringsList_end(self)


    def rbegin(self):
        """rbegin(StringsList self) -> std::vector< std::vector< std::string > >::reverse_iterator"""
        return _RMF.StringsList_rbegin(self)


    def rend(self):
        """rend(StringsList self) -> std::vector< std::vector< std::string > >::reverse_iterator"""
        return _RMF.StringsList_rend(self)


    def clear(self):
        """clear(StringsList self)"""
        return _RMF.StringsList_clear(self)


    def get_allocator(self):
        """get_allocator(StringsList self) -> std::vector< std::vector< std::string > >::allocator_type"""
        return _RMF.StringsList_get_allocator(self)


    def pop_back(self):
        """pop_back(StringsList self)"""
        return _RMF.StringsList_pop_back(self)


    def erase(self, *args):
        """
        erase(StringsList self, std::vector< std::vector< std::string > >::iterator pos) -> std::vector< std::vector< std::string > >::iterator
        erase(StringsList self, std::vector< std::vector< std::string > >::iterator first, std::vector< std::vector< std::string > >::iterator last) -> std::vector< std::vector< std::string > >::iterator
        """
        return _RMF.StringsList_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(std::string)>)> self) -> StringsList
        __init__(std::vector<(std::vector<(std::string)>)> self, StringsList arg2) -> StringsList
        __init__(std::vector<(std::vector<(std::string)>)> self, std::vector< std::vector< std::string > >::size_type size) -> StringsList
        __init__(std::vector<(std::vector<(std::string)>)> self, std::vector< std::vector< std::string > >::size_type size, Strings value) -> StringsList
        """
        this = _RMF.new_StringsList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(StringsList self, Strings x)"""
        return _RMF.StringsList_push_back(self, x)


    def front(self):
        """front(StringsList self) -> Strings"""
        return _RMF.StringsList_front(self)


    def back(self):
        """back(StringsList self) -> Strings"""
        return _RMF.StringsList_back(self)


    def assign(self, n, x):
        """assign(StringsList self, std::vector< std::vector< std::string > >::size_type n, Strings x)"""
        return _RMF.StringsList_assign(self, n, x)


    def resize(self, *args):
        """
        resize(StringsList self, std::vector< std::vector< std::string > >::size_type new_size)
        resize(StringsList self, std::vector< std::vector< std::string > >::size_type new_size, Strings x)
        """
        return _RMF.StringsList_resize(self, *args)


    def insert(self, *args):
        """
        insert(StringsList self, std::vector< std::vector< std::string > >::iterator pos, Strings x) -> std::vector< std::vector< std::string > >::iterator
        insert(StringsList self, std::vector< std::vector< std::string > >::iterator pos, std::vector< std::vector< std::string > >::size_type n, Strings x)
        """
        return _RMF.StringsList_insert(self, *args)


    def reserve(self, n):
        """reserve(StringsList self, std::vector< std::vector< std::string > >::size_type n)"""
        return _RMF.StringsList_reserve(self, n)


    def capacity(self):
        """capacity(StringsList self) -> std::vector< std::vector< std::string > >::size_type"""
        return _RMF.StringsList_capacity(self)


    def __str__(self):
        """__str__(StringsList self) -> std::string"""
        return _RMF.StringsList___str__(self)


    def __repr__(self):
        """__repr__(StringsList self) -> std::string"""
        return _RMF.StringsList___repr__(self)

    __swig_destroy__ = _RMF.delete_StringsList
    __del__ = lambda self: None
StringsList_swigregister = _RMF.StringsList_swigregister
StringsList_swigregister(StringsList)

class Vector3sList(_object):
    """Proxy of C++ std::vector<(std::vector<(RMF::Vector<(3U)>)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3sList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3sList, name)

    def iterator(self):
        """iterator(Vector3sList self) -> RMF_SwigPyIterator"""
        return _RMF.Vector3sList_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Vector3sList self) -> bool"""
        return _RMF.Vector3sList___nonzero__(self)


    def __bool__(self):
        """__bool__(Vector3sList self) -> bool"""
        return _RMF.Vector3sList___bool__(self)


    def __len__(self):
        """__len__(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::size_type"""
        return _RMF.Vector3sList___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type j) -> Vector3sList"""
        return _RMF.Vector3sList___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type j)
        __setslice__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type j, Vector3sList v)
        """
        return _RMF.Vector3sList___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type j)"""
        return _RMF.Vector3sList___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i)
        __delitem__(Vector3sList self, PySliceObject * slice)
        """
        return _RMF.Vector3sList___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Vector3sList self, PySliceObject * slice) -> Vector3sList
        __getitem__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i) -> Vector3s
        """
        return _RMF.Vector3sList___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Vector3sList self, PySliceObject * slice, Vector3sList v)
        __setitem__(Vector3sList self, PySliceObject * slice)
        __setitem__(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::difference_type i, Vector3s x)
        """
        return _RMF.Vector3sList___setitem__(self, *args)


    def pop(self):
        """pop(Vector3sList self) -> Vector3s"""
        return _RMF.Vector3sList_pop(self)


    def append(self, x):
        """append(Vector3sList self, Vector3s x)"""
        return _RMF.Vector3sList_append(self, x)


    def empty(self):
        """empty(Vector3sList self) -> bool"""
        return _RMF.Vector3sList_empty(self)


    def size(self):
        """size(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::size_type"""
        return _RMF.Vector3sList_size(self)


    def swap(self, v):
        """swap(Vector3sList self, Vector3sList v)"""
        return _RMF.Vector3sList_swap(self, v)


    def begin(self):
        """begin(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::iterator"""
        return _RMF.Vector3sList_begin(self)


    def end(self):
        """end(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::iterator"""
        return _RMF.Vector3sList_end(self)


    def rbegin(self):
        """rbegin(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::reverse_iterator"""
        return _RMF.Vector3sList_rbegin(self)


    def rend(self):
        """rend(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::reverse_iterator"""
        return _RMF.Vector3sList_rend(self)


    def clear(self):
        """clear(Vector3sList self)"""
        return _RMF.Vector3sList_clear(self)


    def get_allocator(self):
        """get_allocator(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::allocator_type"""
        return _RMF.Vector3sList_get_allocator(self)


    def pop_back(self):
        """pop_back(Vector3sList self)"""
        return _RMF.Vector3sList_pop_back(self)


    def erase(self, *args):
        """
        erase(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::iterator pos) -> std::vector< std::vector< RMF::Vector< 3U > > >::iterator
        erase(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::iterator first, std::vector< std::vector< RMF::Vector< 3U > > >::iterator last) -> std::vector< std::vector< RMF::Vector< 3U > > >::iterator
        """
        return _RMF.Vector3sList_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(RMF::Vector<(3U)>)>)> self) -> Vector3sList
        __init__(std::vector<(std::vector<(RMF::Vector<(3U)>)>)> self, Vector3sList arg2) -> Vector3sList
        __init__(std::vector<(std::vector<(RMF::Vector<(3U)>)>)> self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type size) -> Vector3sList
        __init__(std::vector<(std::vector<(RMF::Vector<(3U)>)>)> self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type size, Vector3s value) -> Vector3sList
        """
        this = _RMF.new_Vector3sList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Vector3sList self, Vector3s x)"""
        return _RMF.Vector3sList_push_back(self, x)


    def front(self):
        """front(Vector3sList self) -> Vector3s"""
        return _RMF.Vector3sList_front(self)


    def back(self):
        """back(Vector3sList self) -> Vector3s"""
        return _RMF.Vector3sList_back(self)


    def assign(self, n, x):
        """assign(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type n, Vector3s x)"""
        return _RMF.Vector3sList_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type new_size)
        resize(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type new_size, Vector3s x)
        """
        return _RMF.Vector3sList_resize(self, *args)


    def insert(self, *args):
        """
        insert(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::iterator pos, Vector3s x) -> std::vector< std::vector< RMF::Vector< 3U > > >::iterator
        insert(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::iterator pos, std::vector< std::vector< RMF::Vector< 3U > > >::size_type n, Vector3s x)
        """
        return _RMF.Vector3sList_insert(self, *args)


    def reserve(self, n):
        """reserve(Vector3sList self, std::vector< std::vector< RMF::Vector< 3U > > >::size_type n)"""
        return _RMF.Vector3sList_reserve(self, n)


    def capacity(self):
        """capacity(Vector3sList self) -> std::vector< std::vector< RMF::Vector< 3U > > >::size_type"""
        return _RMF.Vector3sList_capacity(self)


    def __str__(self):
        """__str__(Vector3sList self) -> std::string"""
        return _RMF.Vector3sList___str__(self)


    def __repr__(self):
        """__repr__(Vector3sList self) -> std::string"""
        return _RMF.Vector3sList___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector3sList
    __del__ = lambda self: None
Vector3sList_swigregister = _RMF.Vector3sList_swigregister
Vector3sList_swigregister(Vector3sList)

class IntTag(_object):
    """Proxy of C++ RMF::IntTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntTag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::IntTag self) -> IntTag"""
        this = _RMF.new_IntTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_IntTag
    __del__ = lambda self: None
IntTag_swigregister = _RMF.IntTag_swigregister
IntTag_swigregister(IntTag)

class FloatTag(_object):
    """Proxy of C++ RMF::FloatTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatTag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::FloatTag self) -> FloatTag"""
        this = _RMF.new_FloatTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_FloatTag
    __del__ = lambda self: None
FloatTag_swigregister = _RMF.FloatTag_swigregister
FloatTag_swigregister(FloatTag)

class StringTag(_object):
    """Proxy of C++ RMF::StringTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringTag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::StringTag self) -> StringTag"""
        this = _RMF.new_StringTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_StringTag
    __del__ = lambda self: None
StringTag_swigregister = _RMF.StringTag_swigregister
StringTag_swigregister(StringTag)

class Vector3Tag(_object):
    """Proxy of C++ RMF::Vector3Tag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Tag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Tag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::Vector3Tag self) -> Vector3Tag"""
        this = _RMF.new_Vector3Tag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_Vector3Tag
    __del__ = lambda self: None
Vector3Tag_swigregister = _RMF.Vector3Tag_swigregister
Vector3Tag_swigregister(Vector3Tag)

class Vector4Tag(_object):
    """Proxy of C++ RMF::Vector4Tag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector4Tag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector4Tag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::Vector4Tag self) -> Vector4Tag"""
        this = _RMF.new_Vector4Tag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_Vector4Tag
    __del__ = lambda self: None
Vector4Tag_swigregister = _RMF.Vector4Tag_swigregister
Vector4Tag_swigregister(Vector4Tag)

class IntsTag(_object):
    """Proxy of C++ RMF::IntsTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntsTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntsTag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::IntsTag self) -> IntsTag"""
        this = _RMF.new_IntsTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_IntsTag
    __del__ = lambda self: None
IntsTag_swigregister = _RMF.IntsTag_swigregister
IntsTag_swigregister(IntsTag)

class FloatsTag(_object):
    """Proxy of C++ RMF::FloatsTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatsTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatsTag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::FloatsTag self) -> FloatsTag"""
        this = _RMF.new_FloatsTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_FloatsTag
    __del__ = lambda self: None
FloatsTag_swigregister = _RMF.FloatsTag_swigregister
FloatsTag_swigregister(FloatsTag)

class StringsTag(_object):
    """Proxy of C++ RMF::StringsTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringsTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringsTag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::StringsTag self) -> StringsTag"""
        this = _RMF.new_StringsTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_StringsTag
    __del__ = lambda self: None
StringsTag_swigregister = _RMF.StringsTag_swigregister
StringsTag_swigregister(StringsTag)

class Vector3sTag(_object):
    """Proxy of C++ RMF::Vector3sTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3sTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3sTag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::Vector3sTag self) -> Vector3sTag"""
        this = _RMF.new_Vector3sTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_Vector3sTag
    __del__ = lambda self: None
Vector3sTag_swigregister = _RMF.Vector3sTag_swigregister
Vector3sTag_swigregister(Vector3sTag)

class Vector4sTag(_object):
    """Proxy of C++ RMF::Vector4sTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector4sTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector4sTag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::Vector4sTag self) -> Vector4sTag"""
        this = _RMF.new_Vector4sTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_Vector4sTag
    __del__ = lambda self: None
Vector4sTag_swigregister = _RMF.Vector4sTag_swigregister
Vector4sTag_swigregister(Vector4sTag)


int_tag = IntTag()
float_tag = FloatTag()
string_tag = StringTag()
vector3_tag = Vector3Tag()
vector4_tag = Vector4Tag()
ints_tag = IntsTag()
floats_tag = FloatsTag()
strings_tag = StringsTag()
vector3s_tag = Vector3sTag()
#vector4s_tag = Vector4sTag()
_tag_list = [int_tag, float_tag, string_tag, vector3_tag, vector4_tag,ints_tag, floats_tag, strings_tag, vector3s_tag]

class IntKey(_object):
    """Proxy of C++ RMF::ID<(RMF::IntTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntKey, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::IntTag)> self, unsigned int i) -> IntKey
        __init__(RMF::ID<(RMF::IntTag)> self) -> IntKey
        """
        this = _RMF.new_IntKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(IntKey self) -> unsigned int"""
        return _RMF.IntKey_get_index(self)


    def __eq__(self, o):
        """__eq__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___eq__(self, o)


    def __ne__(self, o):
        """__ne__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___ne__(self, o)


    def __lt__(self, o):
        """__lt__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___lt__(self, o)


    def __gt__(self, o):
        """__gt__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___gt__(self, o)


    def __ge__(self, o):
        """__ge__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___ge__(self, o)


    def __le__(self, o):
        """__le__(IntKey self, IntKey o) -> bool"""
        return _RMF.IntKey___le__(self, o)


    def __hash__(self):
        """__hash__(IntKey self) -> std::size_t"""
        return _RMF.IntKey___hash__(self)


    def __str__(self):
        """__str__(IntKey self) -> std::string"""
        return _RMF.IntKey___str__(self)


    def __repr__(self):
        """__repr__(IntKey self) -> std::string"""
        return _RMF.IntKey___repr__(self)

    __swig_destroy__ = _RMF.delete_IntKey
    __del__ = lambda self: None
IntKey_swigregister = _RMF.IntKey_swigregister
IntKey_swigregister(IntKey)

class FloatKey(_object):
    """Proxy of C++ RMF::ID<(RMF::FloatTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatKey, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::FloatTag)> self, unsigned int i) -> FloatKey
        __init__(RMF::ID<(RMF::FloatTag)> self) -> FloatKey
        """
        this = _RMF.new_FloatKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(FloatKey self) -> unsigned int"""
        return _RMF.FloatKey_get_index(self)


    def __eq__(self, o):
        """__eq__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___eq__(self, o)


    def __ne__(self, o):
        """__ne__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___ne__(self, o)


    def __lt__(self, o):
        """__lt__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___lt__(self, o)


    def __gt__(self, o):
        """__gt__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___gt__(self, o)


    def __ge__(self, o):
        """__ge__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___ge__(self, o)


    def __le__(self, o):
        """__le__(FloatKey self, FloatKey o) -> bool"""
        return _RMF.FloatKey___le__(self, o)


    def __hash__(self):
        """__hash__(FloatKey self) -> std::size_t"""
        return _RMF.FloatKey___hash__(self)


    def __str__(self):
        """__str__(FloatKey self) -> std::string"""
        return _RMF.FloatKey___str__(self)


    def __repr__(self):
        """__repr__(FloatKey self) -> std::string"""
        return _RMF.FloatKey___repr__(self)

    __swig_destroy__ = _RMF.delete_FloatKey
    __del__ = lambda self: None
FloatKey_swigregister = _RMF.FloatKey_swigregister
FloatKey_swigregister(FloatKey)

class StringKey(_object):
    """Proxy of C++ RMF::ID<(RMF::StringTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringKey, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::StringTag)> self, unsigned int i) -> StringKey
        __init__(RMF::ID<(RMF::StringTag)> self) -> StringKey
        """
        this = _RMF.new_StringKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(StringKey self) -> unsigned int"""
        return _RMF.StringKey_get_index(self)


    def __eq__(self, o):
        """__eq__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___eq__(self, o)


    def __ne__(self, o):
        """__ne__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___ne__(self, o)


    def __lt__(self, o):
        """__lt__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___lt__(self, o)


    def __gt__(self, o):
        """__gt__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___gt__(self, o)


    def __ge__(self, o):
        """__ge__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___ge__(self, o)


    def __le__(self, o):
        """__le__(StringKey self, StringKey o) -> bool"""
        return _RMF.StringKey___le__(self, o)


    def __hash__(self):
        """__hash__(StringKey self) -> std::size_t"""
        return _RMF.StringKey___hash__(self)


    def __str__(self):
        """__str__(StringKey self) -> std::string"""
        return _RMF.StringKey___str__(self)


    def __repr__(self):
        """__repr__(StringKey self) -> std::string"""
        return _RMF.StringKey___repr__(self)

    __swig_destroy__ = _RMF.delete_StringKey
    __del__ = lambda self: None
StringKey_swigregister = _RMF.StringKey_swigregister
StringKey_swigregister(StringKey)

class Vector3Key(_object):
    """Proxy of C++ RMF::ID<(RMF::Vector3Tag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Key, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::Vector3Tag)> self, unsigned int i) -> Vector3Key
        __init__(RMF::ID<(RMF::Vector3Tag)> self) -> Vector3Key
        """
        this = _RMF.new_Vector3Key(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(Vector3Key self) -> unsigned int"""
        return _RMF.Vector3Key_get_index(self)


    def __eq__(self, o):
        """__eq__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___eq__(self, o)


    def __ne__(self, o):
        """__ne__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___ne__(self, o)


    def __lt__(self, o):
        """__lt__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___lt__(self, o)


    def __gt__(self, o):
        """__gt__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___gt__(self, o)


    def __ge__(self, o):
        """__ge__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___ge__(self, o)


    def __le__(self, o):
        """__le__(Vector3Key self, Vector3Key o) -> bool"""
        return _RMF.Vector3Key___le__(self, o)


    def __hash__(self):
        """__hash__(Vector3Key self) -> std::size_t"""
        return _RMF.Vector3Key___hash__(self)


    def __str__(self):
        """__str__(Vector3Key self) -> std::string"""
        return _RMF.Vector3Key___str__(self)


    def __repr__(self):
        """__repr__(Vector3Key self) -> std::string"""
        return _RMF.Vector3Key___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector3Key
    __del__ = lambda self: None
Vector3Key_swigregister = _RMF.Vector3Key_swigregister
Vector3Key_swigregister(Vector3Key)

class Vector4Key(_object):
    """Proxy of C++ RMF::ID<(RMF::Vector4Tag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector4Key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector4Key, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::Vector4Tag)> self, unsigned int i) -> Vector4Key
        __init__(RMF::ID<(RMF::Vector4Tag)> self) -> Vector4Key
        """
        this = _RMF.new_Vector4Key(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(Vector4Key self) -> unsigned int"""
        return _RMF.Vector4Key_get_index(self)


    def __eq__(self, o):
        """__eq__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___eq__(self, o)


    def __ne__(self, o):
        """__ne__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___ne__(self, o)


    def __lt__(self, o):
        """__lt__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___lt__(self, o)


    def __gt__(self, o):
        """__gt__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___gt__(self, o)


    def __ge__(self, o):
        """__ge__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___ge__(self, o)


    def __le__(self, o):
        """__le__(Vector4Key self, Vector4Key o) -> bool"""
        return _RMF.Vector4Key___le__(self, o)


    def __hash__(self):
        """__hash__(Vector4Key self) -> std::size_t"""
        return _RMF.Vector4Key___hash__(self)


    def __str__(self):
        """__str__(Vector4Key self) -> std::string"""
        return _RMF.Vector4Key___str__(self)


    def __repr__(self):
        """__repr__(Vector4Key self) -> std::string"""
        return _RMF.Vector4Key___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector4Key
    __del__ = lambda self: None
Vector4Key_swigregister = _RMF.Vector4Key_swigregister
Vector4Key_swigregister(Vector4Key)

class IntsKey(_object):
    """Proxy of C++ RMF::ID<(RMF::IntsTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntsKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntsKey, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::IntsTag)> self, unsigned int i) -> IntsKey
        __init__(RMF::ID<(RMF::IntsTag)> self) -> IntsKey
        """
        this = _RMF.new_IntsKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(IntsKey self) -> unsigned int"""
        return _RMF.IntsKey_get_index(self)


    def __eq__(self, o):
        """__eq__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___eq__(self, o)


    def __ne__(self, o):
        """__ne__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___ne__(self, o)


    def __lt__(self, o):
        """__lt__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___lt__(self, o)


    def __gt__(self, o):
        """__gt__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___gt__(self, o)


    def __ge__(self, o):
        """__ge__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___ge__(self, o)


    def __le__(self, o):
        """__le__(IntsKey self, IntsKey o) -> bool"""
        return _RMF.IntsKey___le__(self, o)


    def __hash__(self):
        """__hash__(IntsKey self) -> std::size_t"""
        return _RMF.IntsKey___hash__(self)


    def __str__(self):
        """__str__(IntsKey self) -> std::string"""
        return _RMF.IntsKey___str__(self)


    def __repr__(self):
        """__repr__(IntsKey self) -> std::string"""
        return _RMF.IntsKey___repr__(self)

    __swig_destroy__ = _RMF.delete_IntsKey
    __del__ = lambda self: None
IntsKey_swigregister = _RMF.IntsKey_swigregister
IntsKey_swigregister(IntsKey)

class FloatsKey(_object):
    """Proxy of C++ RMF::ID<(RMF::FloatsTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatsKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatsKey, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::FloatsTag)> self, unsigned int i) -> FloatsKey
        __init__(RMF::ID<(RMF::FloatsTag)> self) -> FloatsKey
        """
        this = _RMF.new_FloatsKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(FloatsKey self) -> unsigned int"""
        return _RMF.FloatsKey_get_index(self)


    def __eq__(self, o):
        """__eq__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___eq__(self, o)


    def __ne__(self, o):
        """__ne__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___ne__(self, o)


    def __lt__(self, o):
        """__lt__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___lt__(self, o)


    def __gt__(self, o):
        """__gt__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___gt__(self, o)


    def __ge__(self, o):
        """__ge__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___ge__(self, o)


    def __le__(self, o):
        """__le__(FloatsKey self, FloatsKey o) -> bool"""
        return _RMF.FloatsKey___le__(self, o)


    def __hash__(self):
        """__hash__(FloatsKey self) -> std::size_t"""
        return _RMF.FloatsKey___hash__(self)


    def __str__(self):
        """__str__(FloatsKey self) -> std::string"""
        return _RMF.FloatsKey___str__(self)


    def __repr__(self):
        """__repr__(FloatsKey self) -> std::string"""
        return _RMF.FloatsKey___repr__(self)

    __swig_destroy__ = _RMF.delete_FloatsKey
    __del__ = lambda self: None
FloatsKey_swigregister = _RMF.FloatsKey_swigregister
FloatsKey_swigregister(FloatsKey)

class StringsKey(_object):
    """Proxy of C++ RMF::ID<(RMF::StringsTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringsKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringsKey, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::StringsTag)> self, unsigned int i) -> StringsKey
        __init__(RMF::ID<(RMF::StringsTag)> self) -> StringsKey
        """
        this = _RMF.new_StringsKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(StringsKey self) -> unsigned int"""
        return _RMF.StringsKey_get_index(self)


    def __eq__(self, o):
        """__eq__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___eq__(self, o)


    def __ne__(self, o):
        """__ne__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___ne__(self, o)


    def __lt__(self, o):
        """__lt__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___lt__(self, o)


    def __gt__(self, o):
        """__gt__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___gt__(self, o)


    def __ge__(self, o):
        """__ge__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___ge__(self, o)


    def __le__(self, o):
        """__le__(StringsKey self, StringsKey o) -> bool"""
        return _RMF.StringsKey___le__(self, o)


    def __hash__(self):
        """__hash__(StringsKey self) -> std::size_t"""
        return _RMF.StringsKey___hash__(self)


    def __str__(self):
        """__str__(StringsKey self) -> std::string"""
        return _RMF.StringsKey___str__(self)


    def __repr__(self):
        """__repr__(StringsKey self) -> std::string"""
        return _RMF.StringsKey___repr__(self)

    __swig_destroy__ = _RMF.delete_StringsKey
    __del__ = lambda self: None
StringsKey_swigregister = _RMF.StringsKey_swigregister
StringsKey_swigregister(StringsKey)

class Vector3sKey(_object):
    """Proxy of C++ RMF::ID<(RMF::Vector3sTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3sKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3sKey, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::Vector3sTag)> self, unsigned int i) -> Vector3sKey
        __init__(RMF::ID<(RMF::Vector3sTag)> self) -> Vector3sKey
        """
        this = _RMF.new_Vector3sKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(Vector3sKey self) -> unsigned int"""
        return _RMF.Vector3sKey_get_index(self)


    def __eq__(self, o):
        """__eq__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___eq__(self, o)


    def __ne__(self, o):
        """__ne__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___ne__(self, o)


    def __lt__(self, o):
        """__lt__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___lt__(self, o)


    def __gt__(self, o):
        """__gt__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___gt__(self, o)


    def __ge__(self, o):
        """__ge__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___ge__(self, o)


    def __le__(self, o):
        """__le__(Vector3sKey self, Vector3sKey o) -> bool"""
        return _RMF.Vector3sKey___le__(self, o)


    def __hash__(self):
        """__hash__(Vector3sKey self) -> std::size_t"""
        return _RMF.Vector3sKey___hash__(self)


    def __str__(self):
        """__str__(Vector3sKey self) -> std::string"""
        return _RMF.Vector3sKey___str__(self)


    def __repr__(self):
        """__repr__(Vector3sKey self) -> std::string"""
        return _RMF.Vector3sKey___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector3sKey
    __del__ = lambda self: None
Vector3sKey_swigregister = _RMF.Vector3sKey_swigregister
Vector3sKey_swigregister(Vector3sKey)

class Vector4sKey(_object):
    """Proxy of C++ RMF::ID<(RMF::Vector4sTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector4sKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector4sKey, name)

    def __init__(self, *args):
        """
        __init__(RMF::ID<(RMF::Vector4sTag)> self, unsigned int i) -> Vector4sKey
        __init__(RMF::ID<(RMF::Vector4sTag)> self) -> Vector4sKey
        """
        this = _RMF.new_Vector4sKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_index(self):
        """get_index(Vector4sKey self) -> unsigned int"""
        return _RMF.Vector4sKey_get_index(self)


    def __eq__(self, o):
        """__eq__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___eq__(self, o)


    def __ne__(self, o):
        """__ne__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___ne__(self, o)


    def __lt__(self, o):
        """__lt__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___lt__(self, o)


    def __gt__(self, o):
        """__gt__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___gt__(self, o)


    def __ge__(self, o):
        """__ge__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___ge__(self, o)


    def __le__(self, o):
        """__le__(Vector4sKey self, Vector4sKey o) -> bool"""
        return _RMF.Vector4sKey___le__(self, o)


    def __hash__(self):
        """__hash__(Vector4sKey self) -> std::size_t"""
        return _RMF.Vector4sKey___hash__(self)


    def __str__(self):
        """__str__(Vector4sKey self) -> std::string"""
        return _RMF.Vector4sKey___str__(self)


    def __repr__(self):
        """__repr__(Vector4sKey self) -> std::string"""
        return _RMF.Vector4sKey___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector4sKey
    __del__ = lambda self: None
Vector4sKey_swigregister = _RMF.Vector4sKey_swigregister
Vector4sKey_swigregister(Vector4sKey)

class IntKeys(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::IntTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntKeys, name)

    def iterator(self):
        """iterator(IntKeys self) -> RMF_SwigPyIterator"""
        return _RMF.IntKeys_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(IntKeys self) -> bool"""
        return _RMF.IntKeys___nonzero__(self)


    def __bool__(self):
        """__bool__(IntKeys self) -> bool"""
        return _RMF.IntKeys___bool__(self)


    def __len__(self):
        """__len__(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::size_type"""
        return _RMF.IntKeys___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i, std::vector< RMF::ID< RMF::IntTag > >::difference_type j) -> IntKeys"""
        return _RMF.IntKeys___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i, std::vector< RMF::ID< RMF::IntTag > >::difference_type j)
        __setslice__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i, std::vector< RMF::ID< RMF::IntTag > >::difference_type j, IntKeys v)
        """
        return _RMF.IntKeys___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i, std::vector< RMF::ID< RMF::IntTag > >::difference_type j)"""
        return _RMF.IntKeys___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i)
        __delitem__(IntKeys self, PySliceObject * slice)
        """
        return _RMF.IntKeys___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(IntKeys self, PySliceObject * slice) -> IntKeys
        __getitem__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i) -> IntKey
        """
        return _RMF.IntKeys___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(IntKeys self, PySliceObject * slice, IntKeys v)
        __setitem__(IntKeys self, PySliceObject * slice)
        __setitem__(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::difference_type i, IntKey x)
        """
        return _RMF.IntKeys___setitem__(self, *args)


    def pop(self):
        """pop(IntKeys self) -> IntKey"""
        return _RMF.IntKeys_pop(self)


    def append(self, x):
        """append(IntKeys self, IntKey x)"""
        return _RMF.IntKeys_append(self, x)


    def empty(self):
        """empty(IntKeys self) -> bool"""
        return _RMF.IntKeys_empty(self)


    def size(self):
        """size(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::size_type"""
        return _RMF.IntKeys_size(self)


    def swap(self, v):
        """swap(IntKeys self, IntKeys v)"""
        return _RMF.IntKeys_swap(self, v)


    def begin(self):
        """begin(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::iterator"""
        return _RMF.IntKeys_begin(self)


    def end(self):
        """end(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::iterator"""
        return _RMF.IntKeys_end(self)


    def rbegin(self):
        """rbegin(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::reverse_iterator"""
        return _RMF.IntKeys_rbegin(self)


    def rend(self):
        """rend(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::reverse_iterator"""
        return _RMF.IntKeys_rend(self)


    def clear(self):
        """clear(IntKeys self)"""
        return _RMF.IntKeys_clear(self)


    def get_allocator(self):
        """get_allocator(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::allocator_type"""
        return _RMF.IntKeys_get_allocator(self)


    def pop_back(self):
        """pop_back(IntKeys self)"""
        return _RMF.IntKeys_pop_back(self)


    def erase(self, *args):
        """
        erase(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::iterator pos) -> std::vector< RMF::ID< RMF::IntTag > >::iterator
        erase(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::iterator first, std::vector< RMF::ID< RMF::IntTag > >::iterator last) -> std::vector< RMF::ID< RMF::IntTag > >::iterator
        """
        return _RMF.IntKeys_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::IntTag)>)> self) -> IntKeys
        __init__(std::vector<(RMF::ID<(RMF::IntTag)>)> self, IntKeys arg2) -> IntKeys
        __init__(std::vector<(RMF::ID<(RMF::IntTag)>)> self, std::vector< RMF::ID< RMF::IntTag > >::size_type size) -> IntKeys
        __init__(std::vector<(RMF::ID<(RMF::IntTag)>)> self, std::vector< RMF::ID< RMF::IntTag > >::size_type size, IntKey value) -> IntKeys
        """
        this = _RMF.new_IntKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(IntKeys self, IntKey x)"""
        return _RMF.IntKeys_push_back(self, x)


    def front(self):
        """front(IntKeys self) -> IntKey"""
        return _RMF.IntKeys_front(self)


    def back(self):
        """back(IntKeys self) -> IntKey"""
        return _RMF.IntKeys_back(self)


    def assign(self, n, x):
        """assign(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::size_type n, IntKey x)"""
        return _RMF.IntKeys_assign(self, n, x)


    def resize(self, *args):
        """
        resize(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::size_type new_size)
        resize(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::size_type new_size, IntKey x)
        """
        return _RMF.IntKeys_resize(self, *args)


    def insert(self, *args):
        """
        insert(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::iterator pos, IntKey x) -> std::vector< RMF::ID< RMF::IntTag > >::iterator
        insert(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::iterator pos, std::vector< RMF::ID< RMF::IntTag > >::size_type n, IntKey x)
        """
        return _RMF.IntKeys_insert(self, *args)


    def reserve(self, n):
        """reserve(IntKeys self, std::vector< RMF::ID< RMF::IntTag > >::size_type n)"""
        return _RMF.IntKeys_reserve(self, n)


    def capacity(self):
        """capacity(IntKeys self) -> std::vector< RMF::ID< RMF::IntTag > >::size_type"""
        return _RMF.IntKeys_capacity(self)


    def __str__(self):
        """__str__(IntKeys self) -> std::string"""
        return _RMF.IntKeys___str__(self)


    def __repr__(self):
        """__repr__(IntKeys self) -> std::string"""
        return _RMF.IntKeys___repr__(self)

    __swig_destroy__ = _RMF.delete_IntKeys
    __del__ = lambda self: None
IntKeys_swigregister = _RMF.IntKeys_swigregister
IntKeys_swigregister(IntKeys)

class FloatKeys(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::FloatTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatKeys, name)

    def iterator(self):
        """iterator(FloatKeys self) -> RMF_SwigPyIterator"""
        return _RMF.FloatKeys_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(FloatKeys self) -> bool"""
        return _RMF.FloatKeys___nonzero__(self)


    def __bool__(self):
        """__bool__(FloatKeys self) -> bool"""
        return _RMF.FloatKeys___bool__(self)


    def __len__(self):
        """__len__(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::size_type"""
        return _RMF.FloatKeys___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatTag > >::difference_type j) -> FloatKeys"""
        return _RMF.FloatKeys___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatTag > >::difference_type j)
        __setslice__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatTag > >::difference_type j, FloatKeys v)
        """
        return _RMF.FloatKeys___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatTag > >::difference_type j)"""
        return _RMF.FloatKeys___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i)
        __delitem__(FloatKeys self, PySliceObject * slice)
        """
        return _RMF.FloatKeys___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(FloatKeys self, PySliceObject * slice) -> FloatKeys
        __getitem__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i) -> FloatKey
        """
        return _RMF.FloatKeys___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(FloatKeys self, PySliceObject * slice, FloatKeys v)
        __setitem__(FloatKeys self, PySliceObject * slice)
        __setitem__(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::difference_type i, FloatKey x)
        """
        return _RMF.FloatKeys___setitem__(self, *args)


    def pop(self):
        """pop(FloatKeys self) -> FloatKey"""
        return _RMF.FloatKeys_pop(self)


    def append(self, x):
        """append(FloatKeys self, FloatKey x)"""
        return _RMF.FloatKeys_append(self, x)


    def empty(self):
        """empty(FloatKeys self) -> bool"""
        return _RMF.FloatKeys_empty(self)


    def size(self):
        """size(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::size_type"""
        return _RMF.FloatKeys_size(self)


    def swap(self, v):
        """swap(FloatKeys self, FloatKeys v)"""
        return _RMF.FloatKeys_swap(self, v)


    def begin(self):
        """begin(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::iterator"""
        return _RMF.FloatKeys_begin(self)


    def end(self):
        """end(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::iterator"""
        return _RMF.FloatKeys_end(self)


    def rbegin(self):
        """rbegin(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::reverse_iterator"""
        return _RMF.FloatKeys_rbegin(self)


    def rend(self):
        """rend(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::reverse_iterator"""
        return _RMF.FloatKeys_rend(self)


    def clear(self):
        """clear(FloatKeys self)"""
        return _RMF.FloatKeys_clear(self)


    def get_allocator(self):
        """get_allocator(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::allocator_type"""
        return _RMF.FloatKeys_get_allocator(self)


    def pop_back(self):
        """pop_back(FloatKeys self)"""
        return _RMF.FloatKeys_pop_back(self)


    def erase(self, *args):
        """
        erase(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::iterator pos) -> std::vector< RMF::ID< RMF::FloatTag > >::iterator
        erase(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::iterator first, std::vector< RMF::ID< RMF::FloatTag > >::iterator last) -> std::vector< RMF::ID< RMF::FloatTag > >::iterator
        """
        return _RMF.FloatKeys_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::FloatTag)>)> self) -> FloatKeys
        __init__(std::vector<(RMF::ID<(RMF::FloatTag)>)> self, FloatKeys arg2) -> FloatKeys
        __init__(std::vector<(RMF::ID<(RMF::FloatTag)>)> self, std::vector< RMF::ID< RMF::FloatTag > >::size_type size) -> FloatKeys
        __init__(std::vector<(RMF::ID<(RMF::FloatTag)>)> self, std::vector< RMF::ID< RMF::FloatTag > >::size_type size, FloatKey value) -> FloatKeys
        """
        this = _RMF.new_FloatKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(FloatKeys self, FloatKey x)"""
        return _RMF.FloatKeys_push_back(self, x)


    def front(self):
        """front(FloatKeys self) -> FloatKey"""
        return _RMF.FloatKeys_front(self)


    def back(self):
        """back(FloatKeys self) -> FloatKey"""
        return _RMF.FloatKeys_back(self)


    def assign(self, n, x):
        """assign(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::size_type n, FloatKey x)"""
        return _RMF.FloatKeys_assign(self, n, x)


    def resize(self, *args):
        """
        resize(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::size_type new_size)
        resize(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::size_type new_size, FloatKey x)
        """
        return _RMF.FloatKeys_resize(self, *args)


    def insert(self, *args):
        """
        insert(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::iterator pos, FloatKey x) -> std::vector< RMF::ID< RMF::FloatTag > >::iterator
        insert(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::iterator pos, std::vector< RMF::ID< RMF::FloatTag > >::size_type n, FloatKey x)
        """
        return _RMF.FloatKeys_insert(self, *args)


    def reserve(self, n):
        """reserve(FloatKeys self, std::vector< RMF::ID< RMF::FloatTag > >::size_type n)"""
        return _RMF.FloatKeys_reserve(self, n)


    def capacity(self):
        """capacity(FloatKeys self) -> std::vector< RMF::ID< RMF::FloatTag > >::size_type"""
        return _RMF.FloatKeys_capacity(self)


    def __str__(self):
        """__str__(FloatKeys self) -> std::string"""
        return _RMF.FloatKeys___str__(self)


    def __repr__(self):
        """__repr__(FloatKeys self) -> std::string"""
        return _RMF.FloatKeys___repr__(self)

    __swig_destroy__ = _RMF.delete_FloatKeys
    __del__ = lambda self: None
FloatKeys_swigregister = _RMF.FloatKeys_swigregister
FloatKeys_swigregister(FloatKeys)

class StringKeys(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::StringTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringKeys, name)

    def iterator(self):
        """iterator(StringKeys self) -> RMF_SwigPyIterator"""
        return _RMF.StringKeys_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(StringKeys self) -> bool"""
        return _RMF.StringKeys___nonzero__(self)


    def __bool__(self):
        """__bool__(StringKeys self) -> bool"""
        return _RMF.StringKeys___bool__(self)


    def __len__(self):
        """__len__(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::size_type"""
        return _RMF.StringKeys___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i, std::vector< RMF::ID< RMF::StringTag > >::difference_type j) -> StringKeys"""
        return _RMF.StringKeys___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i, std::vector< RMF::ID< RMF::StringTag > >::difference_type j)
        __setslice__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i, std::vector< RMF::ID< RMF::StringTag > >::difference_type j, StringKeys v)
        """
        return _RMF.StringKeys___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i, std::vector< RMF::ID< RMF::StringTag > >::difference_type j)"""
        return _RMF.StringKeys___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i)
        __delitem__(StringKeys self, PySliceObject * slice)
        """
        return _RMF.StringKeys___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(StringKeys self, PySliceObject * slice) -> StringKeys
        __getitem__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i) -> StringKey
        """
        return _RMF.StringKeys___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(StringKeys self, PySliceObject * slice, StringKeys v)
        __setitem__(StringKeys self, PySliceObject * slice)
        __setitem__(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::difference_type i, StringKey x)
        """
        return _RMF.StringKeys___setitem__(self, *args)


    def pop(self):
        """pop(StringKeys self) -> StringKey"""
        return _RMF.StringKeys_pop(self)


    def append(self, x):
        """append(StringKeys self, StringKey x)"""
        return _RMF.StringKeys_append(self, x)


    def empty(self):
        """empty(StringKeys self) -> bool"""
        return _RMF.StringKeys_empty(self)


    def size(self):
        """size(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::size_type"""
        return _RMF.StringKeys_size(self)


    def swap(self, v):
        """swap(StringKeys self, StringKeys v)"""
        return _RMF.StringKeys_swap(self, v)


    def begin(self):
        """begin(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::iterator"""
        return _RMF.StringKeys_begin(self)


    def end(self):
        """end(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::iterator"""
        return _RMF.StringKeys_end(self)


    def rbegin(self):
        """rbegin(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::reverse_iterator"""
        return _RMF.StringKeys_rbegin(self)


    def rend(self):
        """rend(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::reverse_iterator"""
        return _RMF.StringKeys_rend(self)


    def clear(self):
        """clear(StringKeys self)"""
        return _RMF.StringKeys_clear(self)


    def get_allocator(self):
        """get_allocator(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::allocator_type"""
        return _RMF.StringKeys_get_allocator(self)


    def pop_back(self):
        """pop_back(StringKeys self)"""
        return _RMF.StringKeys_pop_back(self)


    def erase(self, *args):
        """
        erase(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::iterator pos) -> std::vector< RMF::ID< RMF::StringTag > >::iterator
        erase(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::iterator first, std::vector< RMF::ID< RMF::StringTag > >::iterator last) -> std::vector< RMF::ID< RMF::StringTag > >::iterator
        """
        return _RMF.StringKeys_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::StringTag)>)> self) -> StringKeys
        __init__(std::vector<(RMF::ID<(RMF::StringTag)>)> self, StringKeys arg2) -> StringKeys
        __init__(std::vector<(RMF::ID<(RMF::StringTag)>)> self, std::vector< RMF::ID< RMF::StringTag > >::size_type size) -> StringKeys
        __init__(std::vector<(RMF::ID<(RMF::StringTag)>)> self, std::vector< RMF::ID< RMF::StringTag > >::size_type size, StringKey value) -> StringKeys
        """
        this = _RMF.new_StringKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(StringKeys self, StringKey x)"""
        return _RMF.StringKeys_push_back(self, x)


    def front(self):
        """front(StringKeys self) -> StringKey"""
        return _RMF.StringKeys_front(self)


    def back(self):
        """back(StringKeys self) -> StringKey"""
        return _RMF.StringKeys_back(self)


    def assign(self, n, x):
        """assign(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::size_type n, StringKey x)"""
        return _RMF.StringKeys_assign(self, n, x)


    def resize(self, *args):
        """
        resize(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::size_type new_size)
        resize(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::size_type new_size, StringKey x)
        """
        return _RMF.StringKeys_resize(self, *args)


    def insert(self, *args):
        """
        insert(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::iterator pos, StringKey x) -> std::vector< RMF::ID< RMF::StringTag > >::iterator
        insert(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::iterator pos, std::vector< RMF::ID< RMF::StringTag > >::size_type n, StringKey x)
        """
        return _RMF.StringKeys_insert(self, *args)


    def reserve(self, n):
        """reserve(StringKeys self, std::vector< RMF::ID< RMF::StringTag > >::size_type n)"""
        return _RMF.StringKeys_reserve(self, n)


    def capacity(self):
        """capacity(StringKeys self) -> std::vector< RMF::ID< RMF::StringTag > >::size_type"""
        return _RMF.StringKeys_capacity(self)


    def __str__(self):
        """__str__(StringKeys self) -> std::string"""
        return _RMF.StringKeys___str__(self)


    def __repr__(self):
        """__repr__(StringKeys self) -> std::string"""
        return _RMF.StringKeys___repr__(self)

    __swig_destroy__ = _RMF.delete_StringKeys
    __del__ = lambda self: None
StringKeys_swigregister = _RMF.StringKeys_swigregister
StringKeys_swigregister(StringKeys)

class Vector3Keys(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::Vector3Tag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Keys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Keys, name)

    def iterator(self):
        """iterator(Vector3Keys self) -> RMF_SwigPyIterator"""
        return _RMF.Vector3Keys_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Vector3Keys self) -> bool"""
        return _RMF.Vector3Keys___nonzero__(self)


    def __bool__(self):
        """__bool__(Vector3Keys self) -> bool"""
        return _RMF.Vector3Keys___bool__(self)


    def __len__(self):
        """__len__(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::size_type"""
        return _RMF.Vector3Keys___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type j) -> Vector3Keys"""
        return _RMF.Vector3Keys___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type j)
        __setslice__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type j, Vector3Keys v)
        """
        return _RMF.Vector3Keys___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type j)"""
        return _RMF.Vector3Keys___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i)
        __delitem__(Vector3Keys self, PySliceObject * slice)
        """
        return _RMF.Vector3Keys___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Vector3Keys self, PySliceObject * slice) -> Vector3Keys
        __getitem__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i) -> Vector3Key
        """
        return _RMF.Vector3Keys___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Vector3Keys self, PySliceObject * slice, Vector3Keys v)
        __setitem__(Vector3Keys self, PySliceObject * slice)
        __setitem__(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::difference_type i, Vector3Key x)
        """
        return _RMF.Vector3Keys___setitem__(self, *args)


    def pop(self):
        """pop(Vector3Keys self) -> Vector3Key"""
        return _RMF.Vector3Keys_pop(self)


    def append(self, x):
        """append(Vector3Keys self, Vector3Key x)"""
        return _RMF.Vector3Keys_append(self, x)


    def empty(self):
        """empty(Vector3Keys self) -> bool"""
        return _RMF.Vector3Keys_empty(self)


    def size(self):
        """size(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::size_type"""
        return _RMF.Vector3Keys_size(self)


    def swap(self, v):
        """swap(Vector3Keys self, Vector3Keys v)"""
        return _RMF.Vector3Keys_swap(self, v)


    def begin(self):
        """begin(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::iterator"""
        return _RMF.Vector3Keys_begin(self)


    def end(self):
        """end(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::iterator"""
        return _RMF.Vector3Keys_end(self)


    def rbegin(self):
        """rbegin(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::reverse_iterator"""
        return _RMF.Vector3Keys_rbegin(self)


    def rend(self):
        """rend(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::reverse_iterator"""
        return _RMF.Vector3Keys_rend(self)


    def clear(self):
        """clear(Vector3Keys self)"""
        return _RMF.Vector3Keys_clear(self)


    def get_allocator(self):
        """get_allocator(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::allocator_type"""
        return _RMF.Vector3Keys_get_allocator(self)


    def pop_back(self):
        """pop_back(Vector3Keys self)"""
        return _RMF.Vector3Keys_pop_back(self)


    def erase(self, *args):
        """
        erase(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::iterator pos) -> std::vector< RMF::ID< RMF::Vector3Tag > >::iterator
        erase(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::iterator first, std::vector< RMF::ID< RMF::Vector3Tag > >::iterator last) -> std::vector< RMF::ID< RMF::Vector3Tag > >::iterator
        """
        return _RMF.Vector3Keys_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::Vector3Tag)>)> self) -> Vector3Keys
        __init__(std::vector<(RMF::ID<(RMF::Vector3Tag)>)> self, Vector3Keys arg2) -> Vector3Keys
        __init__(std::vector<(RMF::ID<(RMF::Vector3Tag)>)> self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type size) -> Vector3Keys
        __init__(std::vector<(RMF::ID<(RMF::Vector3Tag)>)> self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type size, Vector3Key value) -> Vector3Keys
        """
        this = _RMF.new_Vector3Keys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Vector3Keys self, Vector3Key x)"""
        return _RMF.Vector3Keys_push_back(self, x)


    def front(self):
        """front(Vector3Keys self) -> Vector3Key"""
        return _RMF.Vector3Keys_front(self)


    def back(self):
        """back(Vector3Keys self) -> Vector3Key"""
        return _RMF.Vector3Keys_back(self)


    def assign(self, n, x):
        """assign(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type n, Vector3Key x)"""
        return _RMF.Vector3Keys_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type new_size)
        resize(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type new_size, Vector3Key x)
        """
        return _RMF.Vector3Keys_resize(self, *args)


    def insert(self, *args):
        """
        insert(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::iterator pos, Vector3Key x) -> std::vector< RMF::ID< RMF::Vector3Tag > >::iterator
        insert(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::iterator pos, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type n, Vector3Key x)
        """
        return _RMF.Vector3Keys_insert(self, *args)


    def reserve(self, n):
        """reserve(Vector3Keys self, std::vector< RMF::ID< RMF::Vector3Tag > >::size_type n)"""
        return _RMF.Vector3Keys_reserve(self, n)


    def capacity(self):
        """capacity(Vector3Keys self) -> std::vector< RMF::ID< RMF::Vector3Tag > >::size_type"""
        return _RMF.Vector3Keys_capacity(self)


    def __str__(self):
        """__str__(Vector3Keys self) -> std::string"""
        return _RMF.Vector3Keys___str__(self)


    def __repr__(self):
        """__repr__(Vector3Keys self) -> std::string"""
        return _RMF.Vector3Keys___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector3Keys
    __del__ = lambda self: None
Vector3Keys_swigregister = _RMF.Vector3Keys_swigregister
Vector3Keys_swigregister(Vector3Keys)

class Vector4Keys(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::Vector4Tag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector4Keys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector4Keys, name)

    def iterator(self):
        """iterator(Vector4Keys self) -> RMF_SwigPyIterator"""
        return _RMF.Vector4Keys_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Vector4Keys self) -> bool"""
        return _RMF.Vector4Keys___nonzero__(self)


    def __bool__(self):
        """__bool__(Vector4Keys self) -> bool"""
        return _RMF.Vector4Keys___bool__(self)


    def __len__(self):
        """__len__(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::size_type"""
        return _RMF.Vector4Keys___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type j) -> Vector4Keys"""
        return _RMF.Vector4Keys___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type j)
        __setslice__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type j, Vector4Keys v)
        """
        return _RMF.Vector4Keys___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type j)"""
        return _RMF.Vector4Keys___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i)
        __delitem__(Vector4Keys self, PySliceObject * slice)
        """
        return _RMF.Vector4Keys___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Vector4Keys self, PySliceObject * slice) -> Vector4Keys
        __getitem__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i) -> Vector4Key
        """
        return _RMF.Vector4Keys___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Vector4Keys self, PySliceObject * slice, Vector4Keys v)
        __setitem__(Vector4Keys self, PySliceObject * slice)
        __setitem__(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::difference_type i, Vector4Key x)
        """
        return _RMF.Vector4Keys___setitem__(self, *args)


    def pop(self):
        """pop(Vector4Keys self) -> Vector4Key"""
        return _RMF.Vector4Keys_pop(self)


    def append(self, x):
        """append(Vector4Keys self, Vector4Key x)"""
        return _RMF.Vector4Keys_append(self, x)


    def empty(self):
        """empty(Vector4Keys self) -> bool"""
        return _RMF.Vector4Keys_empty(self)


    def size(self):
        """size(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::size_type"""
        return _RMF.Vector4Keys_size(self)


    def swap(self, v):
        """swap(Vector4Keys self, Vector4Keys v)"""
        return _RMF.Vector4Keys_swap(self, v)


    def begin(self):
        """begin(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::iterator"""
        return _RMF.Vector4Keys_begin(self)


    def end(self):
        """end(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::iterator"""
        return _RMF.Vector4Keys_end(self)


    def rbegin(self):
        """rbegin(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::reverse_iterator"""
        return _RMF.Vector4Keys_rbegin(self)


    def rend(self):
        """rend(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::reverse_iterator"""
        return _RMF.Vector4Keys_rend(self)


    def clear(self):
        """clear(Vector4Keys self)"""
        return _RMF.Vector4Keys_clear(self)


    def get_allocator(self):
        """get_allocator(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::allocator_type"""
        return _RMF.Vector4Keys_get_allocator(self)


    def pop_back(self):
        """pop_back(Vector4Keys self)"""
        return _RMF.Vector4Keys_pop_back(self)


    def erase(self, *args):
        """
        erase(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::iterator pos) -> std::vector< RMF::ID< RMF::Vector4Tag > >::iterator
        erase(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::iterator first, std::vector< RMF::ID< RMF::Vector4Tag > >::iterator last) -> std::vector< RMF::ID< RMF::Vector4Tag > >::iterator
        """
        return _RMF.Vector4Keys_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::Vector4Tag)>)> self) -> Vector4Keys
        __init__(std::vector<(RMF::ID<(RMF::Vector4Tag)>)> self, Vector4Keys arg2) -> Vector4Keys
        __init__(std::vector<(RMF::ID<(RMF::Vector4Tag)>)> self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type size) -> Vector4Keys
        __init__(std::vector<(RMF::ID<(RMF::Vector4Tag)>)> self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type size, Vector4Key value) -> Vector4Keys
        """
        this = _RMF.new_Vector4Keys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Vector4Keys self, Vector4Key x)"""
        return _RMF.Vector4Keys_push_back(self, x)


    def front(self):
        """front(Vector4Keys self) -> Vector4Key"""
        return _RMF.Vector4Keys_front(self)


    def back(self):
        """back(Vector4Keys self) -> Vector4Key"""
        return _RMF.Vector4Keys_back(self)


    def assign(self, n, x):
        """assign(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type n, Vector4Key x)"""
        return _RMF.Vector4Keys_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type new_size)
        resize(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type new_size, Vector4Key x)
        """
        return _RMF.Vector4Keys_resize(self, *args)


    def insert(self, *args):
        """
        insert(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::iterator pos, Vector4Key x) -> std::vector< RMF::ID< RMF::Vector4Tag > >::iterator
        insert(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::iterator pos, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type n, Vector4Key x)
        """
        return _RMF.Vector4Keys_insert(self, *args)


    def reserve(self, n):
        """reserve(Vector4Keys self, std::vector< RMF::ID< RMF::Vector4Tag > >::size_type n)"""
        return _RMF.Vector4Keys_reserve(self, n)


    def capacity(self):
        """capacity(Vector4Keys self) -> std::vector< RMF::ID< RMF::Vector4Tag > >::size_type"""
        return _RMF.Vector4Keys_capacity(self)


    def __str__(self):
        """__str__(Vector4Keys self) -> std::string"""
        return _RMF.Vector4Keys___str__(self)


    def __repr__(self):
        """__repr__(Vector4Keys self) -> std::string"""
        return _RMF.Vector4Keys___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector4Keys
    __del__ = lambda self: None
Vector4Keys_swigregister = _RMF.Vector4Keys_swigregister
Vector4Keys_swigregister(Vector4Keys)

class IntsKeys(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::IntsTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntsKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntsKeys, name)

    def iterator(self):
        """iterator(IntsKeys self) -> RMF_SwigPyIterator"""
        return _RMF.IntsKeys_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(IntsKeys self) -> bool"""
        return _RMF.IntsKeys___nonzero__(self)


    def __bool__(self):
        """__bool__(IntsKeys self) -> bool"""
        return _RMF.IntsKeys___bool__(self)


    def __len__(self):
        """__len__(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::size_type"""
        return _RMF.IntsKeys___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i, std::vector< RMF::ID< RMF::IntsTag > >::difference_type j) -> IntsKeys"""
        return _RMF.IntsKeys___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i, std::vector< RMF::ID< RMF::IntsTag > >::difference_type j)
        __setslice__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i, std::vector< RMF::ID< RMF::IntsTag > >::difference_type j, IntsKeys v)
        """
        return _RMF.IntsKeys___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i, std::vector< RMF::ID< RMF::IntsTag > >::difference_type j)"""
        return _RMF.IntsKeys___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i)
        __delitem__(IntsKeys self, PySliceObject * slice)
        """
        return _RMF.IntsKeys___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(IntsKeys self, PySliceObject * slice) -> IntsKeys
        __getitem__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i) -> IntsKey
        """
        return _RMF.IntsKeys___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(IntsKeys self, PySliceObject * slice, IntsKeys v)
        __setitem__(IntsKeys self, PySliceObject * slice)
        __setitem__(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::difference_type i, IntsKey x)
        """
        return _RMF.IntsKeys___setitem__(self, *args)


    def pop(self):
        """pop(IntsKeys self) -> IntsKey"""
        return _RMF.IntsKeys_pop(self)


    def append(self, x):
        """append(IntsKeys self, IntsKey x)"""
        return _RMF.IntsKeys_append(self, x)


    def empty(self):
        """empty(IntsKeys self) -> bool"""
        return _RMF.IntsKeys_empty(self)


    def size(self):
        """size(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::size_type"""
        return _RMF.IntsKeys_size(self)


    def swap(self, v):
        """swap(IntsKeys self, IntsKeys v)"""
        return _RMF.IntsKeys_swap(self, v)


    def begin(self):
        """begin(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::iterator"""
        return _RMF.IntsKeys_begin(self)


    def end(self):
        """end(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::iterator"""
        return _RMF.IntsKeys_end(self)


    def rbegin(self):
        """rbegin(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::reverse_iterator"""
        return _RMF.IntsKeys_rbegin(self)


    def rend(self):
        """rend(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::reverse_iterator"""
        return _RMF.IntsKeys_rend(self)


    def clear(self):
        """clear(IntsKeys self)"""
        return _RMF.IntsKeys_clear(self)


    def get_allocator(self):
        """get_allocator(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::allocator_type"""
        return _RMF.IntsKeys_get_allocator(self)


    def pop_back(self):
        """pop_back(IntsKeys self)"""
        return _RMF.IntsKeys_pop_back(self)


    def erase(self, *args):
        """
        erase(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::iterator pos) -> std::vector< RMF::ID< RMF::IntsTag > >::iterator
        erase(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::iterator first, std::vector< RMF::ID< RMF::IntsTag > >::iterator last) -> std::vector< RMF::ID< RMF::IntsTag > >::iterator
        """
        return _RMF.IntsKeys_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::IntsTag)>)> self) -> IntsKeys
        __init__(std::vector<(RMF::ID<(RMF::IntsTag)>)> self, IntsKeys arg2) -> IntsKeys
        __init__(std::vector<(RMF::ID<(RMF::IntsTag)>)> self, std::vector< RMF::ID< RMF::IntsTag > >::size_type size) -> IntsKeys
        __init__(std::vector<(RMF::ID<(RMF::IntsTag)>)> self, std::vector< RMF::ID< RMF::IntsTag > >::size_type size, IntsKey value) -> IntsKeys
        """
        this = _RMF.new_IntsKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(IntsKeys self, IntsKey x)"""
        return _RMF.IntsKeys_push_back(self, x)


    def front(self):
        """front(IntsKeys self) -> IntsKey"""
        return _RMF.IntsKeys_front(self)


    def back(self):
        """back(IntsKeys self) -> IntsKey"""
        return _RMF.IntsKeys_back(self)


    def assign(self, n, x):
        """assign(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::size_type n, IntsKey x)"""
        return _RMF.IntsKeys_assign(self, n, x)


    def resize(self, *args):
        """
        resize(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::size_type new_size)
        resize(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::size_type new_size, IntsKey x)
        """
        return _RMF.IntsKeys_resize(self, *args)


    def insert(self, *args):
        """
        insert(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::iterator pos, IntsKey x) -> std::vector< RMF::ID< RMF::IntsTag > >::iterator
        insert(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::iterator pos, std::vector< RMF::ID< RMF::IntsTag > >::size_type n, IntsKey x)
        """
        return _RMF.IntsKeys_insert(self, *args)


    def reserve(self, n):
        """reserve(IntsKeys self, std::vector< RMF::ID< RMF::IntsTag > >::size_type n)"""
        return _RMF.IntsKeys_reserve(self, n)


    def capacity(self):
        """capacity(IntsKeys self) -> std::vector< RMF::ID< RMF::IntsTag > >::size_type"""
        return _RMF.IntsKeys_capacity(self)


    def __str__(self):
        """__str__(IntsKeys self) -> std::string"""
        return _RMF.IntsKeys___str__(self)


    def __repr__(self):
        """__repr__(IntsKeys self) -> std::string"""
        return _RMF.IntsKeys___repr__(self)

    __swig_destroy__ = _RMF.delete_IntsKeys
    __del__ = lambda self: None
IntsKeys_swigregister = _RMF.IntsKeys_swigregister
IntsKeys_swigregister(IntsKeys)

class FloatsKeys(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::FloatsTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatsKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatsKeys, name)

    def iterator(self):
        """iterator(FloatsKeys self) -> RMF_SwigPyIterator"""
        return _RMF.FloatsKeys_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(FloatsKeys self) -> bool"""
        return _RMF.FloatsKeys___nonzero__(self)


    def __bool__(self):
        """__bool__(FloatsKeys self) -> bool"""
        return _RMF.FloatsKeys___bool__(self)


    def __len__(self):
        """__len__(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::size_type"""
        return _RMF.FloatsKeys___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type j) -> FloatsKeys"""
        return _RMF.FloatsKeys___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type j)
        __setslice__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type j, FloatsKeys v)
        """
        return _RMF.FloatsKeys___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type j)"""
        return _RMF.FloatsKeys___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i)
        __delitem__(FloatsKeys self, PySliceObject * slice)
        """
        return _RMF.FloatsKeys___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(FloatsKeys self, PySliceObject * slice) -> FloatsKeys
        __getitem__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i) -> FloatsKey
        """
        return _RMF.FloatsKeys___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(FloatsKeys self, PySliceObject * slice, FloatsKeys v)
        __setitem__(FloatsKeys self, PySliceObject * slice)
        __setitem__(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::difference_type i, FloatsKey x)
        """
        return _RMF.FloatsKeys___setitem__(self, *args)


    def pop(self):
        """pop(FloatsKeys self) -> FloatsKey"""
        return _RMF.FloatsKeys_pop(self)


    def append(self, x):
        """append(FloatsKeys self, FloatsKey x)"""
        return _RMF.FloatsKeys_append(self, x)


    def empty(self):
        """empty(FloatsKeys self) -> bool"""
        return _RMF.FloatsKeys_empty(self)


    def size(self):
        """size(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::size_type"""
        return _RMF.FloatsKeys_size(self)


    def swap(self, v):
        """swap(FloatsKeys self, FloatsKeys v)"""
        return _RMF.FloatsKeys_swap(self, v)


    def begin(self):
        """begin(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::iterator"""
        return _RMF.FloatsKeys_begin(self)


    def end(self):
        """end(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::iterator"""
        return _RMF.FloatsKeys_end(self)


    def rbegin(self):
        """rbegin(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::reverse_iterator"""
        return _RMF.FloatsKeys_rbegin(self)


    def rend(self):
        """rend(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::reverse_iterator"""
        return _RMF.FloatsKeys_rend(self)


    def clear(self):
        """clear(FloatsKeys self)"""
        return _RMF.FloatsKeys_clear(self)


    def get_allocator(self):
        """get_allocator(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::allocator_type"""
        return _RMF.FloatsKeys_get_allocator(self)


    def pop_back(self):
        """pop_back(FloatsKeys self)"""
        return _RMF.FloatsKeys_pop_back(self)


    def erase(self, *args):
        """
        erase(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::iterator pos) -> std::vector< RMF::ID< RMF::FloatsTag > >::iterator
        erase(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::iterator first, std::vector< RMF::ID< RMF::FloatsTag > >::iterator last) -> std::vector< RMF::ID< RMF::FloatsTag > >::iterator
        """
        return _RMF.FloatsKeys_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::FloatsTag)>)> self) -> FloatsKeys
        __init__(std::vector<(RMF::ID<(RMF::FloatsTag)>)> self, FloatsKeys arg2) -> FloatsKeys
        __init__(std::vector<(RMF::ID<(RMF::FloatsTag)>)> self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type size) -> FloatsKeys
        __init__(std::vector<(RMF::ID<(RMF::FloatsTag)>)> self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type size, FloatsKey value) -> FloatsKeys
        """
        this = _RMF.new_FloatsKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(FloatsKeys self, FloatsKey x)"""
        return _RMF.FloatsKeys_push_back(self, x)


    def front(self):
        """front(FloatsKeys self) -> FloatsKey"""
        return _RMF.FloatsKeys_front(self)


    def back(self):
        """back(FloatsKeys self) -> FloatsKey"""
        return _RMF.FloatsKeys_back(self)


    def assign(self, n, x):
        """assign(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type n, FloatsKey x)"""
        return _RMF.FloatsKeys_assign(self, n, x)


    def resize(self, *args):
        """
        resize(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type new_size)
        resize(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type new_size, FloatsKey x)
        """
        return _RMF.FloatsKeys_resize(self, *args)


    def insert(self, *args):
        """
        insert(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::iterator pos, FloatsKey x) -> std::vector< RMF::ID< RMF::FloatsTag > >::iterator
        insert(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::iterator pos, std::vector< RMF::ID< RMF::FloatsTag > >::size_type n, FloatsKey x)
        """
        return _RMF.FloatsKeys_insert(self, *args)


    def reserve(self, n):
        """reserve(FloatsKeys self, std::vector< RMF::ID< RMF::FloatsTag > >::size_type n)"""
        return _RMF.FloatsKeys_reserve(self, n)


    def capacity(self):
        """capacity(FloatsKeys self) -> std::vector< RMF::ID< RMF::FloatsTag > >::size_type"""
        return _RMF.FloatsKeys_capacity(self)


    def __str__(self):
        """__str__(FloatsKeys self) -> std::string"""
        return _RMF.FloatsKeys___str__(self)


    def __repr__(self):
        """__repr__(FloatsKeys self) -> std::string"""
        return _RMF.FloatsKeys___repr__(self)

    __swig_destroy__ = _RMF.delete_FloatsKeys
    __del__ = lambda self: None
FloatsKeys_swigregister = _RMF.FloatsKeys_swigregister
FloatsKeys_swigregister(FloatsKeys)

class StringsKeys(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::StringsTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringsKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringsKeys, name)

    def iterator(self):
        """iterator(StringsKeys self) -> RMF_SwigPyIterator"""
        return _RMF.StringsKeys_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(StringsKeys self) -> bool"""
        return _RMF.StringsKeys___nonzero__(self)


    def __bool__(self):
        """__bool__(StringsKeys self) -> bool"""
        return _RMF.StringsKeys___bool__(self)


    def __len__(self):
        """__len__(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::size_type"""
        return _RMF.StringsKeys___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i, std::vector< RMF::ID< RMF::StringsTag > >::difference_type j) -> StringsKeys"""
        return _RMF.StringsKeys___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i, std::vector< RMF::ID< RMF::StringsTag > >::difference_type j)
        __setslice__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i, std::vector< RMF::ID< RMF::StringsTag > >::difference_type j, StringsKeys v)
        """
        return _RMF.StringsKeys___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i, std::vector< RMF::ID< RMF::StringsTag > >::difference_type j)"""
        return _RMF.StringsKeys___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i)
        __delitem__(StringsKeys self, PySliceObject * slice)
        """
        return _RMF.StringsKeys___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(StringsKeys self, PySliceObject * slice) -> StringsKeys
        __getitem__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i) -> StringsKey
        """
        return _RMF.StringsKeys___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(StringsKeys self, PySliceObject * slice, StringsKeys v)
        __setitem__(StringsKeys self, PySliceObject * slice)
        __setitem__(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::difference_type i, StringsKey x)
        """
        return _RMF.StringsKeys___setitem__(self, *args)


    def pop(self):
        """pop(StringsKeys self) -> StringsKey"""
        return _RMF.StringsKeys_pop(self)


    def append(self, x):
        """append(StringsKeys self, StringsKey x)"""
        return _RMF.StringsKeys_append(self, x)


    def empty(self):
        """empty(StringsKeys self) -> bool"""
        return _RMF.StringsKeys_empty(self)


    def size(self):
        """size(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::size_type"""
        return _RMF.StringsKeys_size(self)


    def swap(self, v):
        """swap(StringsKeys self, StringsKeys v)"""
        return _RMF.StringsKeys_swap(self, v)


    def begin(self):
        """begin(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::iterator"""
        return _RMF.StringsKeys_begin(self)


    def end(self):
        """end(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::iterator"""
        return _RMF.StringsKeys_end(self)


    def rbegin(self):
        """rbegin(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::reverse_iterator"""
        return _RMF.StringsKeys_rbegin(self)


    def rend(self):
        """rend(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::reverse_iterator"""
        return _RMF.StringsKeys_rend(self)


    def clear(self):
        """clear(StringsKeys self)"""
        return _RMF.StringsKeys_clear(self)


    def get_allocator(self):
        """get_allocator(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::allocator_type"""
        return _RMF.StringsKeys_get_allocator(self)


    def pop_back(self):
        """pop_back(StringsKeys self)"""
        return _RMF.StringsKeys_pop_back(self)


    def erase(self, *args):
        """
        erase(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::iterator pos) -> std::vector< RMF::ID< RMF::StringsTag > >::iterator
        erase(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::iterator first, std::vector< RMF::ID< RMF::StringsTag > >::iterator last) -> std::vector< RMF::ID< RMF::StringsTag > >::iterator
        """
        return _RMF.StringsKeys_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::StringsTag)>)> self) -> StringsKeys
        __init__(std::vector<(RMF::ID<(RMF::StringsTag)>)> self, StringsKeys arg2) -> StringsKeys
        __init__(std::vector<(RMF::ID<(RMF::StringsTag)>)> self, std::vector< RMF::ID< RMF::StringsTag > >::size_type size) -> StringsKeys
        __init__(std::vector<(RMF::ID<(RMF::StringsTag)>)> self, std::vector< RMF::ID< RMF::StringsTag > >::size_type size, StringsKey value) -> StringsKeys
        """
        this = _RMF.new_StringsKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(StringsKeys self, StringsKey x)"""
        return _RMF.StringsKeys_push_back(self, x)


    def front(self):
        """front(StringsKeys self) -> StringsKey"""
        return _RMF.StringsKeys_front(self)


    def back(self):
        """back(StringsKeys self) -> StringsKey"""
        return _RMF.StringsKeys_back(self)


    def assign(self, n, x):
        """assign(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::size_type n, StringsKey x)"""
        return _RMF.StringsKeys_assign(self, n, x)


    def resize(self, *args):
        """
        resize(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::size_type new_size)
        resize(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::size_type new_size, StringsKey x)
        """
        return _RMF.StringsKeys_resize(self, *args)


    def insert(self, *args):
        """
        insert(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::iterator pos, StringsKey x) -> std::vector< RMF::ID< RMF::StringsTag > >::iterator
        insert(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::iterator pos, std::vector< RMF::ID< RMF::StringsTag > >::size_type n, StringsKey x)
        """
        return _RMF.StringsKeys_insert(self, *args)


    def reserve(self, n):
        """reserve(StringsKeys self, std::vector< RMF::ID< RMF::StringsTag > >::size_type n)"""
        return _RMF.StringsKeys_reserve(self, n)


    def capacity(self):
        """capacity(StringsKeys self) -> std::vector< RMF::ID< RMF::StringsTag > >::size_type"""
        return _RMF.StringsKeys_capacity(self)


    def __str__(self):
        """__str__(StringsKeys self) -> std::string"""
        return _RMF.StringsKeys___str__(self)


    def __repr__(self):
        """__repr__(StringsKeys self) -> std::string"""
        return _RMF.StringsKeys___repr__(self)

    __swig_destroy__ = _RMF.delete_StringsKeys
    __del__ = lambda self: None
StringsKeys_swigregister = _RMF.StringsKeys_swigregister
StringsKeys_swigregister(StringsKeys)

class Vector3sKeys(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::Vector3sTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3sKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3sKeys, name)

    def iterator(self):
        """iterator(Vector3sKeys self) -> RMF_SwigPyIterator"""
        return _RMF.Vector3sKeys_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Vector3sKeys self) -> bool"""
        return _RMF.Vector3sKeys___nonzero__(self)


    def __bool__(self):
        """__bool__(Vector3sKeys self) -> bool"""
        return _RMF.Vector3sKeys___bool__(self)


    def __len__(self):
        """__len__(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::size_type"""
        return _RMF.Vector3sKeys___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type j) -> Vector3sKeys"""
        return _RMF.Vector3sKeys___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type j)
        __setslice__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type j, Vector3sKeys v)
        """
        return _RMF.Vector3sKeys___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type j)"""
        return _RMF.Vector3sKeys___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i)
        __delitem__(Vector3sKeys self, PySliceObject * slice)
        """
        return _RMF.Vector3sKeys___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Vector3sKeys self, PySliceObject * slice) -> Vector3sKeys
        __getitem__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i) -> Vector3sKey
        """
        return _RMF.Vector3sKeys___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Vector3sKeys self, PySliceObject * slice, Vector3sKeys v)
        __setitem__(Vector3sKeys self, PySliceObject * slice)
        __setitem__(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::difference_type i, Vector3sKey x)
        """
        return _RMF.Vector3sKeys___setitem__(self, *args)


    def pop(self):
        """pop(Vector3sKeys self) -> Vector3sKey"""
        return _RMF.Vector3sKeys_pop(self)


    def append(self, x):
        """append(Vector3sKeys self, Vector3sKey x)"""
        return _RMF.Vector3sKeys_append(self, x)


    def empty(self):
        """empty(Vector3sKeys self) -> bool"""
        return _RMF.Vector3sKeys_empty(self)


    def size(self):
        """size(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::size_type"""
        return _RMF.Vector3sKeys_size(self)


    def swap(self, v):
        """swap(Vector3sKeys self, Vector3sKeys v)"""
        return _RMF.Vector3sKeys_swap(self, v)


    def begin(self):
        """begin(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::iterator"""
        return _RMF.Vector3sKeys_begin(self)


    def end(self):
        """end(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::iterator"""
        return _RMF.Vector3sKeys_end(self)


    def rbegin(self):
        """rbegin(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::reverse_iterator"""
        return _RMF.Vector3sKeys_rbegin(self)


    def rend(self):
        """rend(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::reverse_iterator"""
        return _RMF.Vector3sKeys_rend(self)


    def clear(self):
        """clear(Vector3sKeys self)"""
        return _RMF.Vector3sKeys_clear(self)


    def get_allocator(self):
        """get_allocator(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::allocator_type"""
        return _RMF.Vector3sKeys_get_allocator(self)


    def pop_back(self):
        """pop_back(Vector3sKeys self)"""
        return _RMF.Vector3sKeys_pop_back(self)


    def erase(self, *args):
        """
        erase(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::iterator pos) -> std::vector< RMF::ID< RMF::Vector3sTag > >::iterator
        erase(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::iterator first, std::vector< RMF::ID< RMF::Vector3sTag > >::iterator last) -> std::vector< RMF::ID< RMF::Vector3sTag > >::iterator
        """
        return _RMF.Vector3sKeys_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::Vector3sTag)>)> self) -> Vector3sKeys
        __init__(std::vector<(RMF::ID<(RMF::Vector3sTag)>)> self, Vector3sKeys arg2) -> Vector3sKeys
        __init__(std::vector<(RMF::ID<(RMF::Vector3sTag)>)> self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type size) -> Vector3sKeys
        __init__(std::vector<(RMF::ID<(RMF::Vector3sTag)>)> self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type size, Vector3sKey value) -> Vector3sKeys
        """
        this = _RMF.new_Vector3sKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Vector3sKeys self, Vector3sKey x)"""
        return _RMF.Vector3sKeys_push_back(self, x)


    def front(self):
        """front(Vector3sKeys self) -> Vector3sKey"""
        return _RMF.Vector3sKeys_front(self)


    def back(self):
        """back(Vector3sKeys self) -> Vector3sKey"""
        return _RMF.Vector3sKeys_back(self)


    def assign(self, n, x):
        """assign(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type n, Vector3sKey x)"""
        return _RMF.Vector3sKeys_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type new_size)
        resize(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type new_size, Vector3sKey x)
        """
        return _RMF.Vector3sKeys_resize(self, *args)


    def insert(self, *args):
        """
        insert(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::iterator pos, Vector3sKey x) -> std::vector< RMF::ID< RMF::Vector3sTag > >::iterator
        insert(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::iterator pos, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type n, Vector3sKey x)
        """
        return _RMF.Vector3sKeys_insert(self, *args)


    def reserve(self, n):
        """reserve(Vector3sKeys self, std::vector< RMF::ID< RMF::Vector3sTag > >::size_type n)"""
        return _RMF.Vector3sKeys_reserve(self, n)


    def capacity(self):
        """capacity(Vector3sKeys self) -> std::vector< RMF::ID< RMF::Vector3sTag > >::size_type"""
        return _RMF.Vector3sKeys_capacity(self)


    def __str__(self):
        """__str__(Vector3sKeys self) -> std::string"""
        return _RMF.Vector3sKeys___str__(self)


    def __repr__(self):
        """__repr__(Vector3sKeys self) -> std::string"""
        return _RMF.Vector3sKeys___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector3sKeys
    __del__ = lambda self: None
Vector3sKeys_swigregister = _RMF.Vector3sKeys_swigregister
Vector3sKeys_swigregister(Vector3sKeys)

class Vector4sKeys(_object):
    """Proxy of C++ std::vector<(RMF::ID<(RMF::Vector4sTag)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector4sKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector4sKeys, name)

    def iterator(self):
        """iterator(Vector4sKeys self) -> RMF_SwigPyIterator"""
        return _RMF.Vector4sKeys_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(Vector4sKeys self) -> bool"""
        return _RMF.Vector4sKeys___nonzero__(self)


    def __bool__(self):
        """__bool__(Vector4sKeys self) -> bool"""
        return _RMF.Vector4sKeys___bool__(self)


    def __len__(self):
        """__len__(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::size_type"""
        return _RMF.Vector4sKeys___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type j) -> Vector4sKeys"""
        return _RMF.Vector4sKeys___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type j)
        __setslice__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type j, Vector4sKeys v)
        """
        return _RMF.Vector4sKeys___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type j)"""
        return _RMF.Vector4sKeys___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i)
        __delitem__(Vector4sKeys self, PySliceObject * slice)
        """
        return _RMF.Vector4sKeys___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(Vector4sKeys self, PySliceObject * slice) -> Vector4sKeys
        __getitem__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i) -> Vector4sKey
        """
        return _RMF.Vector4sKeys___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(Vector4sKeys self, PySliceObject * slice, Vector4sKeys v)
        __setitem__(Vector4sKeys self, PySliceObject * slice)
        __setitem__(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::difference_type i, Vector4sKey x)
        """
        return _RMF.Vector4sKeys___setitem__(self, *args)


    def pop(self):
        """pop(Vector4sKeys self) -> Vector4sKey"""
        return _RMF.Vector4sKeys_pop(self)


    def append(self, x):
        """append(Vector4sKeys self, Vector4sKey x)"""
        return _RMF.Vector4sKeys_append(self, x)


    def empty(self):
        """empty(Vector4sKeys self) -> bool"""
        return _RMF.Vector4sKeys_empty(self)


    def size(self):
        """size(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::size_type"""
        return _RMF.Vector4sKeys_size(self)


    def swap(self, v):
        """swap(Vector4sKeys self, Vector4sKeys v)"""
        return _RMF.Vector4sKeys_swap(self, v)


    def begin(self):
        """begin(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::iterator"""
        return _RMF.Vector4sKeys_begin(self)


    def end(self):
        """end(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::iterator"""
        return _RMF.Vector4sKeys_end(self)


    def rbegin(self):
        """rbegin(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::reverse_iterator"""
        return _RMF.Vector4sKeys_rbegin(self)


    def rend(self):
        """rend(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::reverse_iterator"""
        return _RMF.Vector4sKeys_rend(self)


    def clear(self):
        """clear(Vector4sKeys self)"""
        return _RMF.Vector4sKeys_clear(self)


    def get_allocator(self):
        """get_allocator(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::allocator_type"""
        return _RMF.Vector4sKeys_get_allocator(self)


    def pop_back(self):
        """pop_back(Vector4sKeys self)"""
        return _RMF.Vector4sKeys_pop_back(self)


    def erase(self, *args):
        """
        erase(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::iterator pos) -> std::vector< RMF::ID< RMF::Vector4sTag > >::iterator
        erase(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::iterator first, std::vector< RMF::ID< RMF::Vector4sTag > >::iterator last) -> std::vector< RMF::ID< RMF::Vector4sTag > >::iterator
        """
        return _RMF.Vector4sKeys_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::ID<(RMF::Vector4sTag)>)> self) -> Vector4sKeys
        __init__(std::vector<(RMF::ID<(RMF::Vector4sTag)>)> self, Vector4sKeys arg2) -> Vector4sKeys
        __init__(std::vector<(RMF::ID<(RMF::Vector4sTag)>)> self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type size) -> Vector4sKeys
        __init__(std::vector<(RMF::ID<(RMF::Vector4sTag)>)> self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type size, Vector4sKey value) -> Vector4sKeys
        """
        this = _RMF.new_Vector4sKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(Vector4sKeys self, Vector4sKey x)"""
        return _RMF.Vector4sKeys_push_back(self, x)


    def front(self):
        """front(Vector4sKeys self) -> Vector4sKey"""
        return _RMF.Vector4sKeys_front(self)


    def back(self):
        """back(Vector4sKeys self) -> Vector4sKey"""
        return _RMF.Vector4sKeys_back(self)


    def assign(self, n, x):
        """assign(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type n, Vector4sKey x)"""
        return _RMF.Vector4sKeys_assign(self, n, x)


    def resize(self, *args):
        """
        resize(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type new_size)
        resize(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type new_size, Vector4sKey x)
        """
        return _RMF.Vector4sKeys_resize(self, *args)


    def insert(self, *args):
        """
        insert(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::iterator pos, Vector4sKey x) -> std::vector< RMF::ID< RMF::Vector4sTag > >::iterator
        insert(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::iterator pos, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type n, Vector4sKey x)
        """
        return _RMF.Vector4sKeys_insert(self, *args)


    def reserve(self, n):
        """reserve(Vector4sKeys self, std::vector< RMF::ID< RMF::Vector4sTag > >::size_type n)"""
        return _RMF.Vector4sKeys_reserve(self, n)


    def capacity(self):
        """capacity(Vector4sKeys self) -> std::vector< RMF::ID< RMF::Vector4sTag > >::size_type"""
        return _RMF.Vector4sKeys_capacity(self)


    def __str__(self):
        """__str__(Vector4sKeys self) -> std::string"""
        return _RMF.Vector4sKeys___str__(self)


    def __repr__(self):
        """__repr__(Vector4sKeys self) -> std::string"""
        return _RMF.Vector4sKeys___repr__(self)

    __swig_destroy__ = _RMF.delete_Vector4sKeys
    __del__ = lambda self: None
Vector4sKeys_swigregister = _RMF.Vector4sKeys_swigregister
Vector4sKeys_swigregister(Vector4sKeys)



def _handle_nullable(n):
   if n.get_is_null(): return None
   else: return n.get()

class _NullableInt(_object):
    """Proxy of C++ RMF::Nullable<(RMF::Int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NullableInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NullableInt, name)
    __repr__ = _swig_repr

    def __init__(self, o):
        """__init__(RMF::Nullable<(RMF::Int)> self, _NullableInt o) -> _NullableInt"""
        this = _RMF.new__NullableInt(o)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(_NullableInt self) -> int"""
        return _RMF._NullableInt_get(self)


    def get_is_null(self):
        """get_is_null(_NullableInt self) -> bool"""
        return _RMF._NullableInt_get_is_null(self)


    def get_ptr(self):
        """get_ptr(_NullableInt self) -> int const *"""
        return _RMF._NullableInt_get_ptr(self)

    __swig_destroy__ = _RMF.delete__NullableInt
    __del__ = lambda self: None
_NullableInt_swigregister = _RMF._NullableInt_swigregister
_NullableInt_swigregister(_NullableInt)

class _NullableFloat(_object):
    """Proxy of C++ RMF::Nullable<(RMF::Float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NullableFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NullableFloat, name)
    __repr__ = _swig_repr

    def __init__(self, o):
        """__init__(RMF::Nullable<(RMF::Float)> self, _NullableFloat o) -> _NullableFloat"""
        this = _RMF.new__NullableFloat(o)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(_NullableFloat self) -> float"""
        return _RMF._NullableFloat_get(self)


    def get_is_null(self):
        """get_is_null(_NullableFloat self) -> bool"""
        return _RMF._NullableFloat_get_is_null(self)


    def get_ptr(self):
        """get_ptr(_NullableFloat self) -> float const *"""
        return _RMF._NullableFloat_get_ptr(self)

    __swig_destroy__ = _RMF.delete__NullableFloat
    __del__ = lambda self: None
_NullableFloat_swigregister = _RMF._NullableFloat_swigregister
_NullableFloat_swigregister(_NullableFloat)

class _NullableString(_object):
    """Proxy of C++ RMF::Nullable<(RMF::String)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NullableString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NullableString, name)
    __repr__ = _swig_repr

    def __init__(self, o):
        """__init__(RMF::Nullable<(RMF::String)> self, _NullableString o) -> _NullableString"""
        this = _RMF.new__NullableString(o)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(_NullableString self) -> std::string"""
        return _RMF._NullableString_get(self)


    def get_is_null(self):
        """get_is_null(_NullableString self) -> bool"""
        return _RMF._NullableString_get_is_null(self)


    def get_ptr(self):
        """get_ptr(_NullableString self) -> std::string const *"""
        return _RMF._NullableString_get_ptr(self)

    __swig_destroy__ = _RMF.delete__NullableString
    __del__ = lambda self: None
_NullableString_swigregister = _RMF._NullableString_swigregister
_NullableString_swigregister(_NullableString)

class _NullableVector3(_object):
    """Proxy of C++ RMF::Nullable<(RMF::Vector<(3U)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NullableVector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NullableVector3, name)
    __repr__ = _swig_repr

    def __init__(self, o):
        """__init__(RMF::Nullable<(RMF::Vector<(3U)>)> self, _NullableVector3 o) -> _NullableVector3"""
        this = _RMF.new__NullableVector3(o)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(_NullableVector3 self) -> Vector3"""
        return _RMF._NullableVector3_get(self)


    def get_is_null(self):
        """get_is_null(_NullableVector3 self) -> bool"""
        return _RMF._NullableVector3_get_is_null(self)


    def get_ptr(self):
        """get_ptr(_NullableVector3 self) -> Vector3"""
        return _RMF._NullableVector3_get_ptr(self)

    __swig_destroy__ = _RMF.delete__NullableVector3
    __del__ = lambda self: None
_NullableVector3_swigregister = _RMF._NullableVector3_swigregister
_NullableVector3_swigregister(_NullableVector3)

class _NullableVector4(_object):
    """Proxy of C++ RMF::Nullable<(RMF::Vector<(4U)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NullableVector4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NullableVector4, name)
    __repr__ = _swig_repr

    def __init__(self, o):
        """__init__(RMF::Nullable<(RMF::Vector<(4U)>)> self, _NullableVector4 o) -> _NullableVector4"""
        this = _RMF.new__NullableVector4(o)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(_NullableVector4 self) -> Vector4"""
        return _RMF._NullableVector4_get(self)


    def get_is_null(self):
        """get_is_null(_NullableVector4 self) -> bool"""
        return _RMF._NullableVector4_get_is_null(self)


    def get_ptr(self):
        """get_ptr(_NullableVector4 self) -> Vector4"""
        return _RMF._NullableVector4_get_ptr(self)

    __swig_destroy__ = _RMF.delete__NullableVector4
    __del__ = lambda self: None
_NullableVector4_swigregister = _RMF._NullableVector4_swigregister
_NullableVector4_swigregister(_NullableVector4)

class _NullableInts(_object):
    """Proxy of C++ RMF::Nullable<(RMF::Ints)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NullableInts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NullableInts, name)
    __repr__ = _swig_repr

    def __init__(self, o):
        """__init__(RMF::Nullable<(RMF::Ints)> self, _NullableInts o) -> _NullableInts"""
        this = _RMF.new__NullableInts(o)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(_NullableInts self) -> Ints"""
        return _RMF._NullableInts_get(self)


    def get_is_null(self):
        """get_is_null(_NullableInts self) -> bool"""
        return _RMF._NullableInts_get_is_null(self)


    def get_ptr(self):
        """get_ptr(_NullableInts self) -> Ints"""
        return _RMF._NullableInts_get_ptr(self)

    __swig_destroy__ = _RMF.delete__NullableInts
    __del__ = lambda self: None
_NullableInts_swigregister = _RMF._NullableInts_swigregister
_NullableInts_swigregister(_NullableInts)

class _NullableFloats(_object):
    """Proxy of C++ RMF::Nullable<(RMF::Floats)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NullableFloats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NullableFloats, name)
    __repr__ = _swig_repr

    def __init__(self, o):
        """__init__(RMF::Nullable<(RMF::Floats)> self, _NullableFloats o) -> _NullableFloats"""
        this = _RMF.new__NullableFloats(o)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(_NullableFloats self) -> Floats"""
        return _RMF._NullableFloats_get(self)


    def get_is_null(self):
        """get_is_null(_NullableFloats self) -> bool"""
        return _RMF._NullableFloats_get_is_null(self)


    def get_ptr(self):
        """get_ptr(_NullableFloats self) -> Floats"""
        return _RMF._NullableFloats_get_ptr(self)

    __swig_destroy__ = _RMF.delete__NullableFloats
    __del__ = lambda self: None
_NullableFloats_swigregister = _RMF._NullableFloats_swigregister
_NullableFloats_swigregister(_NullableFloats)

class _NullableStrings(_object):
    """Proxy of C++ RMF::Nullable<(RMF::Strings)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NullableStrings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NullableStrings, name)
    __repr__ = _swig_repr

    def __init__(self, o):
        """__init__(RMF::Nullable<(RMF::Strings)> self, _NullableStrings o) -> _NullableStrings"""
        this = _RMF.new__NullableStrings(o)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(_NullableStrings self) -> Strings"""
        return _RMF._NullableStrings_get(self)


    def get_is_null(self):
        """get_is_null(_NullableStrings self) -> bool"""
        return _RMF._NullableStrings_get_is_null(self)


    def get_ptr(self):
        """get_ptr(_NullableStrings self) -> Strings"""
        return _RMF._NullableStrings_get_ptr(self)

    __swig_destroy__ = _RMF.delete__NullableStrings
    __del__ = lambda self: None
_NullableStrings_swigregister = _RMF._NullableStrings_swigregister
_NullableStrings_swigregister(_NullableStrings)

class _NullableVector3s(_object):
    """Proxy of C++ RMF::Nullable<(std::vector<(RMF::Vector<(3U)>)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _NullableVector3s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _NullableVector3s, name)
    __repr__ = _swig_repr

    def __init__(self, o):
        """__init__(RMF::Nullable<(std::vector<(RMF::Vector<(3U)>)>)> self, _NullableVector3s o) -> _NullableVector3s"""
        this = _RMF.new__NullableVector3s(o)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self):
        """get(_NullableVector3s self) -> Vector3s"""
        return _RMF._NullableVector3s_get(self)


    def get_is_null(self):
        """get_is_null(_NullableVector3s self) -> bool"""
        return _RMF._NullableVector3s_get_is_null(self)


    def get_ptr(self):
        """get_ptr(_NullableVector3s self) -> Vector3s"""
        return _RMF._NullableVector3s_get_ptr(self)

    __swig_destroy__ = _RMF.delete__NullableVector3s
    __del__ = lambda self: None
_NullableVector3s_swigregister = _RMF._NullableVector3s_swigregister
_NullableVector3s_swigregister(_NullableVector3s)


def _get_rmf_version():
    """_get_rmf_version() -> std::string"""
    return _RMF._get_rmf_version()

__version__ = _get_rmf_version()

class FrameTypeTag(_object):
    """Proxy of C++ RMF::FrameTypeTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameTypeTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameTypeTag, name)
    __repr__ = _swig_repr

    def get_from():
        """get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
        return _RMF.FrameTypeTag_get_from()

    get_from = staticmethod(get_from)

    def get_to():
        """get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
        return _RMF.FrameTypeTag_get_to()

    get_to = staticmethod(get_to)

    def __init__(self):
        """__init__(RMF::FrameTypeTag self) -> FrameTypeTag"""
        this = _RMF.new_FrameTypeTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_FrameTypeTag
    __del__ = lambda self: None
FrameTypeTag_swigregister = _RMF.FrameTypeTag_swigregister
FrameTypeTag_swigregister(FrameTypeTag)

def FrameTypeTag_get_from():
    """FrameTypeTag_get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
    return _RMF.FrameTypeTag_get_from()

def FrameTypeTag_get_to():
    """FrameTypeTag_get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
    return _RMF.FrameTypeTag_get_to()

class NodeTypeTag(_object):
    """Proxy of C++ RMF::NodeTypeTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeTypeTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeTypeTag, name)
    __repr__ = _swig_repr

    def get_from():
        """get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
        return _RMF.NodeTypeTag_get_from()

    get_from = staticmethod(get_from)

    def get_to():
        """get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
        return _RMF.NodeTypeTag_get_to()

    get_to = staticmethod(get_to)

    def __init__(self):
        """__init__(RMF::NodeTypeTag self) -> NodeTypeTag"""
        this = _RMF.new_NodeTypeTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_NodeTypeTag
    __del__ = lambda self: None
NodeTypeTag_swigregister = _RMF.NodeTypeTag_swigregister
NodeTypeTag_swigregister(NodeTypeTag)

def NodeTypeTag_get_from():
    """NodeTypeTag_get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
    return _RMF.NodeTypeTag_get_from()

def NodeTypeTag_get_to():
    """NodeTypeTag_get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
    return _RMF.NodeTypeTag_get_to()

class RepresentationTypeTag(_object):
    """Proxy of C++ RMF::RepresentationTypeTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepresentationTypeTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RepresentationTypeTag, name)
    __repr__ = _swig_repr

    def get_from():
        """get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
        return _RMF.RepresentationTypeTag_get_from()

    get_from = staticmethod(get_from)

    def get_to():
        """get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
        return _RMF.RepresentationTypeTag_get_to()

    get_to = staticmethod(get_to)

    def __init__(self):
        """__init__(RMF::RepresentationTypeTag self) -> RepresentationTypeTag"""
        this = _RMF.new_RepresentationTypeTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_RepresentationTypeTag
    __del__ = lambda self: None
RepresentationTypeTag_swigregister = _RMF.RepresentationTypeTag_swigregister
RepresentationTypeTag_swigregister(RepresentationTypeTag)

def RepresentationTypeTag_get_from():
    """RepresentationTypeTag_get_from() -> RMF_SMALL_UNORDERED_MAP< std::string,int > &"""
    return _RMF.RepresentationTypeTag_get_from()

def RepresentationTypeTag_get_to():
    """RepresentationTypeTag_get_to() -> RMF_SMALL_UNORDERED_MAP< int,std::string > &"""
    return _RMF.RepresentationTypeTag_get_to()

class NodeType(_object):
    """Proxy of C++ RMF::Enum<(RMF::NodeTypeTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeType, name)

    def __init__(self, *args):
        """
        __init__(RMF::Enum<(RMF::NodeTypeTag)> self) -> NodeType
        __init__(RMF::Enum<(RMF::NodeTypeTag)> self, int i) -> NodeType
        __init__(RMF::Enum<(RMF::NodeTypeTag)> self, bool arg2, int i) -> NodeType
        __init__(RMF::Enum<(RMF::NodeTypeTag)> self, std::string name) -> NodeType
        __init__(RMF::Enum<(RMF::NodeTypeTag)> self, int i, std::string name) -> NodeType
        """
        this = _RMF.new_NodeType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, o):
        """__eq__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___eq__(self, o)


    def __ne__(self, o):
        """__ne__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___ne__(self, o)


    def __lt__(self, o):
        """__lt__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___lt__(self, o)


    def __gt__(self, o):
        """__gt__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___gt__(self, o)


    def __ge__(self, o):
        """__ge__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___ge__(self, o)


    def __le__(self, o):
        """__le__(NodeType self, NodeType o) -> bool"""
        return _RMF.NodeType___le__(self, o)


    def __hash__(self):
        """__hash__(NodeType self) -> std::size_t"""
        return _RMF.NodeType___hash__(self)


    def __str__(self):
        """__str__(NodeType self) -> std::string"""
        return _RMF.NodeType___str__(self)


    def __repr__(self):
        """__repr__(NodeType self) -> std::string"""
        return _RMF.NodeType___repr__(self)

    __swig_destroy__ = _RMF.delete_NodeType
    __del__ = lambda self: None
NodeType_swigregister = _RMF.NodeType_swigregister
NodeType_swigregister(NodeType)

class FrameType(_object):
    """Proxy of C++ RMF::Enum<(RMF::FrameTypeTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameType, name)

    def __init__(self, *args):
        """
        __init__(RMF::Enum<(RMF::FrameTypeTag)> self) -> FrameType
        __init__(RMF::Enum<(RMF::FrameTypeTag)> self, int i) -> FrameType
        __init__(RMF::Enum<(RMF::FrameTypeTag)> self, bool arg2, int i) -> FrameType
        __init__(RMF::Enum<(RMF::FrameTypeTag)> self, std::string name) -> FrameType
        __init__(RMF::Enum<(RMF::FrameTypeTag)> self, int i, std::string name) -> FrameType
        """
        this = _RMF.new_FrameType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, o):
        """__eq__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___eq__(self, o)


    def __ne__(self, o):
        """__ne__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___ne__(self, o)


    def __lt__(self, o):
        """__lt__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___lt__(self, o)


    def __gt__(self, o):
        """__gt__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___gt__(self, o)


    def __ge__(self, o):
        """__ge__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___ge__(self, o)


    def __le__(self, o):
        """__le__(FrameType self, FrameType o) -> bool"""
        return _RMF.FrameType___le__(self, o)


    def __hash__(self):
        """__hash__(FrameType self) -> std::size_t"""
        return _RMF.FrameType___hash__(self)


    def __str__(self):
        """__str__(FrameType self) -> std::string"""
        return _RMF.FrameType___str__(self)


    def __repr__(self):
        """__repr__(FrameType self) -> std::string"""
        return _RMF.FrameType___repr__(self)

    __swig_destroy__ = _RMF.delete_FrameType
    __del__ = lambda self: None
FrameType_swigregister = _RMF.FrameType_swigregister
FrameType_swigregister(FrameType)

class RepresentationType(_object):
    """Proxy of C++ RMF::Enum<(RMF::RepresentationTypeTag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepresentationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RepresentationType, name)

    def __init__(self, *args):
        """
        __init__(RMF::Enum<(RMF::RepresentationTypeTag)> self) -> RepresentationType
        __init__(RMF::Enum<(RMF::RepresentationTypeTag)> self, int i) -> RepresentationType
        __init__(RMF::Enum<(RMF::RepresentationTypeTag)> self, bool arg2, int i) -> RepresentationType
        __init__(RMF::Enum<(RMF::RepresentationTypeTag)> self, std::string name) -> RepresentationType
        __init__(RMF::Enum<(RMF::RepresentationTypeTag)> self, int i, std::string name) -> RepresentationType
        """
        this = _RMF.new_RepresentationType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, o):
        """__eq__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___eq__(self, o)


    def __ne__(self, o):
        """__ne__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___ne__(self, o)


    def __lt__(self, o):
        """__lt__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___lt__(self, o)


    def __gt__(self, o):
        """__gt__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___gt__(self, o)


    def __ge__(self, o):
        """__ge__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___ge__(self, o)


    def __le__(self, o):
        """__le__(RepresentationType self, RepresentationType o) -> bool"""
        return _RMF.RepresentationType___le__(self, o)


    def __hash__(self):
        """__hash__(RepresentationType self) -> std::size_t"""
        return _RMF.RepresentationType___hash__(self)


    def __str__(self):
        """__str__(RepresentationType self) -> std::string"""
        return _RMF.RepresentationType___str__(self)


    def __repr__(self):
        """__repr__(RepresentationType self) -> std::string"""
        return _RMF.RepresentationType___repr__(self)

    __swig_destroy__ = _RMF.delete_RepresentationType
    __del__ = lambda self: None
RepresentationType_swigregister = _RMF.RepresentationType_swigregister
RepresentationType_swigregister(RepresentationType)

class NodeConstHandle(NodeID):
    """Proxy of C++ RMF::NodeConstHandle class."""

    __swig_setmethods__ = {}
    for _s in [NodeID]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeConstHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeID]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeConstHandle, name)

    def get_id(self):
        """get_id(NodeConstHandle self) -> NodeID"""
        return _RMF.NodeConstHandle_get_id(self)


    def __eq__(self, o):
        """__eq__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___eq__(self, o)


    def __ne__(self, o):
        """__ne__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___ne__(self, o)


    def __lt__(self, o):
        """__lt__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___lt__(self, o)


    def __gt__(self, o):
        """__gt__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___gt__(self, o)


    def __ge__(self, o):
        """__ge__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___ge__(self, o)


    def __le__(self, o):
        """__le__(NodeConstHandle self, NodeConstHandle o) -> bool"""
        return _RMF.NodeConstHandle___le__(self, o)


    def __hash__(self):
        """__hash__(NodeConstHandle self) -> std::size_t"""
        return _RMF.NodeConstHandle___hash__(self)


    def __init__(self):
        """__init__(RMF::NodeConstHandle self) -> NodeConstHandle"""
        this = _RMF.new_NodeConstHandle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_name(self):
        """get_name(NodeConstHandle self) -> std::string"""
        return _RMF.NodeConstHandle_get_name(self)


    def get_children(self):
        """get_children(NodeConstHandle self) -> NodeConstHandles"""
        return _RMF.NodeConstHandle_get_children(self)


    def set_association(self, v, overwrite=False):
        """
        set_association(NodeConstHandle self, void * v, bool overwrite=False)
        set_association(NodeConstHandle self, void * v)
        """
        return _RMF.NodeConstHandle_set_association(self, v, overwrite)


    def get_has_association(self):
        """get_has_association(NodeConstHandle self) -> bool"""
        return _RMF.NodeConstHandle_get_has_association(self)


    def get_type(self):
        """get_type(NodeConstHandle self) -> NodeType"""
        return _RMF.NodeConstHandle_get_type(self)


    def get_value(self, *args):
        return _handle_nullable( _RMF.NodeConstHandle_get_value(self, *args))



    def get_has_value(self, *args):
        """
        get_has_value(NodeConstHandle self, IntKey k) -> bool
        get_has_value(NodeConstHandle self, FloatKey k) -> bool
        get_has_value(NodeConstHandle self, StringKey k) -> bool
        get_has_value(NodeConstHandle self, IntsKey k) -> bool
        get_has_value(NodeConstHandle self, FloatsKey k) -> bool
        get_has_value(NodeConstHandle self, StringsKey k) -> bool
        get_has_value(NodeConstHandle self, Vector3Key k) -> bool
        get_has_value(NodeConstHandle self, Vector4Key k) -> bool
        get_has_value(NodeConstHandle self, Vector3sKey k) -> bool
        """
        return _RMF.NodeConstHandle_get_has_value(self, *args)


    def get_frame_value(self, *args):
        return _handle_nullable( _RMF.NodeConstHandle_get_frame_value(self, *args))



    def get_static_value(self, *args):
        return _handle_nullable( _RMF.NodeConstHandle_get_static_value(self, *args))



    def __str__(self):
        """__str__(NodeConstHandle self) -> std::string"""
        return _RMF.NodeConstHandle___str__(self)


    def __repr__(self):
        """__repr__(NodeConstHandle self) -> std::string"""
        return _RMF.NodeConstHandle___repr__(self)


    def get_file(self):
        """get_file(NodeConstHandle self) -> FileConstHandle"""
        return _RMF.NodeConstHandle_get_file(self)

    __swig_destroy__ = _RMF.delete_NodeConstHandle
    __del__ = lambda self: None
NodeConstHandle_swigregister = _RMF.NodeConstHandle_swigregister
NodeConstHandle_swigregister(NodeConstHandle)
cvar = _RMF.cvar
INVALID_NODE_TYPE = cvar.INVALID_NODE_TYPE
ROOT = cvar.ROOT
REPRESENTATION = cvar.REPRESENTATION
GEOMETRY = cvar.GEOMETRY
FEATURE = cvar.FEATURE
ALIAS = cvar.ALIAS
CUSTOM = cvar.CUSTOM
BOND = cvar.BOND
ORGANIZATIONAL = cvar.ORGANIZATIONAL
PROVENANCE = cvar.PROVENANCE
LINK = cvar.LINK
INVALID_FRAME_TYPE = cvar.INVALID_FRAME_TYPE
STATIC = cvar.STATIC
FRAME = cvar.FRAME
MODEL = cvar.MODEL
CENTER = cvar.CENTER
FRAME_ALIAS = cvar.FRAME_ALIAS
ALTERNATE = cvar.ALTERNATE
PARTICLE = cvar.PARTICLE
GAUSSIAN_PARTICLE = cvar.GAUSSIAN_PARTICLE

class NodeConstHandles(_object):
    """Proxy of C++ std::vector<(RMF::NodeConstHandle)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeConstHandles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeConstHandles, name)

    def iterator(self):
        """iterator(NodeConstHandles self) -> RMF_SwigPyIterator"""
        return _RMF.NodeConstHandles_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(NodeConstHandles self) -> bool"""
        return _RMF.NodeConstHandles___nonzero__(self)


    def __bool__(self):
        """__bool__(NodeConstHandles self) -> bool"""
        return _RMF.NodeConstHandles___bool__(self)


    def __len__(self):
        """__len__(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::size_type"""
        return _RMF.NodeConstHandles___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i, std::vector< RMF::NodeConstHandle >::difference_type j) -> NodeConstHandles"""
        return _RMF.NodeConstHandles___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i, std::vector< RMF::NodeConstHandle >::difference_type j)
        __setslice__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i, std::vector< RMF::NodeConstHandle >::difference_type j, NodeConstHandles v)
        """
        return _RMF.NodeConstHandles___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i, std::vector< RMF::NodeConstHandle >::difference_type j)"""
        return _RMF.NodeConstHandles___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i)
        __delitem__(NodeConstHandles self, PySliceObject * slice)
        """
        return _RMF.NodeConstHandles___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(NodeConstHandles self, PySliceObject * slice) -> NodeConstHandles
        __getitem__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i) -> NodeConstHandle
        """
        return _RMF.NodeConstHandles___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(NodeConstHandles self, PySliceObject * slice, NodeConstHandles v)
        __setitem__(NodeConstHandles self, PySliceObject * slice)
        __setitem__(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::difference_type i, NodeConstHandle x)
        """
        return _RMF.NodeConstHandles___setitem__(self, *args)


    def pop(self):
        """pop(NodeConstHandles self) -> NodeConstHandle"""
        return _RMF.NodeConstHandles_pop(self)


    def append(self, x):
        """append(NodeConstHandles self, NodeConstHandle x)"""
        return _RMF.NodeConstHandles_append(self, x)


    def empty(self):
        """empty(NodeConstHandles self) -> bool"""
        return _RMF.NodeConstHandles_empty(self)


    def size(self):
        """size(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::size_type"""
        return _RMF.NodeConstHandles_size(self)


    def swap(self, v):
        """swap(NodeConstHandles self, NodeConstHandles v)"""
        return _RMF.NodeConstHandles_swap(self, v)


    def begin(self):
        """begin(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::iterator"""
        return _RMF.NodeConstHandles_begin(self)


    def end(self):
        """end(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::iterator"""
        return _RMF.NodeConstHandles_end(self)


    def rbegin(self):
        """rbegin(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::reverse_iterator"""
        return _RMF.NodeConstHandles_rbegin(self)


    def rend(self):
        """rend(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::reverse_iterator"""
        return _RMF.NodeConstHandles_rend(self)


    def clear(self):
        """clear(NodeConstHandles self)"""
        return _RMF.NodeConstHandles_clear(self)


    def get_allocator(self):
        """get_allocator(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::allocator_type"""
        return _RMF.NodeConstHandles_get_allocator(self)


    def pop_back(self):
        """pop_back(NodeConstHandles self)"""
        return _RMF.NodeConstHandles_pop_back(self)


    def erase(self, *args):
        """
        erase(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::iterator pos) -> std::vector< RMF::NodeConstHandle >::iterator
        erase(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::iterator first, std::vector< RMF::NodeConstHandle >::iterator last) -> std::vector< RMF::NodeConstHandle >::iterator
        """
        return _RMF.NodeConstHandles_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::NodeConstHandle)> self) -> NodeConstHandles
        __init__(std::vector<(RMF::NodeConstHandle)> self, NodeConstHandles arg2) -> NodeConstHandles
        __init__(std::vector<(RMF::NodeConstHandle)> self, std::vector< RMF::NodeConstHandle >::size_type size) -> NodeConstHandles
        __init__(std::vector<(RMF::NodeConstHandle)> self, std::vector< RMF::NodeConstHandle >::size_type size, NodeConstHandle value) -> NodeConstHandles
        """
        this = _RMF.new_NodeConstHandles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(NodeConstHandles self, NodeConstHandle x)"""
        return _RMF.NodeConstHandles_push_back(self, x)


    def front(self):
        """front(NodeConstHandles self) -> NodeConstHandle"""
        return _RMF.NodeConstHandles_front(self)


    def back(self):
        """back(NodeConstHandles self) -> NodeConstHandle"""
        return _RMF.NodeConstHandles_back(self)


    def assign(self, n, x):
        """assign(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::size_type n, NodeConstHandle x)"""
        return _RMF.NodeConstHandles_assign(self, n, x)


    def resize(self, *args):
        """
        resize(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::size_type new_size)
        resize(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::size_type new_size, NodeConstHandle x)
        """
        return _RMF.NodeConstHandles_resize(self, *args)


    def insert(self, *args):
        """
        insert(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::iterator pos, NodeConstHandle x) -> std::vector< RMF::NodeConstHandle >::iterator
        insert(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::iterator pos, std::vector< RMF::NodeConstHandle >::size_type n, NodeConstHandle x)
        """
        return _RMF.NodeConstHandles_insert(self, *args)


    def reserve(self, n):
        """reserve(NodeConstHandles self, std::vector< RMF::NodeConstHandle >::size_type n)"""
        return _RMF.NodeConstHandles_reserve(self, n)


    def capacity(self):
        """capacity(NodeConstHandles self) -> std::vector< RMF::NodeConstHandle >::size_type"""
        return _RMF.NodeConstHandles_capacity(self)


    def __str__(self):
        """__str__(NodeConstHandles self) -> std::string"""
        return _RMF.NodeConstHandles___str__(self)


    def __repr__(self):
        """__repr__(NodeConstHandles self) -> std::string"""
        return _RMF.NodeConstHandles___repr__(self)

    __swig_destroy__ = _RMF.delete_NodeConstHandles
    __del__ = lambda self: None
NodeConstHandles_swigregister = _RMF.NodeConstHandles_swigregister
NodeConstHandles_swigregister(NodeConstHandles)

class NodeHandle(NodeConstHandle):
    """Proxy of C++ RMF::NodeHandle class."""

    __swig_setmethods__ = {}
    for _s in [NodeConstHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeConstHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeHandle, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::NodeHandle self) -> NodeHandle"""
        this = _RMF.new_NodeHandle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add_child(self, *args):
        """
        add_child(NodeHandle self, std::string name, NodeType t) -> NodeHandle
        add_child(NodeHandle self, NodeConstHandle nh)
        """
        return _RMF.NodeHandle_add_child(self, *args)


    def replace_child(self, child, name, t):
        """replace_child(NodeHandle self, NodeHandle child, std::string name, NodeType t) -> NodeHandle"""
        return _RMF.NodeHandle_replace_child(self, child, name, t)


    def get_children(self):
        """get_children(NodeHandle self) -> NodeHandles"""
        return _RMF.NodeHandle_get_children(self)


    def set_frame_value(self, *args):
        """
        set_frame_value(NodeHandle self, IntKey k, RMF::Int v)
        set_frame_value(NodeHandle self, FloatKey k, RMF::Float v)
        set_frame_value(NodeHandle self, StringKey k, RMF::String v)
        set_frame_value(NodeHandle self, IntsKey k, Ints v)
        set_frame_value(NodeHandle self, FloatsKey k, Floats v)
        set_frame_value(NodeHandle self, StringsKey k, Strings v)
        set_frame_value(NodeHandle self, Vector3Key k, Vector3 v)
        set_frame_value(NodeHandle self, Vector4Key k, Vector4 v)
        set_frame_value(NodeHandle self, Vector3sKey k, Vector3s v)
        """
        return _RMF.NodeHandle_set_frame_value(self, *args)


    def set_value(self, *args):
        """
        set_value(NodeHandle self, IntKey k, RMF::Int v)
        set_value(NodeHandle self, FloatKey k, RMF::Float v)
        set_value(NodeHandle self, StringKey k, RMF::String v)
        set_value(NodeHandle self, IntsKey k, Ints v)
        set_value(NodeHandle self, FloatsKey k, Floats v)
        set_value(NodeHandle self, StringsKey k, Strings v)
        set_value(NodeHandle self, Vector3Key k, Vector3 v)
        set_value(NodeHandle self, Vector4Key k, Vector4 v)
        set_value(NodeHandle self, Vector3sKey k, Vector3s v)
        """
        return _RMF.NodeHandle_set_value(self, *args)


    def set_static_value(self, *args):
        """
        set_static_value(NodeHandle self, IntKey k, RMF::Int v)
        set_static_value(NodeHandle self, FloatKey k, RMF::Float v)
        set_static_value(NodeHandle self, StringKey k, RMF::String v)
        set_static_value(NodeHandle self, IntsKey k, Ints v)
        set_static_value(NodeHandle self, FloatsKey k, Floats v)
        set_static_value(NodeHandle self, StringsKey k, Strings v)
        set_static_value(NodeHandle self, Vector3Key k, Vector3 v)
        set_static_value(NodeHandle self, Vector4Key k, Vector4 v)
        set_static_value(NodeHandle self, Vector3sKey k, Vector3s v)
        """
        return _RMF.NodeHandle_set_static_value(self, *args)


    def get_file(self):
        """get_file(NodeHandle self) -> FileHandle"""
        return _RMF.NodeHandle_get_file(self)

    __swig_destroy__ = _RMF.delete_NodeHandle
    __del__ = lambda self: None
NodeHandle_swigregister = _RMF.NodeHandle_swigregister
NodeHandle_swigregister(NodeHandle)

class NodeHandles(_object):
    """Proxy of C++ std::vector<(RMF::NodeHandle)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeHandles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeHandles, name)

    def iterator(self):
        """iterator(NodeHandles self) -> RMF_SwigPyIterator"""
        return _RMF.NodeHandles_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(NodeHandles self) -> bool"""
        return _RMF.NodeHandles___nonzero__(self)


    def __bool__(self):
        """__bool__(NodeHandles self) -> bool"""
        return _RMF.NodeHandles___bool__(self)


    def __len__(self):
        """__len__(NodeHandles self) -> std::vector< RMF::NodeHandle >::size_type"""
        return _RMF.NodeHandles___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i, std::vector< RMF::NodeHandle >::difference_type j) -> NodeHandles"""
        return _RMF.NodeHandles___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i, std::vector< RMF::NodeHandle >::difference_type j)
        __setslice__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i, std::vector< RMF::NodeHandle >::difference_type j, NodeHandles v)
        """
        return _RMF.NodeHandles___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i, std::vector< RMF::NodeHandle >::difference_type j)"""
        return _RMF.NodeHandles___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i)
        __delitem__(NodeHandles self, PySliceObject * slice)
        """
        return _RMF.NodeHandles___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(NodeHandles self, PySliceObject * slice) -> NodeHandles
        __getitem__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i) -> NodeHandle
        """
        return _RMF.NodeHandles___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(NodeHandles self, PySliceObject * slice, NodeHandles v)
        __setitem__(NodeHandles self, PySliceObject * slice)
        __setitem__(NodeHandles self, std::vector< RMF::NodeHandle >::difference_type i, NodeHandle x)
        """
        return _RMF.NodeHandles___setitem__(self, *args)


    def pop(self):
        """pop(NodeHandles self) -> NodeHandle"""
        return _RMF.NodeHandles_pop(self)


    def append(self, x):
        """append(NodeHandles self, NodeHandle x)"""
        return _RMF.NodeHandles_append(self, x)


    def empty(self):
        """empty(NodeHandles self) -> bool"""
        return _RMF.NodeHandles_empty(self)


    def size(self):
        """size(NodeHandles self) -> std::vector< RMF::NodeHandle >::size_type"""
        return _RMF.NodeHandles_size(self)


    def swap(self, v):
        """swap(NodeHandles self, NodeHandles v)"""
        return _RMF.NodeHandles_swap(self, v)


    def begin(self):
        """begin(NodeHandles self) -> std::vector< RMF::NodeHandle >::iterator"""
        return _RMF.NodeHandles_begin(self)


    def end(self):
        """end(NodeHandles self) -> std::vector< RMF::NodeHandle >::iterator"""
        return _RMF.NodeHandles_end(self)


    def rbegin(self):
        """rbegin(NodeHandles self) -> std::vector< RMF::NodeHandle >::reverse_iterator"""
        return _RMF.NodeHandles_rbegin(self)


    def rend(self):
        """rend(NodeHandles self) -> std::vector< RMF::NodeHandle >::reverse_iterator"""
        return _RMF.NodeHandles_rend(self)


    def clear(self):
        """clear(NodeHandles self)"""
        return _RMF.NodeHandles_clear(self)


    def get_allocator(self):
        """get_allocator(NodeHandles self) -> std::vector< RMF::NodeHandle >::allocator_type"""
        return _RMF.NodeHandles_get_allocator(self)


    def pop_back(self):
        """pop_back(NodeHandles self)"""
        return _RMF.NodeHandles_pop_back(self)


    def erase(self, *args):
        """
        erase(NodeHandles self, std::vector< RMF::NodeHandle >::iterator pos) -> std::vector< RMF::NodeHandle >::iterator
        erase(NodeHandles self, std::vector< RMF::NodeHandle >::iterator first, std::vector< RMF::NodeHandle >::iterator last) -> std::vector< RMF::NodeHandle >::iterator
        """
        return _RMF.NodeHandles_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::NodeHandle)> self) -> NodeHandles
        __init__(std::vector<(RMF::NodeHandle)> self, NodeHandles arg2) -> NodeHandles
        __init__(std::vector<(RMF::NodeHandle)> self, std::vector< RMF::NodeHandle >::size_type size) -> NodeHandles
        __init__(std::vector<(RMF::NodeHandle)> self, std::vector< RMF::NodeHandle >::size_type size, NodeHandle value) -> NodeHandles
        """
        this = _RMF.new_NodeHandles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(NodeHandles self, NodeHandle x)"""
        return _RMF.NodeHandles_push_back(self, x)


    def front(self):
        """front(NodeHandles self) -> NodeHandle"""
        return _RMF.NodeHandles_front(self)


    def back(self):
        """back(NodeHandles self) -> NodeHandle"""
        return _RMF.NodeHandles_back(self)


    def assign(self, n, x):
        """assign(NodeHandles self, std::vector< RMF::NodeHandle >::size_type n, NodeHandle x)"""
        return _RMF.NodeHandles_assign(self, n, x)


    def resize(self, *args):
        """
        resize(NodeHandles self, std::vector< RMF::NodeHandle >::size_type new_size)
        resize(NodeHandles self, std::vector< RMF::NodeHandle >::size_type new_size, NodeHandle x)
        """
        return _RMF.NodeHandles_resize(self, *args)


    def insert(self, *args):
        """
        insert(NodeHandles self, std::vector< RMF::NodeHandle >::iterator pos, NodeHandle x) -> std::vector< RMF::NodeHandle >::iterator
        insert(NodeHandles self, std::vector< RMF::NodeHandle >::iterator pos, std::vector< RMF::NodeHandle >::size_type n, NodeHandle x)
        """
        return _RMF.NodeHandles_insert(self, *args)


    def reserve(self, n):
        """reserve(NodeHandles self, std::vector< RMF::NodeHandle >::size_type n)"""
        return _RMF.NodeHandles_reserve(self, n)


    def capacity(self):
        """capacity(NodeHandles self) -> std::vector< RMF::NodeHandle >::size_type"""
        return _RMF.NodeHandles_capacity(self)


    def __str__(self):
        """__str__(NodeHandles self) -> std::string"""
        return _RMF.NodeHandles___str__(self)


    def __repr__(self):
        """__repr__(NodeHandles self) -> std::string"""
        return _RMF.NodeHandles___repr__(self)

    __swig_destroy__ = _RMF.delete_NodeHandles
    __del__ = lambda self: None
NodeHandles_swigregister = _RMF.NodeHandles_swigregister
NodeHandles_swigregister(NodeHandles)

class BufferConstHandle(_object):
    """Proxy of C++ RMF::BufferConstHandle class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferConstHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferConstHandle, name)

    def __init__(self, *args):
        """
        __init__(RMF::BufferConstHandle self, std::vector< char,std::allocator< char > > const & r) -> BufferConstHandle
        __init__(RMF::BufferConstHandle self, std::vector< uint8_t,std::allocator< uint8_t > > const & r) -> BufferConstHandle
        __init__(RMF::BufferConstHandle self, std::shared_ptr< std::vector< char,std::allocator< char > > > r) -> BufferConstHandle
        """
        this = _RMF.new_BufferConstHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_buffer(self):
        """get_buffer(BufferConstHandle self) -> std::vector< char,std::allocator< char > > const &"""
        return _RMF.BufferConstHandle_get_buffer(self)


    def __eq__(self, o):
        """__eq__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___eq__(self, o)


    def __ne__(self, o):
        """__ne__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___ne__(self, o)


    def __lt__(self, o):
        """__lt__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___lt__(self, o)


    def __gt__(self, o):
        """__gt__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___gt__(self, o)


    def __ge__(self, o):
        """__ge__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___ge__(self, o)


    def __le__(self, o):
        """__le__(BufferConstHandle self, BufferConstHandle o) -> bool"""
        return _RMF.BufferConstHandle___le__(self, o)


    def __hash__(self):
        """__hash__(BufferConstHandle self) -> std::size_t"""
        return _RMF.BufferConstHandle___hash__(self)


    def __str__(self):
        """__str__(BufferConstHandle self) -> std::string"""
        return _RMF.BufferConstHandle___str__(self)


    def __repr__(self):
        """__repr__(BufferConstHandle self) -> std::string"""
        return _RMF.BufferConstHandle___repr__(self)


    def __getstate__(self):
      return self.get_buffer()

    def __setstate__(self, buff):
      self.__init__(buff)
      return self

    __swig_destroy__ = _RMF.delete_BufferConstHandle
    __del__ = lambda self: None
BufferConstHandle_swigregister = _RMF.BufferConstHandle_swigregister
BufferConstHandle_swigregister(BufferConstHandle)


def read_buffer(file_name):
    """read_buffer(std::string file_name) -> BufferConstHandle"""
    return _RMF.read_buffer(file_name)

def write_buffer(buffer, file_name):
    """write_buffer(BufferConstHandle buffer, std::string file_name)"""
    return _RMF.write_buffer(buffer, file_name)
class BufferHandle(BufferConstHandle):
    """Proxy of C++ RMF::BufferHandle class."""

    __swig_setmethods__ = {}
    for _s in [BufferConstHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferConstHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::BufferHandle self) -> BufferHandle
        __init__(RMF::BufferHandle self, std::vector< char,std::allocator< char > > const & st) -> BufferHandle
        """
        this = _RMF.new_BufferHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_BufferHandle
    __del__ = lambda self: None
BufferHandle_swigregister = _RMF.BufferHandle_swigregister
BufferHandle_swigregister(BufferHandle)

class FileConstHandle(_object):
    """Proxy of C++ RMF::FileConstHandle class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileConstHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileConstHandle, name)

    def __eq__(self, o):
        """__eq__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___eq__(self, o)


    def __ne__(self, o):
        """__ne__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___ne__(self, o)


    def __lt__(self, o):
        """__lt__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___lt__(self, o)


    def __gt__(self, o):
        """__gt__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___gt__(self, o)


    def __ge__(self, o):
        """__ge__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___ge__(self, o)


    def __le__(self, o):
        """__le__(FileConstHandle self, FileConstHandle o) -> bool"""
        return _RMF.FileConstHandle___le__(self, o)


    def __hash__(self):
        """__hash__(FileConstHandle self) -> std::size_t"""
        return _RMF.FileConstHandle___hash__(self)


    def __str__(self):
        """__str__(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle___str__(self)


    def __repr__(self):
        """__repr__(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle___repr__(self)


    def __init__(self):
        """__init__(RMF::FileConstHandle self) -> FileConstHandle"""
        this = _RMF.new_FileConstHandle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_root_node(self):
        """get_root_node(FileConstHandle self) -> NodeConstHandle"""
        return _RMF.FileConstHandle_get_root_node(self)


    def get_is_closed(self):
        """get_is_closed(FileConstHandle self) -> bool"""
        return _RMF.FileConstHandle_get_is_closed(self)


    def close(self):
        """close(FileConstHandle self)"""
        return _RMF.FileConstHandle_close(self)


    def get_path(self):
        """get_path(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle_get_path(self)


    def get_current_frame(self):
        """get_current_frame(FileConstHandle self) -> FrameID"""
        return _RMF.FileConstHandle_get_current_frame(self)


    def get_type(self, fr):
        """get_type(FileConstHandle self, FrameID fr) -> FrameType"""
        return _RMF.FileConstHandle_get_type(self, fr)


    def get_children(self, id):
        """get_children(FileConstHandle self, FrameID id) -> FrameIDs"""
        return _RMF.FileConstHandle_get_children(self, id)


    def get_parents(self, id):
        """get_parents(FileConstHandle self, FrameID id) -> FrameIDs"""
        return _RMF.FileConstHandle_get_parents(self, id)


    def set_current_frame(self, frame):
        """set_current_frame(FileConstHandle self, FrameID frame)"""
        return _RMF.FileConstHandle_set_current_frame(self, frame)


    def get_number_of_frames(self):
        """get_number_of_frames(FileConstHandle self) -> unsigned int"""
        return _RMF.FileConstHandle_get_number_of_frames(self)


    def get_number_of_nodes(self):
        """get_number_of_nodes(FileConstHandle self) -> unsigned int"""
        return _RMF.FileConstHandle_get_number_of_nodes(self)


    def get_file_type(self):
        """get_file_type(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle_get_file_type(self)


    def get_root_frames(self):
        """get_root_frames(FileConstHandle self) -> FrameIDs"""
        return _RMF.FileConstHandle_get_root_frames(self)


    def get_key(self, *args):
        """
        get_key(FileConstHandle self, Category category_id, std::string nm, IntTag arg4) -> IntKey
        get_key(FileConstHandle self, Category category_id, std::string nm, FloatTag arg4) -> FloatKey
        get_key(FileConstHandle self, Category category_id, std::string nm, StringTag arg4) -> StringKey
        get_key(FileConstHandle self, Category category_id, std::string nm, IntsTag arg4) -> IntsKey
        get_key(FileConstHandle self, Category category_id, std::string nm, FloatsTag arg4) -> FloatsKey
        get_key(FileConstHandle self, Category category_id, std::string nm, StringsTag arg4) -> StringsKey
        get_key(FileConstHandle self, Category category_id, std::string nm, Vector3Tag arg4) -> Vector3Key
        get_key(FileConstHandle self, Category category_id, std::string nm, Vector4Tag arg4) -> Vector4Key
        get_key(FileConstHandle self, Category category_id, std::string nm, Vector3sTag arg4) -> Vector3sKey
        """
        return _RMF.FileConstHandle_get_key(self, *args)


    def _get_keys(self, *args):
        """
        _get_keys(FileConstHandle self, Category category_id, IntTag arg3) -> IntKeys
        _get_keys(FileConstHandle self, Category category_id, FloatTag arg3) -> FloatKeys
        _get_keys(FileConstHandle self, Category category_id, StringTag arg3) -> StringKeys
        _get_keys(FileConstHandle self, Category category_id, IntsTag arg3) -> IntsKeys
        _get_keys(FileConstHandle self, Category category_id, FloatsTag arg3) -> FloatsKeys
        _get_keys(FileConstHandle self, Category category_id, StringsTag arg3) -> StringsKeys
        _get_keys(FileConstHandle self, Category category_id, Vector3Tag arg3) -> Vector3Keys
        _get_keys(FileConstHandle self, Category category_id, Vector4Tag arg3) -> Vector4Keys
        _get_keys(FileConstHandle self, Category category_id, Vector3sTag arg3) -> Vector3sKeys
        """
        return _RMF.FileConstHandle__get_keys(self, *args)


    def get_node_from_association(self, v):
        """get_node_from_association(FileConstHandle self, void * v) -> NodeConstHandle"""
        return _RMF.FileConstHandle_get_node_from_association(self, v)


    def get_node(self, id):
        """get_node(FileConstHandle self, NodeID id) -> NodeConstHandle"""
        return _RMF.FileConstHandle_get_node(self, id)


    def get_has_associated_data(self, index):
        """get_has_associated_data(FileConstHandle self, int index) -> bool"""
        return _RMF.FileConstHandle_get_has_associated_data(self, index)


    def get_description(self):
        """get_description(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle_get_description(self)


    def get_producer(self):
        """get_producer(FileConstHandle self) -> std::string"""
        return _RMF.FileConstHandle_get_producer(self)


    def get_category(self, *args):
        """
        get_category(FileConstHandle self, IntKey k) -> Category
        get_category(FileConstHandle self, FloatKey k) -> Category
        get_category(FileConstHandle self, StringKey k) -> Category
        get_category(FileConstHandle self, IntsKey k) -> Category
        get_category(FileConstHandle self, FloatsKey k) -> Category
        get_category(FileConstHandle self, StringsKey k) -> Category
        get_category(FileConstHandle self, Vector3Key k) -> Category
        get_category(FileConstHandle self, Vector4Key k) -> Category
        get_category(FileConstHandle self, Vector3sKey k) -> Category
        get_category(FileConstHandle self, std::string name) -> Category
        """
        return _RMF.FileConstHandle_get_category(self, *args)


    def get_categories(self):
        """get_categories(FileConstHandle self) -> Categories"""
        return _RMF.FileConstHandle_get_categories(self)


    def get_name(self, *args):
        """
        get_name(FileConstHandle self) -> std::string
        get_name(FileConstHandle self, FrameID fr) -> std::string
        get_name(FileConstHandle self, IntKey k) -> std::string
        get_name(FileConstHandle self, FloatKey k) -> std::string
        get_name(FileConstHandle self, StringKey k) -> std::string
        get_name(FileConstHandle self, IntsKey k) -> std::string
        get_name(FileConstHandle self, FloatsKey k) -> std::string
        get_name(FileConstHandle self, StringsKey k) -> std::string
        get_name(FileConstHandle self, Vector3Key k) -> std::string
        get_name(FileConstHandle self, Vector4Key k) -> std::string
        get_name(FileConstHandle self, Vector3sKey k) -> std::string
        get_name(FileConstHandle self, Category kc) -> std::string
        """
        return _RMF.FileConstHandle_get_name(self, *args)


    def reload(self):
        """reload(FileConstHandle self)"""
        return _RMF.FileConstHandle_reload(self)


    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()
        return False

    def get_frames(self):
        class MyRange:
           def __init__(self, mx):
               self.max = mx
           def __getitem__(self, i):
               if i >= self.max:
                    raise IndexError()
               else:
                    return FrameID(i)
           def __len__(self):
               return self.max
        return MyRange(self.get_number_of_frames())
    def get_node_ids(self):
        class MyRange:
           def __init__(self, mx):
               self.max = mx
           def __getitem__(self, i):
               if i >= self.max:
                    raise IndexError()
               else:
                    return NodeID(i)
           def __len__(self):
               return self.max
        return MyRange(self.get_number_of_nodes())
    def get_keys(self, kc):
        ret=[]
        for t in _tag_list:
           ret.extend(self._get_keys(kc, t))
        return ret

    __swig_destroy__ = _RMF.delete_FileConstHandle
    __del__ = lambda self: None
FileConstHandle_swigregister = _RMF.FileConstHandle_swigregister
FileConstHandle_swigregister(FileConstHandle)


def hash_value(*args):
    """
    hash_value(NodeConstHandle t) -> std::size_t
    hash_value(BufferConstHandle t) -> std::size_t
    hash_value(FileConstHandle t) -> std::size_t
    """
    return _RMF.hash_value(*args)

def open_rmf_file_read_only(path):
    """open_rmf_file_read_only(std::string path) -> FileConstHandle"""
    return _RMF.open_rmf_file_read_only(path)

def open_rmf_buffer_read_only(buffer):
    """open_rmf_buffer_read_only(BufferConstHandle buffer) -> FileConstHandle"""
    return _RMF.open_rmf_buffer_read_only(buffer)

def get_values(*args):
    """
    get_values(NodeConstHandles nodes, FloatKey k, RMF::Float missing_value) -> Floats
    get_values(NodeConstHandles nodes, FloatKey k) -> Floats
    """
    return _RMF.get_values(*args)
class FileHandle(FileConstHandle):
    """Proxy of C++ RMF::FileHandle class."""

    __swig_setmethods__ = {}
    for _s in [FileConstHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [FileConstHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileHandle, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::FileHandle self) -> FileHandle"""
        this = _RMF.new_FileHandle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_root_node(self):
        """get_root_node(FileHandle self) -> NodeHandle"""
        return _RMF.FileHandle_get_root_node(self)


    def add_frame(self, *args):
        """
        add_frame(FileHandle self, std::string name, FrameType t) -> FrameID
        add_frame(FileHandle self, std::string name) -> FrameID
        add_frame(FileHandle self, std::string name, FrameID parent, FrameType t) -> FrameID
        add_frame(FileHandle self, std::string name, FrameID parent) -> FrameID
        """
        return _RMF.FileHandle_add_frame(self, *args)


    def get_node_from_association(self, d):
        """get_node_from_association(FileHandle self, void * d) -> NodeHandle"""
        return _RMF.FileHandle_get_node_from_association(self, d)


    def get_node(self, id):
        """get_node(FileHandle self, NodeID id) -> NodeHandle"""
        return _RMF.FileHandle_get_node(self, id)


    def add_node(self, name, t):
        """add_node(FileHandle self, std::string name, NodeType t) -> NodeHandle"""
        return _RMF.FileHandle_add_node(self, name, t)


    def set_description(self, descr):
        """set_description(FileHandle self, std::string descr)"""
        return _RMF.FileHandle_set_description(self, descr)


    def set_producer(self, arg2):
        """set_producer(FileHandle self, std::string arg2)"""
        return _RMF.FileHandle_set_producer(self, arg2)


    def flush(self):
        """flush(FileHandle self)"""
        return _RMF.FileHandle_flush(self)

    __swig_destroy__ = _RMF.delete_FileHandle
    __del__ = lambda self: None
FileHandle_swigregister = _RMF.FileHandle_swigregister
FileHandle_swigregister(FileHandle)


def create_rmf_file(path):
    """create_rmf_file(std::string path) -> FileHandle"""
    return _RMF.create_rmf_file(path)

def create_rmf_buffer(buffer):
    """create_rmf_buffer(BufferHandle buffer) -> FileHandle"""
    return _RMF.create_rmf_buffer(buffer)
class Decorator(_object):
    """Proxy of C++ RMF::Decorator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Decorator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Decorator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def __str__(self):
        """__str__(Decorator self) -> std::string"""
        return _RMF.Decorator___str__(self)


    def __repr__(self):
        """__repr__(Decorator self) -> std::string"""
        return _RMF.Decorator___repr__(self)

    __swig_destroy__ = _RMF.delete_Decorator
    __del__ = lambda self: None
Decorator_swigregister = _RMF.Decorator_swigregister
Decorator_swigregister(Decorator)

class Factory(_object):
    """Proxy of C++ RMF::Factory class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Factory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Factory, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(RMF::Factory self) -> Factory"""
        this = _RMF.new_Factory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_Factory
    __del__ = lambda self: None
Factory_swigregister = _RMF.Factory_swigregister
Factory_swigregister(Factory)

class Label(_object):
    """Proxy of C++ RMF::Label class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Label, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Label, name)

    def __init__(self):
        """__init__(RMF::Label self) -> Label"""
        this = _RMF.new_Label()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_is(self, nh):
        """get_is(Label self, NodeConstHandle nh) -> bool"""
        return _RMF.Label_get_is(self, nh)


    def set_is(self, nh):
        """set_is(Label self, NodeHandle nh)"""
        return _RMF.Label_set_is(self, nh)


    def __str__(self):
        """__str__(Label self) -> std::string"""
        return _RMF.Label___str__(self)


    def __repr__(self):
        """__repr__(Label self) -> std::string"""
        return _RMF.Label___repr__(self)

    __swig_destroy__ = _RMF.delete_Label
    __del__ = lambda self: None
Label_swigregister = _RMF.Label_swigregister
Label_swigregister(Label)

class ParticleConst(Decorator):
    """Proxy of C++ RMF::decorator::ParticleConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_mass(self):
        """get_mass(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_mass(self)


    def get_frame_mass(self):
        """get_frame_mass(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_frame_mass(self)


    def get_static_mass(self):
        """get_static_mass(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_static_mass(self)


    def get_coordinates(self):
        """get_coordinates(ParticleConst self) -> Vector3"""
        return _RMF.ParticleConst_get_coordinates(self)


    def get_frame_coordinates(self):
        """get_frame_coordinates(ParticleConst self) -> Vector3"""
        return _RMF.ParticleConst_get_frame_coordinates(self)


    def get_static_coordinates(self):
        """get_static_coordinates(ParticleConst self) -> Vector3"""
        return _RMF.ParticleConst_get_static_coordinates(self)


    def get_radius(self):
        """get_radius(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_radius(self)


    def get_frame_radius(self):
        """get_frame_radius(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_frame_radius(self)


    def get_static_radius(self):
        """get_static_radius(ParticleConst self) -> RMF::Float"""
        return _RMF.ParticleConst_get_static_radius(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ParticleConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ParticleConst self) -> std::string"""
        return _RMF.ParticleConst___str__(self)


    def __repr__(self):
        """__repr__(ParticleConst self) -> std::string"""
        return _RMF.ParticleConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ParticleConst
    __del__ = lambda self: None
ParticleConst_swigregister = _RMF.ParticleConst_swigregister
ParticleConst_swigregister(ParticleConst)

def ParticleConst_get_decorator_type_name():
    """ParticleConst_get_decorator_type_name() -> std::string"""
    return _RMF.ParticleConst_get_decorator_type_name()

class Particle(ParticleConst):
    """Proxy of C++ RMF::decorator::Particle class."""

    __swig_setmethods__ = {}
    for _s in [ParticleConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    for _s in [ParticleConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_mass(self, v):
        """set_mass(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_mass(self, v)


    def set_frame_mass(self, v):
        """set_frame_mass(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_frame_mass(self, v)


    def set_static_mass(self, v):
        """set_static_mass(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_static_mass(self, v)


    def set_coordinates(self, v):
        """set_coordinates(Particle self, Vector3 v)"""
        return _RMF.Particle_set_coordinates(self, v)


    def set_frame_coordinates(self, v):
        """set_frame_coordinates(Particle self, Vector3 v)"""
        return _RMF.Particle_set_frame_coordinates(self, v)


    def set_static_coordinates(self, v):
        """set_static_coordinates(Particle self, Vector3 v)"""
        return _RMF.Particle_set_static_coordinates(self, v)


    def set_radius(self, v):
        """set_radius(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_radius(self, v)


    def set_frame_radius(self, v):
        """set_frame_radius(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_frame_radius(self, v)


    def set_static_radius(self, v):
        """set_static_radius(Particle self, RMF::Float v)"""
        return _RMF.Particle_set_static_radius(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Particle_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Particle
    __del__ = lambda self: None
Particle_swigregister = _RMF.Particle_swigregister
Particle_swigregister(Particle)

def Particle_get_decorator_type_name():
    """Particle_get_decorator_type_name() -> std::string"""
    return _RMF.Particle_get_decorator_type_name()

class ParticleFactory(Factory):
    """Proxy of C++ RMF::decorator::ParticleFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ParticleFactory self, FileConstHandle fh) -> ParticleFactory
        __init__(RMF::decorator::ParticleFactory self, FileHandle fh) -> ParticleFactory
        """
        this = _RMF.new_ParticleFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ParticleFactory self, NodeConstHandle nh) -> ParticleConst
        get(ParticleFactory self, NodeHandle nh) -> Particle
        """
        return _RMF.ParticleFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ParticleFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ParticleFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ParticleFactory self) -> std::string"""
        return _RMF.ParticleFactory___str__(self)


    def __repr__(self):
        """__repr__(ParticleFactory self) -> std::string"""
        return _RMF.ParticleFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ParticleFactory
    __del__ = lambda self: None
ParticleFactory_swigregister = _RMF.ParticleFactory_swigregister
ParticleFactory_swigregister(ParticleFactory)

class ParticleConstFactory(ParticleFactory):
    """Proxy of C++ RMF::decorator::ParticleConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ParticleFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ParticleFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ParticleConstFactory self, FileConstHandle fh) -> ParticleConstFactory
        __init__(RMF::decorator::ParticleConstFactory self, FileHandle fh) -> ParticleConstFactory
        """
        this = _RMF.new_ParticleConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ParticleConstFactory
    __del__ = lambda self: None
ParticleConstFactory_swigregister = _RMF.ParticleConstFactory_swigregister
ParticleConstFactory_swigregister(ParticleConstFactory)

class IntermediateParticleConst(Decorator):
    """Proxy of C++ RMF::decorator::IntermediateParticleConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntermediateParticleConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntermediateParticleConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_radius(self):
        """get_radius(IntermediateParticleConst self) -> RMF::Float"""
        return _RMF.IntermediateParticleConst_get_radius(self)


    def get_frame_radius(self):
        """get_frame_radius(IntermediateParticleConst self) -> RMF::Float"""
        return _RMF.IntermediateParticleConst_get_frame_radius(self)


    def get_static_radius(self):
        """get_static_radius(IntermediateParticleConst self) -> RMF::Float"""
        return _RMF.IntermediateParticleConst_get_static_radius(self)


    def get_coordinates(self):
        """get_coordinates(IntermediateParticleConst self) -> Vector3"""
        return _RMF.IntermediateParticleConst_get_coordinates(self)


    def get_frame_coordinates(self):
        """get_frame_coordinates(IntermediateParticleConst self) -> Vector3"""
        return _RMF.IntermediateParticleConst_get_frame_coordinates(self)


    def get_static_coordinates(self):
        """get_static_coordinates(IntermediateParticleConst self) -> Vector3"""
        return _RMF.IntermediateParticleConst_get_static_coordinates(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.IntermediateParticleConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(IntermediateParticleConst self) -> std::string"""
        return _RMF.IntermediateParticleConst___str__(self)


    def __repr__(self):
        """__repr__(IntermediateParticleConst self) -> std::string"""
        return _RMF.IntermediateParticleConst___repr__(self)

    __swig_destroy__ = _RMF.delete_IntermediateParticleConst
    __del__ = lambda self: None
IntermediateParticleConst_swigregister = _RMF.IntermediateParticleConst_swigregister
IntermediateParticleConst_swigregister(IntermediateParticleConst)

def IntermediateParticleConst_get_decorator_type_name():
    """IntermediateParticleConst_get_decorator_type_name() -> std::string"""
    return _RMF.IntermediateParticleConst_get_decorator_type_name()

class IntermediateParticle(IntermediateParticleConst):
    """Proxy of C++ RMF::decorator::IntermediateParticle class."""

    __swig_setmethods__ = {}
    for _s in [IntermediateParticleConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntermediateParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [IntermediateParticleConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntermediateParticle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_radius(self, v):
        """set_radius(IntermediateParticle self, RMF::Float v)"""
        return _RMF.IntermediateParticle_set_radius(self, v)


    def set_frame_radius(self, v):
        """set_frame_radius(IntermediateParticle self, RMF::Float v)"""
        return _RMF.IntermediateParticle_set_frame_radius(self, v)


    def set_static_radius(self, v):
        """set_static_radius(IntermediateParticle self, RMF::Float v)"""
        return _RMF.IntermediateParticle_set_static_radius(self, v)


    def set_coordinates(self, v):
        """set_coordinates(IntermediateParticle self, Vector3 v)"""
        return _RMF.IntermediateParticle_set_coordinates(self, v)


    def set_frame_coordinates(self, v):
        """set_frame_coordinates(IntermediateParticle self, Vector3 v)"""
        return _RMF.IntermediateParticle_set_frame_coordinates(self, v)


    def set_static_coordinates(self, v):
        """set_static_coordinates(IntermediateParticle self, Vector3 v)"""
        return _RMF.IntermediateParticle_set_static_coordinates(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.IntermediateParticle_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_IntermediateParticle
    __del__ = lambda self: None
IntermediateParticle_swigregister = _RMF.IntermediateParticle_swigregister
IntermediateParticle_swigregister(IntermediateParticle)

def IntermediateParticle_get_decorator_type_name():
    """IntermediateParticle_get_decorator_type_name() -> std::string"""
    return _RMF.IntermediateParticle_get_decorator_type_name()

class IntermediateParticleFactory(Factory):
    """Proxy of C++ RMF::decorator::IntermediateParticleFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntermediateParticleFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntermediateParticleFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::IntermediateParticleFactory self, FileConstHandle fh) -> IntermediateParticleFactory
        __init__(RMF::decorator::IntermediateParticleFactory self, FileHandle fh) -> IntermediateParticleFactory
        """
        this = _RMF.new_IntermediateParticleFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(IntermediateParticleFactory self, NodeConstHandle nh) -> IntermediateParticleConst
        get(IntermediateParticleFactory self, NodeHandle nh) -> IntermediateParticle
        """
        return _RMF.IntermediateParticleFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(IntermediateParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.IntermediateParticleFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(IntermediateParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.IntermediateParticleFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(IntermediateParticleFactory self) -> std::string"""
        return _RMF.IntermediateParticleFactory___str__(self)


    def __repr__(self):
        """__repr__(IntermediateParticleFactory self) -> std::string"""
        return _RMF.IntermediateParticleFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_IntermediateParticleFactory
    __del__ = lambda self: None
IntermediateParticleFactory_swigregister = _RMF.IntermediateParticleFactory_swigregister
IntermediateParticleFactory_swigregister(IntermediateParticleFactory)

class IntermediateParticleConstFactory(IntermediateParticleFactory):
    """Proxy of C++ RMF::decorator::IntermediateParticleConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [IntermediateParticleFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntermediateParticleConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [IntermediateParticleFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntermediateParticleConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::IntermediateParticleConstFactory self, FileConstHandle fh) -> IntermediateParticleConstFactory
        __init__(RMF::decorator::IntermediateParticleConstFactory self, FileHandle fh) -> IntermediateParticleConstFactory
        """
        this = _RMF.new_IntermediateParticleConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_IntermediateParticleConstFactory
    __del__ = lambda self: None
IntermediateParticleConstFactory_swigregister = _RMF.IntermediateParticleConstFactory_swigregister
IntermediateParticleConstFactory_swigregister(IntermediateParticleConstFactory)

class GaussianParticleConst(Decorator):
    """Proxy of C++ RMF::decorator::GaussianParticleConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianParticleConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianParticleConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_variances(self):
        """get_variances(GaussianParticleConst self) -> Vector3"""
        return _RMF.GaussianParticleConst_get_variances(self)


    def get_frame_variances(self):
        """get_frame_variances(GaussianParticleConst self) -> Vector3"""
        return _RMF.GaussianParticleConst_get_frame_variances(self)


    def get_static_variances(self):
        """get_static_variances(GaussianParticleConst self) -> Vector3"""
        return _RMF.GaussianParticleConst_get_static_variances(self)


    def get_mass(self):
        """get_mass(GaussianParticleConst self) -> RMF::Float"""
        return _RMF.GaussianParticleConst_get_mass(self)


    def get_frame_mass(self):
        """get_frame_mass(GaussianParticleConst self) -> RMF::Float"""
        return _RMF.GaussianParticleConst_get_frame_mass(self)


    def get_static_mass(self):
        """get_static_mass(GaussianParticleConst self) -> RMF::Float"""
        return _RMF.GaussianParticleConst_get_static_mass(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.GaussianParticleConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(GaussianParticleConst self) -> std::string"""
        return _RMF.GaussianParticleConst___str__(self)


    def __repr__(self):
        """__repr__(GaussianParticleConst self) -> std::string"""
        return _RMF.GaussianParticleConst___repr__(self)

    __swig_destroy__ = _RMF.delete_GaussianParticleConst
    __del__ = lambda self: None
GaussianParticleConst_swigregister = _RMF.GaussianParticleConst_swigregister
GaussianParticleConst_swigregister(GaussianParticleConst)

def GaussianParticleConst_get_decorator_type_name():
    """GaussianParticleConst_get_decorator_type_name() -> std::string"""
    return _RMF.GaussianParticleConst_get_decorator_type_name()

class GaussianParticle(GaussianParticleConst):
    """Proxy of C++ RMF::decorator::GaussianParticle class."""

    __swig_setmethods__ = {}
    for _s in [GaussianParticleConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [GaussianParticleConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianParticle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_variances(self, v):
        """set_variances(GaussianParticle self, Vector3 v)"""
        return _RMF.GaussianParticle_set_variances(self, v)


    def set_frame_variances(self, v):
        """set_frame_variances(GaussianParticle self, Vector3 v)"""
        return _RMF.GaussianParticle_set_frame_variances(self, v)


    def set_static_variances(self, v):
        """set_static_variances(GaussianParticle self, Vector3 v)"""
        return _RMF.GaussianParticle_set_static_variances(self, v)


    def set_mass(self, v):
        """set_mass(GaussianParticle self, RMF::Float v)"""
        return _RMF.GaussianParticle_set_mass(self, v)


    def set_frame_mass(self, v):
        """set_frame_mass(GaussianParticle self, RMF::Float v)"""
        return _RMF.GaussianParticle_set_frame_mass(self, v)


    def set_static_mass(self, v):
        """set_static_mass(GaussianParticle self, RMF::Float v)"""
        return _RMF.GaussianParticle_set_static_mass(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.GaussianParticle_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_GaussianParticle
    __del__ = lambda self: None
GaussianParticle_swigregister = _RMF.GaussianParticle_swigregister
GaussianParticle_swigregister(GaussianParticle)

def GaussianParticle_get_decorator_type_name():
    """GaussianParticle_get_decorator_type_name() -> std::string"""
    return _RMF.GaussianParticle_get_decorator_type_name()

class GaussianParticleFactory(Factory):
    """Proxy of C++ RMF::decorator::GaussianParticleFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianParticleFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianParticleFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::GaussianParticleFactory self, FileConstHandle fh) -> GaussianParticleFactory
        __init__(RMF::decorator::GaussianParticleFactory self, FileHandle fh) -> GaussianParticleFactory
        """
        this = _RMF.new_GaussianParticleFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(GaussianParticleFactory self, NodeConstHandle nh) -> GaussianParticleConst
        get(GaussianParticleFactory self, NodeHandle nh) -> GaussianParticle
        """
        return _RMF.GaussianParticleFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(GaussianParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.GaussianParticleFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(GaussianParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.GaussianParticleFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(GaussianParticleFactory self) -> std::string"""
        return _RMF.GaussianParticleFactory___str__(self)


    def __repr__(self):
        """__repr__(GaussianParticleFactory self) -> std::string"""
        return _RMF.GaussianParticleFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_GaussianParticleFactory
    __del__ = lambda self: None
GaussianParticleFactory_swigregister = _RMF.GaussianParticleFactory_swigregister
GaussianParticleFactory_swigregister(GaussianParticleFactory)

class GaussianParticleConstFactory(GaussianParticleFactory):
    """Proxy of C++ RMF::decorator::GaussianParticleConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [GaussianParticleFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianParticleConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [GaussianParticleFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianParticleConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::GaussianParticleConstFactory self, FileConstHandle fh) -> GaussianParticleConstFactory
        __init__(RMF::decorator::GaussianParticleConstFactory self, FileHandle fh) -> GaussianParticleConstFactory
        """
        this = _RMF.new_GaussianParticleConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_GaussianParticleConstFactory
    __del__ = lambda self: None
GaussianParticleConstFactory_swigregister = _RMF.GaussianParticleConstFactory_swigregister
GaussianParticleConstFactory_swigregister(GaussianParticleConstFactory)

class RigidParticleConst(Decorator):
    """Proxy of C++ RMF::decorator::RigidParticleConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidParticleConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigidParticleConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_orientation(self):
        """get_orientation(RigidParticleConst self) -> Vector4"""
        return _RMF.RigidParticleConst_get_orientation(self)


    def get_frame_orientation(self):
        """get_frame_orientation(RigidParticleConst self) -> Vector4"""
        return _RMF.RigidParticleConst_get_frame_orientation(self)


    def get_static_orientation(self):
        """get_static_orientation(RigidParticleConst self) -> Vector4"""
        return _RMF.RigidParticleConst_get_static_orientation(self)


    def get_coordinates(self):
        """get_coordinates(RigidParticleConst self) -> Vector3"""
        return _RMF.RigidParticleConst_get_coordinates(self)


    def get_frame_coordinates(self):
        """get_frame_coordinates(RigidParticleConst self) -> Vector3"""
        return _RMF.RigidParticleConst_get_frame_coordinates(self)


    def get_static_coordinates(self):
        """get_static_coordinates(RigidParticleConst self) -> Vector3"""
        return _RMF.RigidParticleConst_get_static_coordinates(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.RigidParticleConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(RigidParticleConst self) -> std::string"""
        return _RMF.RigidParticleConst___str__(self)


    def __repr__(self):
        """__repr__(RigidParticleConst self) -> std::string"""
        return _RMF.RigidParticleConst___repr__(self)

    __swig_destroy__ = _RMF.delete_RigidParticleConst
    __del__ = lambda self: None
RigidParticleConst_swigregister = _RMF.RigidParticleConst_swigregister
RigidParticleConst_swigregister(RigidParticleConst)

def RigidParticleConst_get_decorator_type_name():
    """RigidParticleConst_get_decorator_type_name() -> std::string"""
    return _RMF.RigidParticleConst_get_decorator_type_name()

class RigidParticle(RigidParticleConst):
    """Proxy of C++ RMF::decorator::RigidParticle class."""

    __swig_setmethods__ = {}
    for _s in [RigidParticleConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidParticleConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigidParticle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_orientation(self, v):
        """set_orientation(RigidParticle self, Vector4 v)"""
        return _RMF.RigidParticle_set_orientation(self, v)


    def set_frame_orientation(self, v):
        """set_frame_orientation(RigidParticle self, Vector4 v)"""
        return _RMF.RigidParticle_set_frame_orientation(self, v)


    def set_static_orientation(self, v):
        """set_static_orientation(RigidParticle self, Vector4 v)"""
        return _RMF.RigidParticle_set_static_orientation(self, v)


    def set_coordinates(self, v):
        """set_coordinates(RigidParticle self, Vector3 v)"""
        return _RMF.RigidParticle_set_coordinates(self, v)


    def set_frame_coordinates(self, v):
        """set_frame_coordinates(RigidParticle self, Vector3 v)"""
        return _RMF.RigidParticle_set_frame_coordinates(self, v)


    def set_static_coordinates(self, v):
        """set_static_coordinates(RigidParticle self, Vector3 v)"""
        return _RMF.RigidParticle_set_static_coordinates(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.RigidParticle_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_RigidParticle
    __del__ = lambda self: None
RigidParticle_swigregister = _RMF.RigidParticle_swigregister
RigidParticle_swigregister(RigidParticle)

def RigidParticle_get_decorator_type_name():
    """RigidParticle_get_decorator_type_name() -> std::string"""
    return _RMF.RigidParticle_get_decorator_type_name()

class RigidParticleFactory(Factory):
    """Proxy of C++ RMF::decorator::RigidParticleFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidParticleFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigidParticleFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::RigidParticleFactory self, FileConstHandle fh) -> RigidParticleFactory
        __init__(RMF::decorator::RigidParticleFactory self, FileHandle fh) -> RigidParticleFactory
        """
        this = _RMF.new_RigidParticleFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(RigidParticleFactory self, NodeConstHandle nh) -> RigidParticleConst
        get(RigidParticleFactory self, NodeHandle nh) -> RigidParticle
        """
        return _RMF.RigidParticleFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(RigidParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.RigidParticleFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(RigidParticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.RigidParticleFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(RigidParticleFactory self) -> std::string"""
        return _RMF.RigidParticleFactory___str__(self)


    def __repr__(self):
        """__repr__(RigidParticleFactory self) -> std::string"""
        return _RMF.RigidParticleFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_RigidParticleFactory
    __del__ = lambda self: None
RigidParticleFactory_swigregister = _RMF.RigidParticleFactory_swigregister
RigidParticleFactory_swigregister(RigidParticleFactory)

class RigidParticleConstFactory(RigidParticleFactory):
    """Proxy of C++ RMF::decorator::RigidParticleConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [RigidParticleFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidParticleConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidParticleFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigidParticleConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::RigidParticleConstFactory self, FileConstHandle fh) -> RigidParticleConstFactory
        __init__(RMF::decorator::RigidParticleConstFactory self, FileHandle fh) -> RigidParticleConstFactory
        """
        this = _RMF.new_RigidParticleConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_RigidParticleConstFactory
    __del__ = lambda self: None
RigidParticleConstFactory_swigregister = _RMF.RigidParticleConstFactory_swigregister
RigidParticleConstFactory_swigregister(RigidParticleConstFactory)

class DiffuserConst(Decorator):
    """Proxy of C++ RMF::decorator::DiffuserConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffuserConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiffuserConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_diffusion_coefficient(self):
        """get_diffusion_coefficient(DiffuserConst self) -> RMF::Float"""
        return _RMF.DiffuserConst_get_diffusion_coefficient(self)


    def get_frame_diffusion_coefficient(self):
        """get_frame_diffusion_coefficient(DiffuserConst self) -> RMF::Float"""
        return _RMF.DiffuserConst_get_frame_diffusion_coefficient(self)


    def get_static_diffusion_coefficient(self):
        """get_static_diffusion_coefficient(DiffuserConst self) -> RMF::Float"""
        return _RMF.DiffuserConst_get_static_diffusion_coefficient(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.DiffuserConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(DiffuserConst self) -> std::string"""
        return _RMF.DiffuserConst___str__(self)


    def __repr__(self):
        """__repr__(DiffuserConst self) -> std::string"""
        return _RMF.DiffuserConst___repr__(self)

    __swig_destroy__ = _RMF.delete_DiffuserConst
    __del__ = lambda self: None
DiffuserConst_swigregister = _RMF.DiffuserConst_swigregister
DiffuserConst_swigregister(DiffuserConst)

def DiffuserConst_get_decorator_type_name():
    """DiffuserConst_get_decorator_type_name() -> std::string"""
    return _RMF.DiffuserConst_get_decorator_type_name()

class Diffuser(DiffuserConst):
    """Proxy of C++ RMF::decorator::Diffuser class."""

    __swig_setmethods__ = {}
    for _s in [DiffuserConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Diffuser, name, value)
    __swig_getmethods__ = {}
    for _s in [DiffuserConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Diffuser, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_diffusion_coefficient(self, v):
        """set_diffusion_coefficient(Diffuser self, RMF::Float v)"""
        return _RMF.Diffuser_set_diffusion_coefficient(self, v)


    def set_frame_diffusion_coefficient(self, v):
        """set_frame_diffusion_coefficient(Diffuser self, RMF::Float v)"""
        return _RMF.Diffuser_set_frame_diffusion_coefficient(self, v)


    def set_static_diffusion_coefficient(self, v):
        """set_static_diffusion_coefficient(Diffuser self, RMF::Float v)"""
        return _RMF.Diffuser_set_static_diffusion_coefficient(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Diffuser_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Diffuser
    __del__ = lambda self: None
Diffuser_swigregister = _RMF.Diffuser_swigregister
Diffuser_swigregister(Diffuser)

def Diffuser_get_decorator_type_name():
    """Diffuser_get_decorator_type_name() -> std::string"""
    return _RMF.Diffuser_get_decorator_type_name()

class DiffuserFactory(Factory):
    """Proxy of C++ RMF::decorator::DiffuserFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffuserFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiffuserFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::DiffuserFactory self, FileConstHandle fh) -> DiffuserFactory
        __init__(RMF::decorator::DiffuserFactory self, FileHandle fh) -> DiffuserFactory
        """
        this = _RMF.new_DiffuserFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(DiffuserFactory self, NodeConstHandle nh) -> DiffuserConst
        get(DiffuserFactory self, NodeHandle nh) -> Diffuser
        """
        return _RMF.DiffuserFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(DiffuserFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.DiffuserFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(DiffuserFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.DiffuserFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(DiffuserFactory self) -> std::string"""
        return _RMF.DiffuserFactory___str__(self)


    def __repr__(self):
        """__repr__(DiffuserFactory self) -> std::string"""
        return _RMF.DiffuserFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_DiffuserFactory
    __del__ = lambda self: None
DiffuserFactory_swigregister = _RMF.DiffuserFactory_swigregister
DiffuserFactory_swigregister(DiffuserFactory)

class DiffuserConstFactory(DiffuserFactory):
    """Proxy of C++ RMF::decorator::DiffuserConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [DiffuserFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffuserConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [DiffuserFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiffuserConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::DiffuserConstFactory self, FileConstHandle fh) -> DiffuserConstFactory
        __init__(RMF::decorator::DiffuserConstFactory self, FileHandle fh) -> DiffuserConstFactory
        """
        this = _RMF.new_DiffuserConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_DiffuserConstFactory
    __del__ = lambda self: None
DiffuserConstFactory_swigregister = _RMF.DiffuserConstFactory_swigregister
DiffuserConstFactory_swigregister(DiffuserConstFactory)

class AtomConst(Decorator):
    """Proxy of C++ RMF::decorator::AtomConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_element(self):
        """get_element(AtomConst self) -> RMF::Int"""
        return _RMF.AtomConst_get_element(self)


    def get_frame_element(self):
        """get_frame_element(AtomConst self) -> RMF::Int"""
        return _RMF.AtomConst_get_frame_element(self)


    def get_static_element(self):
        """get_static_element(AtomConst self) -> RMF::Int"""
        return _RMF.AtomConst_get_static_element(self)


    def get_mass(self):
        """get_mass(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_mass(self)


    def get_frame_mass(self):
        """get_frame_mass(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_frame_mass(self)


    def get_static_mass(self):
        """get_static_mass(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_static_mass(self)


    def get_radius(self):
        """get_radius(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_radius(self)


    def get_frame_radius(self):
        """get_frame_radius(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_frame_radius(self)


    def get_static_radius(self):
        """get_static_radius(AtomConst self) -> RMF::Float"""
        return _RMF.AtomConst_get_static_radius(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.AtomConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(AtomConst self) -> std::string"""
        return _RMF.AtomConst___str__(self)


    def __repr__(self):
        """__repr__(AtomConst self) -> std::string"""
        return _RMF.AtomConst___repr__(self)

    __swig_destroy__ = _RMF.delete_AtomConst
    __del__ = lambda self: None
AtomConst_swigregister = _RMF.AtomConst_swigregister
AtomConst_swigregister(AtomConst)

def AtomConst_get_decorator_type_name():
    """AtomConst_get_decorator_type_name() -> std::string"""
    return _RMF.AtomConst_get_decorator_type_name()

class Atom(AtomConst):
    """Proxy of C++ RMF::decorator::Atom class."""

    __swig_setmethods__ = {}
    for _s in [AtomConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Atom, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Atom, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_element(self, v):
        """set_element(Atom self, RMF::Int v)"""
        return _RMF.Atom_set_element(self, v)


    def set_frame_element(self, v):
        """set_frame_element(Atom self, RMF::Int v)"""
        return _RMF.Atom_set_frame_element(self, v)


    def set_static_element(self, v):
        """set_static_element(Atom self, RMF::Int v)"""
        return _RMF.Atom_set_static_element(self, v)


    def set_mass(self, v):
        """set_mass(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_mass(self, v)


    def set_frame_mass(self, v):
        """set_frame_mass(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_frame_mass(self, v)


    def set_static_mass(self, v):
        """set_static_mass(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_static_mass(self, v)


    def set_radius(self, v):
        """set_radius(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_radius(self, v)


    def set_frame_radius(self, v):
        """set_frame_radius(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_frame_radius(self, v)


    def set_static_radius(self, v):
        """set_static_radius(Atom self, RMF::Float v)"""
        return _RMF.Atom_set_static_radius(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Atom_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Atom
    __del__ = lambda self: None
Atom_swigregister = _RMF.Atom_swigregister
Atom_swigregister(Atom)

def Atom_get_decorator_type_name():
    """Atom_get_decorator_type_name() -> std::string"""
    return _RMF.Atom_get_decorator_type_name()

class AtomFactory(Factory):
    """Proxy of C++ RMF::decorator::AtomFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::AtomFactory self, FileConstHandle fh) -> AtomFactory
        __init__(RMF::decorator::AtomFactory self, FileHandle fh) -> AtomFactory
        """
        this = _RMF.new_AtomFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(AtomFactory self, NodeConstHandle nh) -> AtomConst
        get(AtomFactory self, NodeHandle nh) -> Atom
        """
        return _RMF.AtomFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(AtomFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AtomFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(AtomFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AtomFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(AtomFactory self) -> std::string"""
        return _RMF.AtomFactory___str__(self)


    def __repr__(self):
        """__repr__(AtomFactory self) -> std::string"""
        return _RMF.AtomFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_AtomFactory
    __del__ = lambda self: None
AtomFactory_swigregister = _RMF.AtomFactory_swigregister
AtomFactory_swigregister(AtomFactory)

class AtomConstFactory(AtomFactory):
    """Proxy of C++ RMF::decorator::AtomConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [AtomFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::AtomConstFactory self, FileConstHandle fh) -> AtomConstFactory
        __init__(RMF::decorator::AtomConstFactory self, FileHandle fh) -> AtomConstFactory
        """
        this = _RMF.new_AtomConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_AtomConstFactory
    __del__ = lambda self: None
AtomConstFactory_swigregister = _RMF.AtomConstFactory_swigregister
AtomConstFactory_swigregister(AtomConstFactory)

class ReferenceFrameConst(Decorator):
    """Proxy of C++ RMF::decorator::ReferenceFrameConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceFrameConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceFrameConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_rotation(self):
        """get_rotation(ReferenceFrameConst self) -> Vector4"""
        return _RMF.ReferenceFrameConst_get_rotation(self)


    def get_frame_rotation(self):
        """get_frame_rotation(ReferenceFrameConst self) -> Vector4"""
        return _RMF.ReferenceFrameConst_get_frame_rotation(self)


    def get_static_rotation(self):
        """get_static_rotation(ReferenceFrameConst self) -> Vector4"""
        return _RMF.ReferenceFrameConst_get_static_rotation(self)


    def get_translation(self):
        """get_translation(ReferenceFrameConst self) -> Vector3"""
        return _RMF.ReferenceFrameConst_get_translation(self)


    def get_frame_translation(self):
        """get_frame_translation(ReferenceFrameConst self) -> Vector3"""
        return _RMF.ReferenceFrameConst_get_frame_translation(self)


    def get_static_translation(self):
        """get_static_translation(ReferenceFrameConst self) -> Vector3"""
        return _RMF.ReferenceFrameConst_get_static_translation(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ReferenceFrameConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ReferenceFrameConst self) -> std::string"""
        return _RMF.ReferenceFrameConst___str__(self)


    def __repr__(self):
        """__repr__(ReferenceFrameConst self) -> std::string"""
        return _RMF.ReferenceFrameConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ReferenceFrameConst
    __del__ = lambda self: None
ReferenceFrameConst_swigregister = _RMF.ReferenceFrameConst_swigregister
ReferenceFrameConst_swigregister(ReferenceFrameConst)

def ReferenceFrameConst_get_decorator_type_name():
    """ReferenceFrameConst_get_decorator_type_name() -> std::string"""
    return _RMF.ReferenceFrameConst_get_decorator_type_name()

class ReferenceFrame(ReferenceFrameConst):
    """Proxy of C++ RMF::decorator::ReferenceFrame class."""

    __swig_setmethods__ = {}
    for _s in [ReferenceFrameConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceFrameConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceFrame, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_rotation(self, v):
        """set_rotation(ReferenceFrame self, Vector4 v)"""
        return _RMF.ReferenceFrame_set_rotation(self, v)


    def set_frame_rotation(self, v):
        """set_frame_rotation(ReferenceFrame self, Vector4 v)"""
        return _RMF.ReferenceFrame_set_frame_rotation(self, v)


    def set_static_rotation(self, v):
        """set_static_rotation(ReferenceFrame self, Vector4 v)"""
        return _RMF.ReferenceFrame_set_static_rotation(self, v)


    def set_translation(self, v):
        """set_translation(ReferenceFrame self, Vector3 v)"""
        return _RMF.ReferenceFrame_set_translation(self, v)


    def set_frame_translation(self, v):
        """set_frame_translation(ReferenceFrame self, Vector3 v)"""
        return _RMF.ReferenceFrame_set_frame_translation(self, v)


    def set_static_translation(self, v):
        """set_static_translation(ReferenceFrame self, Vector3 v)"""
        return _RMF.ReferenceFrame_set_static_translation(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ReferenceFrame_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_ReferenceFrame
    __del__ = lambda self: None
ReferenceFrame_swigregister = _RMF.ReferenceFrame_swigregister
ReferenceFrame_swigregister(ReferenceFrame)

def ReferenceFrame_get_decorator_type_name():
    """ReferenceFrame_get_decorator_type_name() -> std::string"""
    return _RMF.ReferenceFrame_get_decorator_type_name()

class ReferenceFrameFactory(Factory):
    """Proxy of C++ RMF::decorator::ReferenceFrameFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceFrameFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceFrameFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ReferenceFrameFactory self, FileConstHandle fh) -> ReferenceFrameFactory
        __init__(RMF::decorator::ReferenceFrameFactory self, FileHandle fh) -> ReferenceFrameFactory
        """
        this = _RMF.new_ReferenceFrameFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ReferenceFrameFactory self, NodeConstHandle nh) -> ReferenceFrameConst
        get(ReferenceFrameFactory self, NodeHandle nh) -> ReferenceFrame
        """
        return _RMF.ReferenceFrameFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ReferenceFrameFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ReferenceFrameFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ReferenceFrameFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ReferenceFrameFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ReferenceFrameFactory self) -> std::string"""
        return _RMF.ReferenceFrameFactory___str__(self)


    def __repr__(self):
        """__repr__(ReferenceFrameFactory self) -> std::string"""
        return _RMF.ReferenceFrameFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ReferenceFrameFactory
    __del__ = lambda self: None
ReferenceFrameFactory_swigregister = _RMF.ReferenceFrameFactory_swigregister
ReferenceFrameFactory_swigregister(ReferenceFrameFactory)

class ReferenceFrameConstFactory(ReferenceFrameFactory):
    """Proxy of C++ RMF::decorator::ReferenceFrameConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ReferenceFrameFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceFrameConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceFrameFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceFrameConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ReferenceFrameConstFactory self, FileConstHandle fh) -> ReferenceFrameConstFactory
        __init__(RMF::decorator::ReferenceFrameConstFactory self, FileHandle fh) -> ReferenceFrameConstFactory
        """
        this = _RMF.new_ReferenceFrameConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ReferenceFrameConstFactory
    __del__ = lambda self: None
ReferenceFrameConstFactory_swigregister = _RMF.ReferenceFrameConstFactory_swigregister
ReferenceFrameConstFactory_swigregister(ReferenceFrameConstFactory)

class ResidueConst(Decorator):
    """Proxy of C++ RMF::decorator::ResidueConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResidueConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_residue_index(self):
        """get_residue_index(ResidueConst self) -> RMF::Int"""
        return _RMF.ResidueConst_get_residue_index(self)


    def get_frame_residue_index(self):
        """get_frame_residue_index(ResidueConst self) -> RMF::Int"""
        return _RMF.ResidueConst_get_frame_residue_index(self)


    def get_static_residue_index(self):
        """get_static_residue_index(ResidueConst self) -> RMF::Int"""
        return _RMF.ResidueConst_get_static_residue_index(self)


    def get_residue_type(self):
        """get_residue_type(ResidueConst self) -> RMF::String"""
        return _RMF.ResidueConst_get_residue_type(self)


    def get_frame_residue_type(self):
        """get_frame_residue_type(ResidueConst self) -> RMF::String"""
        return _RMF.ResidueConst_get_frame_residue_type(self)


    def get_static_residue_type(self):
        """get_static_residue_type(ResidueConst self) -> RMF::String"""
        return _RMF.ResidueConst_get_static_residue_type(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ResidueConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ResidueConst self) -> std::string"""
        return _RMF.ResidueConst___str__(self)


    def __repr__(self):
        """__repr__(ResidueConst self) -> std::string"""
        return _RMF.ResidueConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ResidueConst
    __del__ = lambda self: None
ResidueConst_swigregister = _RMF.ResidueConst_swigregister
ResidueConst_swigregister(ResidueConst)

def ResidueConst_get_decorator_type_name():
    """ResidueConst_get_decorator_type_name() -> std::string"""
    return _RMF.ResidueConst_get_decorator_type_name()

class Residue(ResidueConst):
    """Proxy of C++ RMF::decorator::Residue class."""

    __swig_setmethods__ = {}
    for _s in [ResidueConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Residue, name, value)
    __swig_getmethods__ = {}
    for _s in [ResidueConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Residue, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_residue_index(self, v):
        """set_residue_index(Residue self, RMF::Int v)"""
        return _RMF.Residue_set_residue_index(self, v)


    def set_frame_residue_index(self, v):
        """set_frame_residue_index(Residue self, RMF::Int v)"""
        return _RMF.Residue_set_frame_residue_index(self, v)


    def set_static_residue_index(self, v):
        """set_static_residue_index(Residue self, RMF::Int v)"""
        return _RMF.Residue_set_static_residue_index(self, v)


    def set_residue_type(self, v):
        """set_residue_type(Residue self, RMF::String v)"""
        return _RMF.Residue_set_residue_type(self, v)


    def set_frame_residue_type(self, v):
        """set_frame_residue_type(Residue self, RMF::String v)"""
        return _RMF.Residue_set_frame_residue_type(self, v)


    def set_static_residue_type(self, v):
        """set_static_residue_type(Residue self, RMF::String v)"""
        return _RMF.Residue_set_static_residue_type(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Residue_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Residue
    __del__ = lambda self: None
Residue_swigregister = _RMF.Residue_swigregister
Residue_swigregister(Residue)

def Residue_get_decorator_type_name():
    """Residue_get_decorator_type_name() -> std::string"""
    return _RMF.Residue_get_decorator_type_name()

class ResidueFactory(Factory):
    """Proxy of C++ RMF::decorator::ResidueFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResidueFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ResidueFactory self, FileConstHandle fh) -> ResidueFactory
        __init__(RMF::decorator::ResidueFactory self, FileHandle fh) -> ResidueFactory
        """
        this = _RMF.new_ResidueFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ResidueFactory self, NodeConstHandle nh) -> ResidueConst
        get(ResidueFactory self, NodeHandle nh) -> Residue
        """
        return _RMF.ResidueFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ResidueFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ResidueFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ResidueFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ResidueFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ResidueFactory self) -> std::string"""
        return _RMF.ResidueFactory___str__(self)


    def __repr__(self):
        """__repr__(ResidueFactory self) -> std::string"""
        return _RMF.ResidueFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ResidueFactory
    __del__ = lambda self: None
ResidueFactory_swigregister = _RMF.ResidueFactory_swigregister
ResidueFactory_swigregister(ResidueFactory)

class ResidueConstFactory(ResidueFactory):
    """Proxy of C++ RMF::decorator::ResidueConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ResidueFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResidueConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ResidueFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ResidueConstFactory self, FileConstHandle fh) -> ResidueConstFactory
        __init__(RMF::decorator::ResidueConstFactory self, FileHandle fh) -> ResidueConstFactory
        """
        this = _RMF.new_ResidueConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ResidueConstFactory
    __del__ = lambda self: None
ResidueConstFactory_swigregister = _RMF.ResidueConstFactory_swigregister
ResidueConstFactory_swigregister(ResidueConstFactory)

class ChainConst(Decorator):
    """Proxy of C++ RMF::decorator::ChainConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_chain_id(self):
        """get_chain_id(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_chain_id(self)


    def get_frame_chain_id(self):
        """get_frame_chain_id(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_frame_chain_id(self)


    def get_static_chain_id(self):
        """get_static_chain_id(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_static_chain_id(self)


    def get_sequence(self):
        """get_sequence(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_sequence(self)


    def get_frame_sequence(self):
        """get_frame_sequence(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_frame_sequence(self)


    def get_static_sequence(self):
        """get_static_sequence(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_static_sequence(self)


    def get_sequence_offset(self):
        """get_sequence_offset(ChainConst self) -> RMF::Int"""
        return _RMF.ChainConst_get_sequence_offset(self)


    def get_frame_sequence_offset(self):
        """get_frame_sequence_offset(ChainConst self) -> RMF::Int"""
        return _RMF.ChainConst_get_frame_sequence_offset(self)


    def get_static_sequence_offset(self):
        """get_static_sequence_offset(ChainConst self) -> RMF::Int"""
        return _RMF.ChainConst_get_static_sequence_offset(self)


    def get_uniprot_accession(self):
        """get_uniprot_accession(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_uniprot_accession(self)


    def get_frame_uniprot_accession(self):
        """get_frame_uniprot_accession(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_frame_uniprot_accession(self)


    def get_static_uniprot_accession(self):
        """get_static_uniprot_accession(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_static_uniprot_accession(self)


    def get_chain_type(self):
        """get_chain_type(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_chain_type(self)


    def get_frame_chain_type(self):
        """get_frame_chain_type(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_frame_chain_type(self)


    def get_static_chain_type(self):
        """get_static_chain_type(ChainConst self) -> RMF::String"""
        return _RMF.ChainConst_get_static_chain_type(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ChainConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ChainConst self) -> std::string"""
        return _RMF.ChainConst___str__(self)


    def __repr__(self):
        """__repr__(ChainConst self) -> std::string"""
        return _RMF.ChainConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ChainConst
    __del__ = lambda self: None
ChainConst_swigregister = _RMF.ChainConst_swigregister
ChainConst_swigregister(ChainConst)

def ChainConst_get_decorator_type_name():
    """ChainConst_get_decorator_type_name() -> std::string"""
    return _RMF.ChainConst_get_decorator_type_name()

class Chain(ChainConst):
    """Proxy of C++ RMF::decorator::Chain class."""

    __swig_setmethods__ = {}
    for _s in [ChainConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chain, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Chain, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_chain_id(self, v):
        """set_chain_id(Chain self, RMF::String v)"""
        return _RMF.Chain_set_chain_id(self, v)


    def set_frame_chain_id(self, v):
        """set_frame_chain_id(Chain self, RMF::String v)"""
        return _RMF.Chain_set_frame_chain_id(self, v)


    def set_static_chain_id(self, v):
        """set_static_chain_id(Chain self, RMF::String v)"""
        return _RMF.Chain_set_static_chain_id(self, v)


    def set_sequence(self, v):
        """set_sequence(Chain self, RMF::String v)"""
        return _RMF.Chain_set_sequence(self, v)


    def set_frame_sequence(self, v):
        """set_frame_sequence(Chain self, RMF::String v)"""
        return _RMF.Chain_set_frame_sequence(self, v)


    def set_static_sequence(self, v):
        """set_static_sequence(Chain self, RMF::String v)"""
        return _RMF.Chain_set_static_sequence(self, v)


    def set_sequence_offset(self, v):
        """set_sequence_offset(Chain self, RMF::Int v)"""
        return _RMF.Chain_set_sequence_offset(self, v)


    def set_frame_sequence_offset(self, v):
        """set_frame_sequence_offset(Chain self, RMF::Int v)"""
        return _RMF.Chain_set_frame_sequence_offset(self, v)


    def set_static_sequence_offset(self, v):
        """set_static_sequence_offset(Chain self, RMF::Int v)"""
        return _RMF.Chain_set_static_sequence_offset(self, v)


    def set_uniprot_accession(self, v):
        """set_uniprot_accession(Chain self, RMF::String v)"""
        return _RMF.Chain_set_uniprot_accession(self, v)


    def set_frame_uniprot_accession(self, v):
        """set_frame_uniprot_accession(Chain self, RMF::String v)"""
        return _RMF.Chain_set_frame_uniprot_accession(self, v)


    def set_static_uniprot_accession(self, v):
        """set_static_uniprot_accession(Chain self, RMF::String v)"""
        return _RMF.Chain_set_static_uniprot_accession(self, v)


    def set_chain_type(self, v):
        """set_chain_type(Chain self, RMF::String v)"""
        return _RMF.Chain_set_chain_type(self, v)


    def set_frame_chain_type(self, v):
        """set_frame_chain_type(Chain self, RMF::String v)"""
        return _RMF.Chain_set_frame_chain_type(self, v)


    def set_static_chain_type(self, v):
        """set_static_chain_type(Chain self, RMF::String v)"""
        return _RMF.Chain_set_static_chain_type(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Chain_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Chain
    __del__ = lambda self: None
Chain_swigregister = _RMF.Chain_swigregister
Chain_swigregister(Chain)

def Chain_get_decorator_type_name():
    """Chain_get_decorator_type_name() -> std::string"""
    return _RMF.Chain_get_decorator_type_name()

class ChainFactory(Factory):
    """Proxy of C++ RMF::decorator::ChainFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ChainFactory self, FileConstHandle fh) -> ChainFactory
        __init__(RMF::decorator::ChainFactory self, FileHandle fh) -> ChainFactory
        """
        this = _RMF.new_ChainFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ChainFactory self, NodeConstHandle nh) -> ChainConst
        get(ChainFactory self, NodeHandle nh) -> Chain
        """
        return _RMF.ChainFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ChainFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ChainFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ChainFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ChainFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ChainFactory self) -> std::string"""
        return _RMF.ChainFactory___str__(self)


    def __repr__(self):
        """__repr__(ChainFactory self) -> std::string"""
        return _RMF.ChainFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ChainFactory
    __del__ = lambda self: None
ChainFactory_swigregister = _RMF.ChainFactory_swigregister
ChainFactory_swigregister(ChainFactory)

class ChainConstFactory(ChainFactory):
    """Proxy of C++ RMF::decorator::ChainConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ChainFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ChainConstFactory self, FileConstHandle fh) -> ChainConstFactory
        __init__(RMF::decorator::ChainConstFactory self, FileHandle fh) -> ChainConstFactory
        """
        this = _RMF.new_ChainConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ChainConstFactory
    __del__ = lambda self: None
ChainConstFactory_swigregister = _RMF.ChainConstFactory_swigregister
ChainConstFactory_swigregister(ChainConstFactory)

class FragmentConst(Decorator):
    """Proxy of C++ RMF::decorator::FragmentConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FragmentConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FragmentConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_residue_indexes(self):
        """get_residue_indexes(FragmentConst self) -> Ints"""
        return _RMF.FragmentConst_get_residue_indexes(self)


    def get_frame_residue_indexes(self):
        """get_frame_residue_indexes(FragmentConst self) -> Ints"""
        return _RMF.FragmentConst_get_frame_residue_indexes(self)


    def get_static_residue_indexes(self):
        """get_static_residue_indexes(FragmentConst self) -> Ints"""
        return _RMF.FragmentConst_get_static_residue_indexes(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.FragmentConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(FragmentConst self) -> std::string"""
        return _RMF.FragmentConst___str__(self)


    def __repr__(self):
        """__repr__(FragmentConst self) -> std::string"""
        return _RMF.FragmentConst___repr__(self)

    __swig_destroy__ = _RMF.delete_FragmentConst
    __del__ = lambda self: None
FragmentConst_swigregister = _RMF.FragmentConst_swigregister
FragmentConst_swigregister(FragmentConst)

def FragmentConst_get_decorator_type_name():
    """FragmentConst_get_decorator_type_name() -> std::string"""
    return _RMF.FragmentConst_get_decorator_type_name()

class Fragment(FragmentConst):
    """Proxy of C++ RMF::decorator::Fragment class."""

    __swig_setmethods__ = {}
    for _s in [FragmentConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fragment, name, value)
    __swig_getmethods__ = {}
    for _s in [FragmentConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Fragment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_residue_indexes(self, v):
        """set_residue_indexes(Fragment self, Ints v)"""
        return _RMF.Fragment_set_residue_indexes(self, v)


    def set_frame_residue_indexes(self, v):
        """set_frame_residue_indexes(Fragment self, Ints v)"""
        return _RMF.Fragment_set_frame_residue_indexes(self, v)


    def set_static_residue_indexes(self, v):
        """set_static_residue_indexes(Fragment self, Ints v)"""
        return _RMF.Fragment_set_static_residue_indexes(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Fragment_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Fragment
    __del__ = lambda self: None
Fragment_swigregister = _RMF.Fragment_swigregister
Fragment_swigregister(Fragment)

def Fragment_get_decorator_type_name():
    """Fragment_get_decorator_type_name() -> std::string"""
    return _RMF.Fragment_get_decorator_type_name()

class FragmentFactory(Factory):
    """Proxy of C++ RMF::decorator::FragmentFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FragmentFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FragmentFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::FragmentFactory self, FileConstHandle fh) -> FragmentFactory
        __init__(RMF::decorator::FragmentFactory self, FileHandle fh) -> FragmentFactory
        """
        this = _RMF.new_FragmentFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(FragmentFactory self, NodeConstHandle nh) -> FragmentConst
        get(FragmentFactory self, NodeHandle nh) -> Fragment
        """
        return _RMF.FragmentFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(FragmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.FragmentFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(FragmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.FragmentFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(FragmentFactory self) -> std::string"""
        return _RMF.FragmentFactory___str__(self)


    def __repr__(self):
        """__repr__(FragmentFactory self) -> std::string"""
        return _RMF.FragmentFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_FragmentFactory
    __del__ = lambda self: None
FragmentFactory_swigregister = _RMF.FragmentFactory_swigregister
FragmentFactory_swigregister(FragmentFactory)

class FragmentConstFactory(FragmentFactory):
    """Proxy of C++ RMF::decorator::FragmentConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [FragmentFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FragmentConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [FragmentFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FragmentConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::FragmentConstFactory self, FileConstHandle fh) -> FragmentConstFactory
        __init__(RMF::decorator::FragmentConstFactory self, FileHandle fh) -> FragmentConstFactory
        """
        this = _RMF.new_FragmentConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_FragmentConstFactory
    __del__ = lambda self: None
FragmentConstFactory_swigregister = _RMF.FragmentConstFactory_swigregister
FragmentConstFactory_swigregister(FragmentConstFactory)

class BackwardsCompatibilityFragmentConst(Decorator):
    """Proxy of C++ RMF::decorator::BackwardsCompatibilityFragmentConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackwardsCompatibilityFragmentConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackwardsCompatibilityFragmentConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_indexes(self):
        """get_indexes(BackwardsCompatibilityFragmentConst self) -> Ints"""
        return _RMF.BackwardsCompatibilityFragmentConst_get_indexes(self)


    def get_frame_indexes(self):
        """get_frame_indexes(BackwardsCompatibilityFragmentConst self) -> Ints"""
        return _RMF.BackwardsCompatibilityFragmentConst_get_frame_indexes(self)


    def get_static_indexes(self):
        """get_static_indexes(BackwardsCompatibilityFragmentConst self) -> Ints"""
        return _RMF.BackwardsCompatibilityFragmentConst_get_static_indexes(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.BackwardsCompatibilityFragmentConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(BackwardsCompatibilityFragmentConst self) -> std::string"""
        return _RMF.BackwardsCompatibilityFragmentConst___str__(self)


    def __repr__(self):
        """__repr__(BackwardsCompatibilityFragmentConst self) -> std::string"""
        return _RMF.BackwardsCompatibilityFragmentConst___repr__(self)

    __swig_destroy__ = _RMF.delete_BackwardsCompatibilityFragmentConst
    __del__ = lambda self: None
BackwardsCompatibilityFragmentConst_swigregister = _RMF.BackwardsCompatibilityFragmentConst_swigregister
BackwardsCompatibilityFragmentConst_swigregister(BackwardsCompatibilityFragmentConst)

def BackwardsCompatibilityFragmentConst_get_decorator_type_name():
    """BackwardsCompatibilityFragmentConst_get_decorator_type_name() -> std::string"""
    return _RMF.BackwardsCompatibilityFragmentConst_get_decorator_type_name()

class BackwardsCompatibilityFragment(BackwardsCompatibilityFragmentConst):
    """Proxy of C++ RMF::decorator::BackwardsCompatibilityFragment class."""

    __swig_setmethods__ = {}
    for _s in [BackwardsCompatibilityFragmentConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackwardsCompatibilityFragment, name, value)
    __swig_getmethods__ = {}
    for _s in [BackwardsCompatibilityFragmentConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackwardsCompatibilityFragment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_indexes(self, v):
        """set_indexes(BackwardsCompatibilityFragment self, Ints v)"""
        return _RMF.BackwardsCompatibilityFragment_set_indexes(self, v)


    def set_frame_indexes(self, v):
        """set_frame_indexes(BackwardsCompatibilityFragment self, Ints v)"""
        return _RMF.BackwardsCompatibilityFragment_set_frame_indexes(self, v)


    def set_static_indexes(self, v):
        """set_static_indexes(BackwardsCompatibilityFragment self, Ints v)"""
        return _RMF.BackwardsCompatibilityFragment_set_static_indexes(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.BackwardsCompatibilityFragment_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_BackwardsCompatibilityFragment
    __del__ = lambda self: None
BackwardsCompatibilityFragment_swigregister = _RMF.BackwardsCompatibilityFragment_swigregister
BackwardsCompatibilityFragment_swigregister(BackwardsCompatibilityFragment)

def BackwardsCompatibilityFragment_get_decorator_type_name():
    """BackwardsCompatibilityFragment_get_decorator_type_name() -> std::string"""
    return _RMF.BackwardsCompatibilityFragment_get_decorator_type_name()

class BackwardsCompatibilityFragmentFactory(Factory):
    """Proxy of C++ RMF::decorator::BackwardsCompatibilityFragmentFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackwardsCompatibilityFragmentFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackwardsCompatibilityFragmentFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::BackwardsCompatibilityFragmentFactory self, FileConstHandle fh) -> BackwardsCompatibilityFragmentFactory
        __init__(RMF::decorator::BackwardsCompatibilityFragmentFactory self, FileHandle fh) -> BackwardsCompatibilityFragmentFactory
        """
        this = _RMF.new_BackwardsCompatibilityFragmentFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(BackwardsCompatibilityFragmentFactory self, NodeConstHandle nh) -> BackwardsCompatibilityFragmentConst
        get(BackwardsCompatibilityFragmentFactory self, NodeHandle nh) -> BackwardsCompatibilityFragment
        """
        return _RMF.BackwardsCompatibilityFragmentFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(BackwardsCompatibilityFragmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BackwardsCompatibilityFragmentFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(BackwardsCompatibilityFragmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BackwardsCompatibilityFragmentFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(BackwardsCompatibilityFragmentFactory self) -> std::string"""
        return _RMF.BackwardsCompatibilityFragmentFactory___str__(self)


    def __repr__(self):
        """__repr__(BackwardsCompatibilityFragmentFactory self) -> std::string"""
        return _RMF.BackwardsCompatibilityFragmentFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_BackwardsCompatibilityFragmentFactory
    __del__ = lambda self: None
BackwardsCompatibilityFragmentFactory_swigregister = _RMF.BackwardsCompatibilityFragmentFactory_swigregister
BackwardsCompatibilityFragmentFactory_swigregister(BackwardsCompatibilityFragmentFactory)

class BackwardsCompatibilityFragmentConstFactory(BackwardsCompatibilityFragmentFactory):
    """Proxy of C++ RMF::decorator::BackwardsCompatibilityFragmentConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [BackwardsCompatibilityFragmentFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackwardsCompatibilityFragmentConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [BackwardsCompatibilityFragmentFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackwardsCompatibilityFragmentConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::BackwardsCompatibilityFragmentConstFactory self, FileConstHandle fh) -> BackwardsCompatibilityFragmentConstFactory
        __init__(RMF::decorator::BackwardsCompatibilityFragmentConstFactory self, FileHandle fh) -> BackwardsCompatibilityFragmentConstFactory
        """
        this = _RMF.new_BackwardsCompatibilityFragmentConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_BackwardsCompatibilityFragmentConstFactory
    __del__ = lambda self: None
BackwardsCompatibilityFragmentConstFactory_swigregister = _RMF.BackwardsCompatibilityFragmentConstFactory_swigregister
BackwardsCompatibilityFragmentConstFactory_swigregister(BackwardsCompatibilityFragmentConstFactory)

class DomainConst(Decorator):
    """Proxy of C++ RMF::decorator::DomainConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DomainConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_residue_indexes(self):
        """get_residue_indexes(DomainConst self) -> IntRange"""
        return _RMF.DomainConst_get_residue_indexes(self)


    def get_static_residue_indexes(self):
        """get_static_residue_indexes(DomainConst self) -> IntRange"""
        return _RMF.DomainConst_get_static_residue_indexes(self)


    def get_frame_residue_indexes(self):
        """get_frame_residue_indexes(DomainConst self) -> IntRange"""
        return _RMF.DomainConst_get_frame_residue_indexes(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.DomainConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(DomainConst self) -> std::string"""
        return _RMF.DomainConst___str__(self)


    def __repr__(self):
        """__repr__(DomainConst self) -> std::string"""
        return _RMF.DomainConst___repr__(self)

    __swig_destroy__ = _RMF.delete_DomainConst
    __del__ = lambda self: None
DomainConst_swigregister = _RMF.DomainConst_swigregister
DomainConst_swigregister(DomainConst)

def DomainConst_get_decorator_type_name():
    """DomainConst_get_decorator_type_name() -> std::string"""
    return _RMF.DomainConst_get_decorator_type_name()

class Domain(DomainConst):
    """Proxy of C++ RMF::decorator::Domain class."""

    __swig_setmethods__ = {}
    for _s in [DomainConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Domain, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Domain, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_residue_indexes(self, v0, v1):
        """set_residue_indexes(Domain self, RMF::Int v0, RMF::Int v1)"""
        return _RMF.Domain_set_residue_indexes(self, v0, v1)


    def set_frame_residue_indexes(self, v0, v1):
        """set_frame_residue_indexes(Domain self, RMF::Int v0, RMF::Int v1)"""
        return _RMF.Domain_set_frame_residue_indexes(self, v0, v1)


    def set_static_residue_indexes(self, v0, v1):
        """set_static_residue_indexes(Domain self, RMF::Int v0, RMF::Int v1)"""
        return _RMF.Domain_set_static_residue_indexes(self, v0, v1)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Domain_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Domain
    __del__ = lambda self: None
Domain_swigregister = _RMF.Domain_swigregister
Domain_swigregister(Domain)

def Domain_get_decorator_type_name():
    """Domain_get_decorator_type_name() -> std::string"""
    return _RMF.Domain_get_decorator_type_name()

class DomainFactory(Factory):
    """Proxy of C++ RMF::decorator::DomainFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DomainFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::DomainFactory self, FileConstHandle fh) -> DomainFactory
        __init__(RMF::decorator::DomainFactory self, FileHandle fh) -> DomainFactory
        """
        this = _RMF.new_DomainFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(DomainFactory self, NodeConstHandle nh) -> DomainConst
        get(DomainFactory self, NodeHandle nh) -> Domain
        """
        return _RMF.DomainFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(DomainFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.DomainFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(DomainFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.DomainFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(DomainFactory self) -> std::string"""
        return _RMF.DomainFactory___str__(self)


    def __repr__(self):
        """__repr__(DomainFactory self) -> std::string"""
        return _RMF.DomainFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_DomainFactory
    __del__ = lambda self: None
DomainFactory_swigregister = _RMF.DomainFactory_swigregister
DomainFactory_swigregister(DomainFactory)

class DomainConstFactory(DomainFactory):
    """Proxy of C++ RMF::decorator::DomainConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [DomainFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [DomainFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DomainConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::DomainConstFactory self, FileConstHandle fh) -> DomainConstFactory
        __init__(RMF::decorator::DomainConstFactory self, FileHandle fh) -> DomainConstFactory
        """
        this = _RMF.new_DomainConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_DomainConstFactory
    __del__ = lambda self: None
DomainConstFactory_swigregister = _RMF.DomainConstFactory_swigregister
DomainConstFactory_swigregister(DomainConstFactory)

class TypedConst(Decorator):
    """Proxy of C++ RMF::decorator::TypedConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypedConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_type_name(self):
        """get_type_name(TypedConst self) -> RMF::String"""
        return _RMF.TypedConst_get_type_name(self)


    def get_frame_type_name(self):
        """get_frame_type_name(TypedConst self) -> RMF::String"""
        return _RMF.TypedConst_get_frame_type_name(self)


    def get_static_type_name(self):
        """get_static_type_name(TypedConst self) -> RMF::String"""
        return _RMF.TypedConst_get_static_type_name(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.TypedConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(TypedConst self) -> std::string"""
        return _RMF.TypedConst___str__(self)


    def __repr__(self):
        """__repr__(TypedConst self) -> std::string"""
        return _RMF.TypedConst___repr__(self)

    __swig_destroy__ = _RMF.delete_TypedConst
    __del__ = lambda self: None
TypedConst_swigregister = _RMF.TypedConst_swigregister
TypedConst_swigregister(TypedConst)

def TypedConst_get_decorator_type_name():
    """TypedConst_get_decorator_type_name() -> std::string"""
    return _RMF.TypedConst_get_decorator_type_name()

class Typed(TypedConst):
    """Proxy of C++ RMF::decorator::Typed class."""

    __swig_setmethods__ = {}
    for _s in [TypedConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Typed, name, value)
    __swig_getmethods__ = {}
    for _s in [TypedConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Typed, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_type_name(self, v):
        """set_type_name(Typed self, RMF::String v)"""
        return _RMF.Typed_set_type_name(self, v)


    def set_frame_type_name(self, v):
        """set_frame_type_name(Typed self, RMF::String v)"""
        return _RMF.Typed_set_frame_type_name(self, v)


    def set_static_type_name(self, v):
        """set_static_type_name(Typed self, RMF::String v)"""
        return _RMF.Typed_set_static_type_name(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Typed_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Typed
    __del__ = lambda self: None
Typed_swigregister = _RMF.Typed_swigregister
Typed_swigregister(Typed)

def Typed_get_decorator_type_name():
    """Typed_get_decorator_type_name() -> std::string"""
    return _RMF.Typed_get_decorator_type_name()

class TypedFactory(Factory):
    """Proxy of C++ RMF::decorator::TypedFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypedFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::TypedFactory self, FileConstHandle fh) -> TypedFactory
        __init__(RMF::decorator::TypedFactory self, FileHandle fh) -> TypedFactory
        """
        this = _RMF.new_TypedFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(TypedFactory self, NodeConstHandle nh) -> TypedConst
        get(TypedFactory self, NodeHandle nh) -> Typed
        """
        return _RMF.TypedFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(TypedFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.TypedFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(TypedFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.TypedFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(TypedFactory self) -> std::string"""
        return _RMF.TypedFactory___str__(self)


    def __repr__(self):
        """__repr__(TypedFactory self) -> std::string"""
        return _RMF.TypedFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_TypedFactory
    __del__ = lambda self: None
TypedFactory_swigregister = _RMF.TypedFactory_swigregister
TypedFactory_swigregister(TypedFactory)

class TypedConstFactory(TypedFactory):
    """Proxy of C++ RMF::decorator::TypedConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [TypedFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [TypedFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypedConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::TypedConstFactory self, FileConstHandle fh) -> TypedConstFactory
        __init__(RMF::decorator::TypedConstFactory self, FileHandle fh) -> TypedConstFactory
        """
        this = _RMF.new_TypedConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_TypedConstFactory
    __del__ = lambda self: None
TypedConstFactory_swigregister = _RMF.TypedConstFactory_swigregister
TypedConstFactory_swigregister(TypedConstFactory)

class CopyConst(Decorator):
    """Proxy of C++ RMF::decorator::CopyConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CopyConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CopyConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_copy_index(self):
        """get_copy_index(CopyConst self) -> RMF::Int"""
        return _RMF.CopyConst_get_copy_index(self)


    def get_frame_copy_index(self):
        """get_frame_copy_index(CopyConst self) -> RMF::Int"""
        return _RMF.CopyConst_get_frame_copy_index(self)


    def get_static_copy_index(self):
        """get_static_copy_index(CopyConst self) -> RMF::Int"""
        return _RMF.CopyConst_get_static_copy_index(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.CopyConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(CopyConst self) -> std::string"""
        return _RMF.CopyConst___str__(self)


    def __repr__(self):
        """__repr__(CopyConst self) -> std::string"""
        return _RMF.CopyConst___repr__(self)

    __swig_destroy__ = _RMF.delete_CopyConst
    __del__ = lambda self: None
CopyConst_swigregister = _RMF.CopyConst_swigregister
CopyConst_swigregister(CopyConst)

def CopyConst_get_decorator_type_name():
    """CopyConst_get_decorator_type_name() -> std::string"""
    return _RMF.CopyConst_get_decorator_type_name()

class Copy(CopyConst):
    """Proxy of C++ RMF::decorator::Copy class."""

    __swig_setmethods__ = {}
    for _s in [CopyConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Copy, name, value)
    __swig_getmethods__ = {}
    for _s in [CopyConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Copy, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_copy_index(self, v):
        """set_copy_index(Copy self, RMF::Int v)"""
        return _RMF.Copy_set_copy_index(self, v)


    def set_frame_copy_index(self, v):
        """set_frame_copy_index(Copy self, RMF::Int v)"""
        return _RMF.Copy_set_frame_copy_index(self, v)


    def set_static_copy_index(self, v):
        """set_static_copy_index(Copy self, RMF::Int v)"""
        return _RMF.Copy_set_static_copy_index(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Copy_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Copy
    __del__ = lambda self: None
Copy_swigregister = _RMF.Copy_swigregister
Copy_swigregister(Copy)

def Copy_get_decorator_type_name():
    """Copy_get_decorator_type_name() -> std::string"""
    return _RMF.Copy_get_decorator_type_name()

class CopyFactory(Factory):
    """Proxy of C++ RMF::decorator::CopyFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CopyFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CopyFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::CopyFactory self, FileConstHandle fh) -> CopyFactory
        __init__(RMF::decorator::CopyFactory self, FileHandle fh) -> CopyFactory
        """
        this = _RMF.new_CopyFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(CopyFactory self, NodeConstHandle nh) -> CopyConst
        get(CopyFactory self, NodeHandle nh) -> Copy
        """
        return _RMF.CopyFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(CopyFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CopyFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(CopyFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CopyFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(CopyFactory self) -> std::string"""
        return _RMF.CopyFactory___str__(self)


    def __repr__(self):
        """__repr__(CopyFactory self) -> std::string"""
        return _RMF.CopyFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_CopyFactory
    __del__ = lambda self: None
CopyFactory_swigregister = _RMF.CopyFactory_swigregister
CopyFactory_swigregister(CopyFactory)

class CopyConstFactory(CopyFactory):
    """Proxy of C++ RMF::decorator::CopyConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [CopyFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CopyConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [CopyFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CopyConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::CopyConstFactory self, FileConstHandle fh) -> CopyConstFactory
        __init__(RMF::decorator::CopyConstFactory self, FileHandle fh) -> CopyConstFactory
        """
        this = _RMF.new_CopyConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_CopyConstFactory
    __del__ = lambda self: None
CopyConstFactory_swigregister = _RMF.CopyConstFactory_swigregister
CopyConstFactory_swigregister(CopyConstFactory)

class StateConst(Decorator):
    """Proxy of C++ RMF::decorator::StateConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_state_index(self):
        """get_state_index(StateConst self) -> RMF::Int"""
        return _RMF.StateConst_get_state_index(self)


    def get_frame_state_index(self):
        """get_frame_state_index(StateConst self) -> RMF::Int"""
        return _RMF.StateConst_get_frame_state_index(self)


    def get_static_state_index(self):
        """get_static_state_index(StateConst self) -> RMF::Int"""
        return _RMF.StateConst_get_static_state_index(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.StateConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(StateConst self) -> std::string"""
        return _RMF.StateConst___str__(self)


    def __repr__(self):
        """__repr__(StateConst self) -> std::string"""
        return _RMF.StateConst___repr__(self)

    __swig_destroy__ = _RMF.delete_StateConst
    __del__ = lambda self: None
StateConst_swigregister = _RMF.StateConst_swigregister
StateConst_swigregister(StateConst)

def StateConst_get_decorator_type_name():
    """StateConst_get_decorator_type_name() -> std::string"""
    return _RMF.StateConst_get_decorator_type_name()

class State(StateConst):
    """Proxy of C++ RMF::decorator::State class."""

    __swig_setmethods__ = {}
    for _s in [StateConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    for _s in [StateConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_state_index(self, v):
        """set_state_index(State self, RMF::Int v)"""
        return _RMF.State_set_state_index(self, v)


    def set_frame_state_index(self, v):
        """set_frame_state_index(State self, RMF::Int v)"""
        return _RMF.State_set_frame_state_index(self, v)


    def set_static_state_index(self, v):
        """set_static_state_index(State self, RMF::Int v)"""
        return _RMF.State_set_static_state_index(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.State_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_State
    __del__ = lambda self: None
State_swigregister = _RMF.State_swigregister
State_swigregister(State)

def State_get_decorator_type_name():
    """State_get_decorator_type_name() -> std::string"""
    return _RMF.State_get_decorator_type_name()

class StateFactory(Factory):
    """Proxy of C++ RMF::decorator::StateFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::StateFactory self, FileConstHandle fh) -> StateFactory
        __init__(RMF::decorator::StateFactory self, FileHandle fh) -> StateFactory
        """
        this = _RMF.new_StateFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(StateFactory self, NodeConstHandle nh) -> StateConst
        get(StateFactory self, NodeHandle nh) -> State
        """
        return _RMF.StateFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(StateFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.StateFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(StateFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.StateFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(StateFactory self) -> std::string"""
        return _RMF.StateFactory___str__(self)


    def __repr__(self):
        """__repr__(StateFactory self) -> std::string"""
        return _RMF.StateFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_StateFactory
    __del__ = lambda self: None
StateFactory_swigregister = _RMF.StateFactory_swigregister
StateFactory_swigregister(StateFactory)

class StateConstFactory(StateFactory):
    """Proxy of C++ RMF::decorator::StateConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [StateFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StateFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::StateConstFactory self, FileConstHandle fh) -> StateConstFactory
        __init__(RMF::decorator::StateConstFactory self, FileHandle fh) -> StateConstFactory
        """
        this = _RMF.new_StateConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_StateConstFactory
    __del__ = lambda self: None
StateConstFactory_swigregister = _RMF.StateConstFactory_swigregister
StateConstFactory_swigregister(StateConstFactory)

class ExplicitResolutionConst(Decorator):
    """Proxy of C++ RMF::decorator::ExplicitResolutionConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExplicitResolutionConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExplicitResolutionConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_explicit_resolution(self):
        """get_explicit_resolution(ExplicitResolutionConst self) -> RMF::Float"""
        return _RMF.ExplicitResolutionConst_get_explicit_resolution(self)


    def get_frame_explicit_resolution(self):
        """get_frame_explicit_resolution(ExplicitResolutionConst self) -> RMF::Float"""
        return _RMF.ExplicitResolutionConst_get_frame_explicit_resolution(self)


    def get_static_explicit_resolution(self):
        """get_static_explicit_resolution(ExplicitResolutionConst self) -> RMF::Float"""
        return _RMF.ExplicitResolutionConst_get_static_explicit_resolution(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ExplicitResolutionConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ExplicitResolutionConst self) -> std::string"""
        return _RMF.ExplicitResolutionConst___str__(self)


    def __repr__(self):
        """__repr__(ExplicitResolutionConst self) -> std::string"""
        return _RMF.ExplicitResolutionConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ExplicitResolutionConst
    __del__ = lambda self: None
ExplicitResolutionConst_swigregister = _RMF.ExplicitResolutionConst_swigregister
ExplicitResolutionConst_swigregister(ExplicitResolutionConst)

def ExplicitResolutionConst_get_decorator_type_name():
    """ExplicitResolutionConst_get_decorator_type_name() -> std::string"""
    return _RMF.ExplicitResolutionConst_get_decorator_type_name()

class ExplicitResolution(ExplicitResolutionConst):
    """Proxy of C++ RMF::decorator::ExplicitResolution class."""

    __swig_setmethods__ = {}
    for _s in [ExplicitResolutionConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExplicitResolution, name, value)
    __swig_getmethods__ = {}
    for _s in [ExplicitResolutionConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExplicitResolution, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_explicit_resolution(self, v):
        """set_explicit_resolution(ExplicitResolution self, RMF::Float v)"""
        return _RMF.ExplicitResolution_set_explicit_resolution(self, v)


    def set_frame_explicit_resolution(self, v):
        """set_frame_explicit_resolution(ExplicitResolution self, RMF::Float v)"""
        return _RMF.ExplicitResolution_set_frame_explicit_resolution(self, v)


    def set_static_explicit_resolution(self, v):
        """set_static_explicit_resolution(ExplicitResolution self, RMF::Float v)"""
        return _RMF.ExplicitResolution_set_static_explicit_resolution(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ExplicitResolution_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_ExplicitResolution
    __del__ = lambda self: None
ExplicitResolution_swigregister = _RMF.ExplicitResolution_swigregister
ExplicitResolution_swigregister(ExplicitResolution)

def ExplicitResolution_get_decorator_type_name():
    """ExplicitResolution_get_decorator_type_name() -> std::string"""
    return _RMF.ExplicitResolution_get_decorator_type_name()

class ExplicitResolutionFactory(Factory):
    """Proxy of C++ RMF::decorator::ExplicitResolutionFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExplicitResolutionFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExplicitResolutionFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ExplicitResolutionFactory self, FileConstHandle fh) -> ExplicitResolutionFactory
        __init__(RMF::decorator::ExplicitResolutionFactory self, FileHandle fh) -> ExplicitResolutionFactory
        """
        this = _RMF.new_ExplicitResolutionFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ExplicitResolutionFactory self, NodeConstHandle nh) -> ExplicitResolutionConst
        get(ExplicitResolutionFactory self, NodeHandle nh) -> ExplicitResolution
        """
        return _RMF.ExplicitResolutionFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ExplicitResolutionFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ExplicitResolutionFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ExplicitResolutionFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ExplicitResolutionFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ExplicitResolutionFactory self) -> std::string"""
        return _RMF.ExplicitResolutionFactory___str__(self)


    def __repr__(self):
        """__repr__(ExplicitResolutionFactory self) -> std::string"""
        return _RMF.ExplicitResolutionFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ExplicitResolutionFactory
    __del__ = lambda self: None
ExplicitResolutionFactory_swigregister = _RMF.ExplicitResolutionFactory_swigregister
ExplicitResolutionFactory_swigregister(ExplicitResolutionFactory)

class ExplicitResolutionConstFactory(ExplicitResolutionFactory):
    """Proxy of C++ RMF::decorator::ExplicitResolutionConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ExplicitResolutionFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExplicitResolutionConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ExplicitResolutionFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExplicitResolutionConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ExplicitResolutionConstFactory self, FileConstHandle fh) -> ExplicitResolutionConstFactory
        __init__(RMF::decorator::ExplicitResolutionConstFactory self, FileHandle fh) -> ExplicitResolutionConstFactory
        """
        this = _RMF.new_ExplicitResolutionConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ExplicitResolutionConstFactory
    __del__ = lambda self: None
ExplicitResolutionConstFactory_swigregister = _RMF.ExplicitResolutionConstFactory_swigregister
ExplicitResolutionConstFactory_swigregister(ExplicitResolutionConstFactory)

class ColoredConst(Decorator):
    """Proxy of C++ RMF::decorator::ColoredConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColoredConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColoredConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_rgb_color(self):
        """get_rgb_color(ColoredConst self) -> Vector3"""
        return _RMF.ColoredConst_get_rgb_color(self)


    def get_frame_rgb_color(self):
        """get_frame_rgb_color(ColoredConst self) -> Vector3"""
        return _RMF.ColoredConst_get_frame_rgb_color(self)


    def get_static_rgb_color(self):
        """get_static_rgb_color(ColoredConst self) -> Vector3"""
        return _RMF.ColoredConst_get_static_rgb_color(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ColoredConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ColoredConst self) -> std::string"""
        return _RMF.ColoredConst___str__(self)


    def __repr__(self):
        """__repr__(ColoredConst self) -> std::string"""
        return _RMF.ColoredConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ColoredConst
    __del__ = lambda self: None
ColoredConst_swigregister = _RMF.ColoredConst_swigregister
ColoredConst_swigregister(ColoredConst)

def ColoredConst_get_decorator_type_name():
    """ColoredConst_get_decorator_type_name() -> std::string"""
    return _RMF.ColoredConst_get_decorator_type_name()

class Colored(ColoredConst):
    """Proxy of C++ RMF::decorator::Colored class."""

    __swig_setmethods__ = {}
    for _s in [ColoredConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Colored, name, value)
    __swig_getmethods__ = {}
    for _s in [ColoredConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Colored, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_rgb_color(self, v):
        """set_rgb_color(Colored self, Vector3 v)"""
        return _RMF.Colored_set_rgb_color(self, v)


    def set_frame_rgb_color(self, v):
        """set_frame_rgb_color(Colored self, Vector3 v)"""
        return _RMF.Colored_set_frame_rgb_color(self, v)


    def set_static_rgb_color(self, v):
        """set_static_rgb_color(Colored self, Vector3 v)"""
        return _RMF.Colored_set_static_rgb_color(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Colored_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Colored
    __del__ = lambda self: None
Colored_swigregister = _RMF.Colored_swigregister
Colored_swigregister(Colored)

def Colored_get_decorator_type_name():
    """Colored_get_decorator_type_name() -> std::string"""
    return _RMF.Colored_get_decorator_type_name()

class ColoredFactory(Factory):
    """Proxy of C++ RMF::decorator::ColoredFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColoredFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColoredFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ColoredFactory self, FileConstHandle fh) -> ColoredFactory
        __init__(RMF::decorator::ColoredFactory self, FileHandle fh) -> ColoredFactory
        """
        this = _RMF.new_ColoredFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ColoredFactory self, NodeConstHandle nh) -> ColoredConst
        get(ColoredFactory self, NodeHandle nh) -> Colored
        """
        return _RMF.ColoredFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ColoredFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ColoredFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ColoredFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ColoredFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ColoredFactory self) -> std::string"""
        return _RMF.ColoredFactory___str__(self)


    def __repr__(self):
        """__repr__(ColoredFactory self) -> std::string"""
        return _RMF.ColoredFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ColoredFactory
    __del__ = lambda self: None
ColoredFactory_swigregister = _RMF.ColoredFactory_swigregister
ColoredFactory_swigregister(ColoredFactory)

class ColoredConstFactory(ColoredFactory):
    """Proxy of C++ RMF::decorator::ColoredConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ColoredFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColoredConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ColoredFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColoredConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ColoredConstFactory self, FileConstHandle fh) -> ColoredConstFactory
        __init__(RMF::decorator::ColoredConstFactory self, FileHandle fh) -> ColoredConstFactory
        """
        this = _RMF.new_ColoredConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ColoredConstFactory
    __del__ = lambda self: None
ColoredConstFactory_swigregister = _RMF.ColoredConstFactory_swigregister
ColoredConstFactory_swigregister(ColoredConstFactory)

class BallConst(Decorator):
    """Proxy of C++ RMF::decorator::BallConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BallConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BallConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_coordinates(self):
        """get_coordinates(BallConst self) -> Vector3"""
        return _RMF.BallConst_get_coordinates(self)


    def get_frame_coordinates(self):
        """get_frame_coordinates(BallConst self) -> Vector3"""
        return _RMF.BallConst_get_frame_coordinates(self)


    def get_static_coordinates(self):
        """get_static_coordinates(BallConst self) -> Vector3"""
        return _RMF.BallConst_get_static_coordinates(self)


    def get_radius(self):
        """get_radius(BallConst self) -> RMF::Float"""
        return _RMF.BallConst_get_radius(self)


    def get_frame_radius(self):
        """get_frame_radius(BallConst self) -> RMF::Float"""
        return _RMF.BallConst_get_frame_radius(self)


    def get_static_radius(self):
        """get_static_radius(BallConst self) -> RMF::Float"""
        return _RMF.BallConst_get_static_radius(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.BallConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(BallConst self) -> std::string"""
        return _RMF.BallConst___str__(self)


    def __repr__(self):
        """__repr__(BallConst self) -> std::string"""
        return _RMF.BallConst___repr__(self)

    __swig_destroy__ = _RMF.delete_BallConst
    __del__ = lambda self: None
BallConst_swigregister = _RMF.BallConst_swigregister
BallConst_swigregister(BallConst)

def BallConst_get_decorator_type_name():
    """BallConst_get_decorator_type_name() -> std::string"""
    return _RMF.BallConst_get_decorator_type_name()

class Ball(BallConst):
    """Proxy of C++ RMF::decorator::Ball class."""

    __swig_setmethods__ = {}
    for _s in [BallConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ball, name, value)
    __swig_getmethods__ = {}
    for _s in [BallConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ball, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_coordinates(self, v):
        """set_coordinates(Ball self, Vector3 v)"""
        return _RMF.Ball_set_coordinates(self, v)


    def set_frame_coordinates(self, v):
        """set_frame_coordinates(Ball self, Vector3 v)"""
        return _RMF.Ball_set_frame_coordinates(self, v)


    def set_static_coordinates(self, v):
        """set_static_coordinates(Ball self, Vector3 v)"""
        return _RMF.Ball_set_static_coordinates(self, v)


    def set_radius(self, v):
        """set_radius(Ball self, RMF::Float v)"""
        return _RMF.Ball_set_radius(self, v)


    def set_frame_radius(self, v):
        """set_frame_radius(Ball self, RMF::Float v)"""
        return _RMF.Ball_set_frame_radius(self, v)


    def set_static_radius(self, v):
        """set_static_radius(Ball self, RMF::Float v)"""
        return _RMF.Ball_set_static_radius(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Ball_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Ball
    __del__ = lambda self: None
Ball_swigregister = _RMF.Ball_swigregister
Ball_swigregister(Ball)

def Ball_get_decorator_type_name():
    """Ball_get_decorator_type_name() -> std::string"""
    return _RMF.Ball_get_decorator_type_name()

class BallFactory(Factory):
    """Proxy of C++ RMF::decorator::BallFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BallFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BallFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::BallFactory self, FileConstHandle fh) -> BallFactory
        __init__(RMF::decorator::BallFactory self, FileHandle fh) -> BallFactory
        """
        this = _RMF.new_BallFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(BallFactory self, NodeConstHandle nh) -> BallConst
        get(BallFactory self, NodeHandle nh) -> Ball
        """
        return _RMF.BallFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(BallFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BallFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(BallFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BallFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(BallFactory self) -> std::string"""
        return _RMF.BallFactory___str__(self)


    def __repr__(self):
        """__repr__(BallFactory self) -> std::string"""
        return _RMF.BallFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_BallFactory
    __del__ = lambda self: None
BallFactory_swigregister = _RMF.BallFactory_swigregister
BallFactory_swigregister(BallFactory)

class BallConstFactory(BallFactory):
    """Proxy of C++ RMF::decorator::BallConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [BallFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BallConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [BallFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BallConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::BallConstFactory self, FileConstHandle fh) -> BallConstFactory
        __init__(RMF::decorator::BallConstFactory self, FileHandle fh) -> BallConstFactory
        """
        this = _RMF.new_BallConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_BallConstFactory
    __del__ = lambda self: None
BallConstFactory_swigregister = _RMF.BallConstFactory_swigregister
BallConstFactory_swigregister(BallConstFactory)

class EllipsoidConst(Decorator):
    """Proxy of C++ RMF::decorator::EllipsoidConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipsoidConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EllipsoidConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_axis_lengths(self):
        """get_axis_lengths(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_axis_lengths(self)


    def get_frame_axis_lengths(self):
        """get_frame_axis_lengths(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_frame_axis_lengths(self)


    def get_static_axis_lengths(self):
        """get_static_axis_lengths(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_static_axis_lengths(self)


    def get_orientation(self):
        """get_orientation(EllipsoidConst self) -> Vector4"""
        return _RMF.EllipsoidConst_get_orientation(self)


    def get_frame_orientation(self):
        """get_frame_orientation(EllipsoidConst self) -> Vector4"""
        return _RMF.EllipsoidConst_get_frame_orientation(self)


    def get_static_orientation(self):
        """get_static_orientation(EllipsoidConst self) -> Vector4"""
        return _RMF.EllipsoidConst_get_static_orientation(self)


    def get_coordinates(self):
        """get_coordinates(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_coordinates(self)


    def get_frame_coordinates(self):
        """get_frame_coordinates(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_frame_coordinates(self)


    def get_static_coordinates(self):
        """get_static_coordinates(EllipsoidConst self) -> Vector3"""
        return _RMF.EllipsoidConst_get_static_coordinates(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.EllipsoidConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(EllipsoidConst self) -> std::string"""
        return _RMF.EllipsoidConst___str__(self)


    def __repr__(self):
        """__repr__(EllipsoidConst self) -> std::string"""
        return _RMF.EllipsoidConst___repr__(self)

    __swig_destroy__ = _RMF.delete_EllipsoidConst
    __del__ = lambda self: None
EllipsoidConst_swigregister = _RMF.EllipsoidConst_swigregister
EllipsoidConst_swigregister(EllipsoidConst)

def EllipsoidConst_get_decorator_type_name():
    """EllipsoidConst_get_decorator_type_name() -> std::string"""
    return _RMF.EllipsoidConst_get_decorator_type_name()

class Ellipsoid(EllipsoidConst):
    """Proxy of C++ RMF::decorator::Ellipsoid class."""

    __swig_setmethods__ = {}
    for _s in [EllipsoidConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ellipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipsoidConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ellipsoid, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_axis_lengths(self, v):
        """set_axis_lengths(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_axis_lengths(self, v)


    def set_frame_axis_lengths(self, v):
        """set_frame_axis_lengths(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_frame_axis_lengths(self, v)


    def set_static_axis_lengths(self, v):
        """set_static_axis_lengths(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_static_axis_lengths(self, v)


    def set_orientation(self, v):
        """set_orientation(Ellipsoid self, Vector4 v)"""
        return _RMF.Ellipsoid_set_orientation(self, v)


    def set_frame_orientation(self, v):
        """set_frame_orientation(Ellipsoid self, Vector4 v)"""
        return _RMF.Ellipsoid_set_frame_orientation(self, v)


    def set_static_orientation(self, v):
        """set_static_orientation(Ellipsoid self, Vector4 v)"""
        return _RMF.Ellipsoid_set_static_orientation(self, v)


    def set_coordinates(self, v):
        """set_coordinates(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_coordinates(self, v)


    def set_frame_coordinates(self, v):
        """set_frame_coordinates(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_frame_coordinates(self, v)


    def set_static_coordinates(self, v):
        """set_static_coordinates(Ellipsoid self, Vector3 v)"""
        return _RMF.Ellipsoid_set_static_coordinates(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Ellipsoid_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Ellipsoid
    __del__ = lambda self: None
Ellipsoid_swigregister = _RMF.Ellipsoid_swigregister
Ellipsoid_swigregister(Ellipsoid)

def Ellipsoid_get_decorator_type_name():
    """Ellipsoid_get_decorator_type_name() -> std::string"""
    return _RMF.Ellipsoid_get_decorator_type_name()

class EllipsoidFactory(Factory):
    """Proxy of C++ RMF::decorator::EllipsoidFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipsoidFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EllipsoidFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::EllipsoidFactory self, FileConstHandle fh) -> EllipsoidFactory
        __init__(RMF::decorator::EllipsoidFactory self, FileHandle fh) -> EllipsoidFactory
        """
        this = _RMF.new_EllipsoidFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(EllipsoidFactory self, NodeConstHandle nh) -> EllipsoidConst
        get(EllipsoidFactory self, NodeHandle nh) -> Ellipsoid
        """
        return _RMF.EllipsoidFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(EllipsoidFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.EllipsoidFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(EllipsoidFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.EllipsoidFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(EllipsoidFactory self) -> std::string"""
        return _RMF.EllipsoidFactory___str__(self)


    def __repr__(self):
        """__repr__(EllipsoidFactory self) -> std::string"""
        return _RMF.EllipsoidFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_EllipsoidFactory
    __del__ = lambda self: None
EllipsoidFactory_swigregister = _RMF.EllipsoidFactory_swigregister
EllipsoidFactory_swigregister(EllipsoidFactory)

class EllipsoidConstFactory(EllipsoidFactory):
    """Proxy of C++ RMF::decorator::EllipsoidConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [EllipsoidFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipsoidConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipsoidFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EllipsoidConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::EllipsoidConstFactory self, FileConstHandle fh) -> EllipsoidConstFactory
        __init__(RMF::decorator::EllipsoidConstFactory self, FileHandle fh) -> EllipsoidConstFactory
        """
        this = _RMF.new_EllipsoidConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_EllipsoidConstFactory
    __del__ = lambda self: None
EllipsoidConstFactory_swigregister = _RMF.EllipsoidConstFactory_swigregister
EllipsoidConstFactory_swigregister(EllipsoidConstFactory)

class CylinderConst(Decorator):
    """Proxy of C++ RMF::decorator::CylinderConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CylinderConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CylinderConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_radius(self):
        """get_radius(CylinderConst self) -> RMF::Float"""
        return _RMF.CylinderConst_get_radius(self)


    def get_frame_radius(self):
        """get_frame_radius(CylinderConst self) -> RMF::Float"""
        return _RMF.CylinderConst_get_frame_radius(self)


    def get_static_radius(self):
        """get_static_radius(CylinderConst self) -> RMF::Float"""
        return _RMF.CylinderConst_get_static_radius(self)


    def get_coordinates_list(self):
        """get_coordinates_list(CylinderConst self) -> Vector3s"""
        return _RMF.CylinderConst_get_coordinates_list(self)


    def get_frame_coordinates_list(self):
        """get_frame_coordinates_list(CylinderConst self) -> Vector3s"""
        return _RMF.CylinderConst_get_frame_coordinates_list(self)


    def get_static_coordinates_list(self):
        """get_static_coordinates_list(CylinderConst self) -> Vector3s"""
        return _RMF.CylinderConst_get_static_coordinates_list(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.CylinderConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(CylinderConst self) -> std::string"""
        return _RMF.CylinderConst___str__(self)


    def __repr__(self):
        """__repr__(CylinderConst self) -> std::string"""
        return _RMF.CylinderConst___repr__(self)

    __swig_destroy__ = _RMF.delete_CylinderConst
    __del__ = lambda self: None
CylinderConst_swigregister = _RMF.CylinderConst_swigregister
CylinderConst_swigregister(CylinderConst)

def CylinderConst_get_decorator_type_name():
    """CylinderConst_get_decorator_type_name() -> std::string"""
    return _RMF.CylinderConst_get_decorator_type_name()

class Cylinder(CylinderConst):
    """Proxy of C++ RMF::decorator::Cylinder class."""

    __swig_setmethods__ = {}
    for _s in [CylinderConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [CylinderConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cylinder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_radius(self, v):
        """set_radius(Cylinder self, RMF::Float v)"""
        return _RMF.Cylinder_set_radius(self, v)


    def set_frame_radius(self, v):
        """set_frame_radius(Cylinder self, RMF::Float v)"""
        return _RMF.Cylinder_set_frame_radius(self, v)


    def set_static_radius(self, v):
        """set_static_radius(Cylinder self, RMF::Float v)"""
        return _RMF.Cylinder_set_static_radius(self, v)


    def set_coordinates_list(self, v):
        """set_coordinates_list(Cylinder self, Vector3s v)"""
        return _RMF.Cylinder_set_coordinates_list(self, v)


    def set_frame_coordinates_list(self, v):
        """set_frame_coordinates_list(Cylinder self, Vector3s v)"""
        return _RMF.Cylinder_set_frame_coordinates_list(self, v)


    def set_static_coordinates_list(self, v):
        """set_static_coordinates_list(Cylinder self, Vector3s v)"""
        return _RMF.Cylinder_set_static_coordinates_list(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Cylinder_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Cylinder
    __del__ = lambda self: None
Cylinder_swigregister = _RMF.Cylinder_swigregister
Cylinder_swigregister(Cylinder)

def Cylinder_get_decorator_type_name():
    """Cylinder_get_decorator_type_name() -> std::string"""
    return _RMF.Cylinder_get_decorator_type_name()

class CylinderFactory(Factory):
    """Proxy of C++ RMF::decorator::CylinderFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CylinderFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CylinderFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::CylinderFactory self, FileConstHandle fh) -> CylinderFactory
        __init__(RMF::decorator::CylinderFactory self, FileHandle fh) -> CylinderFactory
        """
        this = _RMF.new_CylinderFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(CylinderFactory self, NodeConstHandle nh) -> CylinderConst
        get(CylinderFactory self, NodeHandle nh) -> Cylinder
        """
        return _RMF.CylinderFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(CylinderFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CylinderFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(CylinderFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CylinderFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(CylinderFactory self) -> std::string"""
        return _RMF.CylinderFactory___str__(self)


    def __repr__(self):
        """__repr__(CylinderFactory self) -> std::string"""
        return _RMF.CylinderFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_CylinderFactory
    __del__ = lambda self: None
CylinderFactory_swigregister = _RMF.CylinderFactory_swigregister
CylinderFactory_swigregister(CylinderFactory)

class CylinderConstFactory(CylinderFactory):
    """Proxy of C++ RMF::decorator::CylinderConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [CylinderFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CylinderConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [CylinderFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CylinderConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::CylinderConstFactory self, FileConstHandle fh) -> CylinderConstFactory
        __init__(RMF::decorator::CylinderConstFactory self, FileHandle fh) -> CylinderConstFactory
        """
        this = _RMF.new_CylinderConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_CylinderConstFactory
    __del__ = lambda self: None
CylinderConstFactory_swigregister = _RMF.CylinderConstFactory_swigregister
CylinderConstFactory_swigregister(CylinderConstFactory)

class SegmentConst(Decorator):
    """Proxy of C++ RMF::decorator::SegmentConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_coordinates_list(self):
        """get_coordinates_list(SegmentConst self) -> Vector3s"""
        return _RMF.SegmentConst_get_coordinates_list(self)


    def get_frame_coordinates_list(self):
        """get_frame_coordinates_list(SegmentConst self) -> Vector3s"""
        return _RMF.SegmentConst_get_frame_coordinates_list(self)


    def get_static_coordinates_list(self):
        """get_static_coordinates_list(SegmentConst self) -> Vector3s"""
        return _RMF.SegmentConst_get_static_coordinates_list(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.SegmentConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(SegmentConst self) -> std::string"""
        return _RMF.SegmentConst___str__(self)


    def __repr__(self):
        """__repr__(SegmentConst self) -> std::string"""
        return _RMF.SegmentConst___repr__(self)

    __swig_destroy__ = _RMF.delete_SegmentConst
    __del__ = lambda self: None
SegmentConst_swigregister = _RMF.SegmentConst_swigregister
SegmentConst_swigregister(SegmentConst)

def SegmentConst_get_decorator_type_name():
    """SegmentConst_get_decorator_type_name() -> std::string"""
    return _RMF.SegmentConst_get_decorator_type_name()

class Segment(SegmentConst):
    """Proxy of C++ RMF::decorator::Segment class."""

    __swig_setmethods__ = {}
    for _s in [SegmentConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Segment, name, value)
    __swig_getmethods__ = {}
    for _s in [SegmentConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Segment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_coordinates_list(self, v):
        """set_coordinates_list(Segment self, Vector3s v)"""
        return _RMF.Segment_set_coordinates_list(self, v)


    def set_frame_coordinates_list(self, v):
        """set_frame_coordinates_list(Segment self, Vector3s v)"""
        return _RMF.Segment_set_frame_coordinates_list(self, v)


    def set_static_coordinates_list(self, v):
        """set_static_coordinates_list(Segment self, Vector3s v)"""
        return _RMF.Segment_set_static_coordinates_list(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Segment_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Segment
    __del__ = lambda self: None
Segment_swigregister = _RMF.Segment_swigregister
Segment_swigregister(Segment)

def Segment_get_decorator_type_name():
    """Segment_get_decorator_type_name() -> std::string"""
    return _RMF.Segment_get_decorator_type_name()

class SegmentFactory(Factory):
    """Proxy of C++ RMF::decorator::SegmentFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::SegmentFactory self, FileConstHandle fh) -> SegmentFactory
        __init__(RMF::decorator::SegmentFactory self, FileHandle fh) -> SegmentFactory
        """
        this = _RMF.new_SegmentFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(SegmentFactory self, NodeConstHandle nh) -> SegmentConst
        get(SegmentFactory self, NodeHandle nh) -> Segment
        """
        return _RMF.SegmentFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(SegmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SegmentFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(SegmentFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SegmentFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(SegmentFactory self) -> std::string"""
        return _RMF.SegmentFactory___str__(self)


    def __repr__(self):
        """__repr__(SegmentFactory self) -> std::string"""
        return _RMF.SegmentFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_SegmentFactory
    __del__ = lambda self: None
SegmentFactory_swigregister = _RMF.SegmentFactory_swigregister
SegmentFactory_swigregister(SegmentFactory)

class SegmentConstFactory(SegmentFactory):
    """Proxy of C++ RMF::decorator::SegmentConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [SegmentFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [SegmentFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::SegmentConstFactory self, FileConstHandle fh) -> SegmentConstFactory
        __init__(RMF::decorator::SegmentConstFactory self, FileHandle fh) -> SegmentConstFactory
        """
        this = _RMF.new_SegmentConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_SegmentConstFactory
    __del__ = lambda self: None
SegmentConstFactory_swigregister = _RMF.SegmentConstFactory_swigregister
SegmentConstFactory_swigregister(SegmentConstFactory)

class ExternalConst(Decorator):
    """Proxy of C++ RMF::decorator::ExternalConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_path(self):
        """get_path(ExternalConst self) -> RMF::String"""
        return _RMF.ExternalConst_get_path(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ExternalConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ExternalConst self) -> std::string"""
        return _RMF.ExternalConst___str__(self)


    def __repr__(self):
        """__repr__(ExternalConst self) -> std::string"""
        return _RMF.ExternalConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ExternalConst
    __del__ = lambda self: None
ExternalConst_swigregister = _RMF.ExternalConst_swigregister
ExternalConst_swigregister(ExternalConst)

def ExternalConst_get_decorator_type_name():
    """ExternalConst_get_decorator_type_name() -> std::string"""
    return _RMF.ExternalConst_get_decorator_type_name()

class External(ExternalConst):
    """Proxy of C++ RMF::decorator::External class."""

    __swig_setmethods__ = {}
    for _s in [ExternalConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, External, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, External, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_path(self, path):
        """set_path(External self, RMF::String path)"""
        return _RMF.External_set_path(self, path)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.External_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_External
    __del__ = lambda self: None
External_swigregister = _RMF.External_swigregister
External_swigregister(External)

def External_get_decorator_type_name():
    """External_get_decorator_type_name() -> std::string"""
    return _RMF.External_get_decorator_type_name()

class ExternalFactory(Factory):
    """Proxy of C++ RMF::decorator::ExternalFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ExternalFactory self, FileConstHandle fh) -> ExternalFactory
        __init__(RMF::decorator::ExternalFactory self, FileHandle fh) -> ExternalFactory
        """
        this = _RMF.new_ExternalFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ExternalFactory self, NodeConstHandle nh) -> ExternalConst
        get(ExternalFactory self, NodeHandle nh) -> External
        """
        return _RMF.ExternalFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ExternalFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ExternalFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ExternalFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ExternalFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ExternalFactory self) -> std::string"""
        return _RMF.ExternalFactory___str__(self)


    def __repr__(self):
        """__repr__(ExternalFactory self) -> std::string"""
        return _RMF.ExternalFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ExternalFactory
    __del__ = lambda self: None
ExternalFactory_swigregister = _RMF.ExternalFactory_swigregister
ExternalFactory_swigregister(ExternalFactory)

class ExternalConstFactory(ExternalFactory):
    """Proxy of C++ RMF::decorator::ExternalConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ExternalFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ExternalConstFactory self, FileConstHandle fh) -> ExternalConstFactory
        __init__(RMF::decorator::ExternalConstFactory self, FileHandle fh) -> ExternalConstFactory
        """
        this = _RMF.new_ExternalConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ExternalConstFactory
    __del__ = lambda self: None
ExternalConstFactory_swigregister = _RMF.ExternalConstFactory_swigregister
ExternalConstFactory_swigregister(ExternalConstFactory)

class ScoreConst(Decorator):
    """Proxy of C++ RMF::decorator::ScoreConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScoreConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScoreConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_score(self):
        """get_score(ScoreConst self) -> RMF::Float"""
        return _RMF.ScoreConst_get_score(self)


    def get_frame_score(self):
        """get_frame_score(ScoreConst self) -> RMF::Float"""
        return _RMF.ScoreConst_get_frame_score(self)


    def get_static_score(self):
        """get_static_score(ScoreConst self) -> RMF::Float"""
        return _RMF.ScoreConst_get_static_score(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ScoreConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ScoreConst self) -> std::string"""
        return _RMF.ScoreConst___str__(self)


    def __repr__(self):
        """__repr__(ScoreConst self) -> std::string"""
        return _RMF.ScoreConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ScoreConst
    __del__ = lambda self: None
ScoreConst_swigregister = _RMF.ScoreConst_swigregister
ScoreConst_swigregister(ScoreConst)

def ScoreConst_get_decorator_type_name():
    """ScoreConst_get_decorator_type_name() -> std::string"""
    return _RMF.ScoreConst_get_decorator_type_name()

class Score(ScoreConst):
    """Proxy of C++ RMF::decorator::Score class."""

    __swig_setmethods__ = {}
    for _s in [ScoreConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Score, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Score, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_score(self, v):
        """set_score(Score self, RMF::Float v)"""
        return _RMF.Score_set_score(self, v)


    def set_frame_score(self, v):
        """set_frame_score(Score self, RMF::Float v)"""
        return _RMF.Score_set_frame_score(self, v)


    def set_static_score(self, v):
        """set_static_score(Score self, RMF::Float v)"""
        return _RMF.Score_set_static_score(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Score_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Score
    __del__ = lambda self: None
Score_swigregister = _RMF.Score_swigregister
Score_swigregister(Score)

def Score_get_decorator_type_name():
    """Score_get_decorator_type_name() -> std::string"""
    return _RMF.Score_get_decorator_type_name()

class ScoreFactory(Factory):
    """Proxy of C++ RMF::decorator::ScoreFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScoreFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScoreFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ScoreFactory self, FileConstHandle fh) -> ScoreFactory
        __init__(RMF::decorator::ScoreFactory self, FileHandle fh) -> ScoreFactory
        """
        this = _RMF.new_ScoreFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ScoreFactory self, NodeConstHandle nh) -> ScoreConst
        get(ScoreFactory self, NodeHandle nh) -> Score
        """
        return _RMF.ScoreFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ScoreFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScoreFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ScoreFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScoreFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ScoreFactory self) -> std::string"""
        return _RMF.ScoreFactory___str__(self)


    def __repr__(self):
        """__repr__(ScoreFactory self) -> std::string"""
        return _RMF.ScoreFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ScoreFactory
    __del__ = lambda self: None
ScoreFactory_swigregister = _RMF.ScoreFactory_swigregister
ScoreFactory_swigregister(ScoreFactory)

class ScoreConstFactory(ScoreFactory):
    """Proxy of C++ RMF::decorator::ScoreConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ScoreFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScoreConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ScoreFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScoreConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ScoreConstFactory self, FileConstHandle fh) -> ScoreConstFactory
        __init__(RMF::decorator::ScoreConstFactory self, FileHandle fh) -> ScoreConstFactory
        """
        this = _RMF.new_ScoreConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ScoreConstFactory
    __del__ = lambda self: None
ScoreConstFactory_swigregister = _RMF.ScoreConstFactory_swigregister
ScoreConstFactory_swigregister(ScoreConstFactory)

class AliasConst(Decorator):
    """Proxy of C++ RMF::decorator::AliasConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AliasConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AliasConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_aliased(self):
        """get_aliased(AliasConst self) -> NodeConstHandle"""
        return _RMF.AliasConst_get_aliased(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.AliasConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(AliasConst self) -> std::string"""
        return _RMF.AliasConst___str__(self)


    def __repr__(self):
        """__repr__(AliasConst self) -> std::string"""
        return _RMF.AliasConst___repr__(self)

    __swig_destroy__ = _RMF.delete_AliasConst
    __del__ = lambda self: None
AliasConst_swigregister = _RMF.AliasConst_swigregister
AliasConst_swigregister(AliasConst)

def AliasConst_get_decorator_type_name():
    """AliasConst_get_decorator_type_name() -> std::string"""
    return _RMF.AliasConst_get_decorator_type_name()

class Alias(AliasConst):
    """Proxy of C++ RMF::decorator::Alias class."""

    __swig_setmethods__ = {}
    for _s in [AliasConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Alias, name, value)
    __swig_getmethods__ = {}
    for _s in [AliasConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Alias, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_aliased(self, v):
        """set_aliased(Alias self, NodeConstHandle v)"""
        return _RMF.Alias_set_aliased(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Alias_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Alias
    __del__ = lambda self: None
Alias_swigregister = _RMF.Alias_swigregister
Alias_swigregister(Alias)

def Alias_get_decorator_type_name():
    """Alias_get_decorator_type_name() -> std::string"""
    return _RMF.Alias_get_decorator_type_name()

class AliasFactory(Factory):
    """Proxy of C++ RMF::decorator::AliasFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AliasFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AliasFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::AliasFactory self, FileConstHandle fh) -> AliasFactory
        __init__(RMF::decorator::AliasFactory self, FileHandle fh) -> AliasFactory
        """
        this = _RMF.new_AliasFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(AliasFactory self, NodeConstHandle nh) -> AliasConst
        get(AliasFactory self, NodeHandle nh) -> Alias
        """
        return _RMF.AliasFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(AliasFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AliasFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(AliasFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AliasFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(AliasFactory self) -> std::string"""
        return _RMF.AliasFactory___str__(self)


    def __repr__(self):
        """__repr__(AliasFactory self) -> std::string"""
        return _RMF.AliasFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_AliasFactory
    __del__ = lambda self: None
AliasFactory_swigregister = _RMF.AliasFactory_swigregister
AliasFactory_swigregister(AliasFactory)

class AliasConstFactory(AliasFactory):
    """Proxy of C++ RMF::decorator::AliasConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [AliasFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AliasConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [AliasFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AliasConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::AliasConstFactory self, FileConstHandle fh) -> AliasConstFactory
        __init__(RMF::decorator::AliasConstFactory self, FileHandle fh) -> AliasConstFactory
        """
        this = _RMF.new_AliasConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_AliasConstFactory
    __del__ = lambda self: None
AliasConstFactory_swigregister = _RMF.AliasConstFactory_swigregister
AliasConstFactory_swigregister(AliasConstFactory)

class JournalArticleConst(Decorator):
    """Proxy of C++ RMF::decorator::JournalArticleConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JournalArticleConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JournalArticleConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_title(self):
        """get_title(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_title(self)


    def get_frame_title(self):
        """get_frame_title(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_frame_title(self)


    def get_static_title(self):
        """get_static_title(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_static_title(self)


    def get_journal(self):
        """get_journal(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_journal(self)


    def get_frame_journal(self):
        """get_frame_journal(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_frame_journal(self)


    def get_static_journal(self):
        """get_static_journal(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_static_journal(self)


    def get_pubmed_id(self):
        """get_pubmed_id(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_pubmed_id(self)


    def get_frame_pubmed_id(self):
        """get_frame_pubmed_id(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_frame_pubmed_id(self)


    def get_static_pubmed_id(self):
        """get_static_pubmed_id(JournalArticleConst self) -> RMF::String"""
        return _RMF.JournalArticleConst_get_static_pubmed_id(self)


    def get_year(self):
        """get_year(JournalArticleConst self) -> RMF::Int"""
        return _RMF.JournalArticleConst_get_year(self)


    def get_frame_year(self):
        """get_frame_year(JournalArticleConst self) -> RMF::Int"""
        return _RMF.JournalArticleConst_get_frame_year(self)


    def get_static_year(self):
        """get_static_year(JournalArticleConst self) -> RMF::Int"""
        return _RMF.JournalArticleConst_get_static_year(self)


    def get_authors(self):
        """get_authors(JournalArticleConst self) -> Strings"""
        return _RMF.JournalArticleConst_get_authors(self)


    def get_frame_authors(self):
        """get_frame_authors(JournalArticleConst self) -> Strings"""
        return _RMF.JournalArticleConst_get_frame_authors(self)


    def get_static_authors(self):
        """get_static_authors(JournalArticleConst self) -> Strings"""
        return _RMF.JournalArticleConst_get_static_authors(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.JournalArticleConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(JournalArticleConst self) -> std::string"""
        return _RMF.JournalArticleConst___str__(self)


    def __repr__(self):
        """__repr__(JournalArticleConst self) -> std::string"""
        return _RMF.JournalArticleConst___repr__(self)

    __swig_destroy__ = _RMF.delete_JournalArticleConst
    __del__ = lambda self: None
JournalArticleConst_swigregister = _RMF.JournalArticleConst_swigregister
JournalArticleConst_swigregister(JournalArticleConst)

def JournalArticleConst_get_decorator_type_name():
    """JournalArticleConst_get_decorator_type_name() -> std::string"""
    return _RMF.JournalArticleConst_get_decorator_type_name()

class JournalArticle(JournalArticleConst):
    """Proxy of C++ RMF::decorator::JournalArticle class."""

    __swig_setmethods__ = {}
    for _s in [JournalArticleConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JournalArticle, name, value)
    __swig_getmethods__ = {}
    for _s in [JournalArticleConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JournalArticle, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_title(self, v):
        """set_title(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_title(self, v)


    def set_frame_title(self, v):
        """set_frame_title(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_frame_title(self, v)


    def set_static_title(self, v):
        """set_static_title(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_static_title(self, v)


    def set_journal(self, v):
        """set_journal(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_journal(self, v)


    def set_frame_journal(self, v):
        """set_frame_journal(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_frame_journal(self, v)


    def set_static_journal(self, v):
        """set_static_journal(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_static_journal(self, v)


    def set_pubmed_id(self, v):
        """set_pubmed_id(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_pubmed_id(self, v)


    def set_frame_pubmed_id(self, v):
        """set_frame_pubmed_id(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_frame_pubmed_id(self, v)


    def set_static_pubmed_id(self, v):
        """set_static_pubmed_id(JournalArticle self, RMF::String v)"""
        return _RMF.JournalArticle_set_static_pubmed_id(self, v)


    def set_year(self, v):
        """set_year(JournalArticle self, RMF::Int v)"""
        return _RMF.JournalArticle_set_year(self, v)


    def set_frame_year(self, v):
        """set_frame_year(JournalArticle self, RMF::Int v)"""
        return _RMF.JournalArticle_set_frame_year(self, v)


    def set_static_year(self, v):
        """set_static_year(JournalArticle self, RMF::Int v)"""
        return _RMF.JournalArticle_set_static_year(self, v)


    def set_authors(self, v):
        """set_authors(JournalArticle self, Strings v)"""
        return _RMF.JournalArticle_set_authors(self, v)


    def set_frame_authors(self, v):
        """set_frame_authors(JournalArticle self, Strings v)"""
        return _RMF.JournalArticle_set_frame_authors(self, v)


    def set_static_authors(self, v):
        """set_static_authors(JournalArticle self, Strings v)"""
        return _RMF.JournalArticle_set_static_authors(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.JournalArticle_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_JournalArticle
    __del__ = lambda self: None
JournalArticle_swigregister = _RMF.JournalArticle_swigregister
JournalArticle_swigregister(JournalArticle)

def JournalArticle_get_decorator_type_name():
    """JournalArticle_get_decorator_type_name() -> std::string"""
    return _RMF.JournalArticle_get_decorator_type_name()

class JournalArticleFactory(Factory):
    """Proxy of C++ RMF::decorator::JournalArticleFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JournalArticleFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JournalArticleFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::JournalArticleFactory self, FileConstHandle fh) -> JournalArticleFactory
        __init__(RMF::decorator::JournalArticleFactory self, FileHandle fh) -> JournalArticleFactory
        """
        this = _RMF.new_JournalArticleFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(JournalArticleFactory self, NodeConstHandle nh) -> JournalArticleConst
        get(JournalArticleFactory self, NodeHandle nh) -> JournalArticle
        """
        return _RMF.JournalArticleFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(JournalArticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.JournalArticleFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(JournalArticleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.JournalArticleFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(JournalArticleFactory self) -> std::string"""
        return _RMF.JournalArticleFactory___str__(self)


    def __repr__(self):
        """__repr__(JournalArticleFactory self) -> std::string"""
        return _RMF.JournalArticleFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_JournalArticleFactory
    __del__ = lambda self: None
JournalArticleFactory_swigregister = _RMF.JournalArticleFactory_swigregister
JournalArticleFactory_swigregister(JournalArticleFactory)

class JournalArticleConstFactory(JournalArticleFactory):
    """Proxy of C++ RMF::decorator::JournalArticleConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [JournalArticleFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JournalArticleConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [JournalArticleFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JournalArticleConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::JournalArticleConstFactory self, FileConstHandle fh) -> JournalArticleConstFactory
        __init__(RMF::decorator::JournalArticleConstFactory self, FileHandle fh) -> JournalArticleConstFactory
        """
        this = _RMF.new_JournalArticleConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_JournalArticleConstFactory
    __del__ = lambda self: None
JournalArticleConstFactory_swigregister = _RMF.JournalArticleConstFactory_swigregister
JournalArticleConstFactory_swigregister(JournalArticleConstFactory)

class AlternativesConst(Decorator):
    """Proxy of C++ RMF::decorator::AlternativesConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlternativesConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AlternativesConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_alternative(self, type, resolution):
        """get_alternative(AlternativesConst self, RepresentationType type, double resolution) -> NodeConstHandle"""
        return _RMF.AlternativesConst_get_alternative(self, type, resolution)


    def get_representation_type(self, *args):
        """
        get_representation_type(AlternativesConst self, NodeID id) -> RepresentationType
        get_representation_type(AlternativesConst self, NodeConstHandle id) -> RepresentationType
        """
        return _RMF.AlternativesConst_get_representation_type(self, *args)


    def get_alternatives(self, type):
        """get_alternatives(AlternativesConst self, RepresentationType type) -> NodeConstHandles"""
        return _RMF.AlternativesConst_get_alternatives(self, type)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.AlternativesConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(AlternativesConst self) -> std::string"""
        return _RMF.AlternativesConst___str__(self)


    def __repr__(self):
        """__repr__(AlternativesConst self) -> std::string"""
        return _RMF.AlternativesConst___repr__(self)

    __swig_destroy__ = _RMF.delete_AlternativesConst
    __del__ = lambda self: None
AlternativesConst_swigregister = _RMF.AlternativesConst_swigregister
AlternativesConst_swigregister(AlternativesConst)

def AlternativesConst_get_decorator_type_name():
    """AlternativesConst_get_decorator_type_name() -> std::string"""
    return _RMF.AlternativesConst_get_decorator_type_name()

class Alternatives(AlternativesConst):
    """Proxy of C++ RMF::decorator::Alternatives class."""

    __swig_setmethods__ = {}
    for _s in [AlternativesConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Alternatives, name, value)
    __swig_getmethods__ = {}
    for _s in [AlternativesConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Alternatives, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def add_alternative(self, root, type):
        """add_alternative(Alternatives self, NodeHandle root, RepresentationType type)"""
        return _RMF.Alternatives_add_alternative(self, root, type)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Alternatives_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Alternatives
    __del__ = lambda self: None
Alternatives_swigregister = _RMF.Alternatives_swigregister
Alternatives_swigregister(Alternatives)

def Alternatives_get_decorator_type_name():
    """Alternatives_get_decorator_type_name() -> std::string"""
    return _RMF.Alternatives_get_decorator_type_name()

class AlternativesFactory(Factory):
    """Proxy of C++ RMF::decorator::AlternativesFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlternativesFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AlternativesFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::AlternativesFactory self, FileConstHandle fh) -> AlternativesFactory
        __init__(RMF::decorator::AlternativesFactory self, FileHandle fh) -> AlternativesFactory
        """
        this = _RMF.new_AlternativesFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(AlternativesFactory self, NodeHandle nh) -> Alternatives
        get(AlternativesFactory self, NodeConstHandle nh) -> AlternativesConst
        """
        return _RMF.AlternativesFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(AlternativesFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AlternativesFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(AlternativesFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.AlternativesFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(AlternativesFactory self) -> std::string"""
        return _RMF.AlternativesFactory___str__(self)


    def __repr__(self):
        """__repr__(AlternativesFactory self) -> std::string"""
        return _RMF.AlternativesFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_AlternativesFactory
    __del__ = lambda self: None
AlternativesFactory_swigregister = _RMF.AlternativesFactory_swigregister
AlternativesFactory_swigregister(AlternativesFactory)

class AlternativesConstFactory(AlternativesFactory):
    """Proxy of C++ RMF::decorator::AlternativesConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [AlternativesFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlternativesConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [AlternativesFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AlternativesConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::AlternativesConstFactory self, FileConstHandle fh) -> AlternativesConstFactory
        __init__(RMF::decorator::AlternativesConstFactory self, FileHandle fh) -> AlternativesConstFactory
        """
        this = _RMF.new_AlternativesConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_AlternativesConstFactory
    __del__ = lambda self: None
AlternativesConstFactory_swigregister = _RMF.AlternativesConstFactory_swigregister
AlternativesConstFactory_swigregister(AlternativesConstFactory)


def get_resolution(root):
    """get_resolution(NodeConstHandle root) -> double"""
    return _RMF.get_resolution(root)

def get_resolutions(*args):
    """
    get_resolutions(NodeConstHandle root, RepresentationType type, double accuracy=0) -> Floats
    get_resolutions(NodeConstHandle root, RepresentationType type) -> Floats
    get_resolutions(NodeConstHandle root) -> Floats
    """
    return _RMF.get_resolutions(*args)
class RepresentationConst(Decorator):
    """Proxy of C++ RMF::decorator::RepresentationConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepresentationConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepresentationConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_representation(self):
        """get_representation(RepresentationConst self) -> NodeConstHandles"""
        return _RMF.RepresentationConst_get_representation(self)


    def get_frame_representation(self):
        """get_frame_representation(RepresentationConst self) -> NodeConstHandles"""
        return _RMF.RepresentationConst_get_frame_representation(self)


    def get_static_representation(self):
        """get_static_representation(RepresentationConst self) -> NodeConstHandles"""
        return _RMF.RepresentationConst_get_static_representation(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.RepresentationConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_RepresentationConst
    __del__ = lambda self: None
RepresentationConst_swigregister = _RMF.RepresentationConst_swigregister
RepresentationConst_swigregister(RepresentationConst)

def RepresentationConst_get_decorator_type_name():
    """RepresentationConst_get_decorator_type_name() -> std::string"""
    return _RMF.RepresentationConst_get_decorator_type_name()

class Representation(RepresentationConst):
    """Proxy of C++ RMF::decorator::Representation class."""

    __swig_setmethods__ = {}
    for _s in [RepresentationConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Representation, name, value)
    __swig_getmethods__ = {}
    for _s in [RepresentationConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Representation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_representation(self, v):
        """set_representation(Representation self, NodeIDs v)"""
        return _RMF.Representation_set_representation(self, v)


    def set_frame_representation(self, v):
        """set_frame_representation(Representation self, NodeIDs v)"""
        return _RMF.Representation_set_frame_representation(self, v)


    def set_static_representation(self, v):
        """set_static_representation(Representation self, NodeIDs v)"""
        return _RMF.Representation_set_static_representation(self, v)


    def get_representation(self):
        """get_representation(Representation self) -> NodeHandles"""
        return _RMF.Representation_get_representation(self)


    def get_frame_representation(self):
        """get_frame_representation(Representation self) -> NodeHandles"""
        return _RMF.Representation_get_frame_representation(self)


    def get_static_representation(self):
        """get_static_representation(Representation self) -> NodeHandles"""
        return _RMF.Representation_get_static_representation(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Representation_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Representation
    __del__ = lambda self: None
Representation_swigregister = _RMF.Representation_swigregister
Representation_swigregister(Representation)

def Representation_get_decorator_type_name():
    """Representation_get_decorator_type_name() -> std::string"""
    return _RMF.Representation_get_decorator_type_name()

class RepresentationFactory(Factory):
    """Proxy of C++ RMF::decorator::RepresentationFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepresentationFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepresentationFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::RepresentationFactory self, FileConstHandle fh) -> RepresentationFactory
        __init__(RMF::decorator::RepresentationFactory self, FileHandle fh) -> RepresentationFactory
        """
        this = _RMF.new_RepresentationFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(RepresentationFactory self, NodeConstHandle nh) -> RepresentationConst
        get(RepresentationFactory self, NodeHandle nh) -> Representation
        """
        return _RMF.RepresentationFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(RepresentationFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.RepresentationFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(RepresentationFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.RepresentationFactory_get_is_static(self, nh)

    __swig_destroy__ = _RMF.delete_RepresentationFactory
    __del__ = lambda self: None
RepresentationFactory_swigregister = _RMF.RepresentationFactory_swigregister
RepresentationFactory_swigregister(RepresentationFactory)

class RepresentationConstFactory(RepresentationFactory):
    """Proxy of C++ RMF::decorator::RepresentationConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [RepresentationFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepresentationConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [RepresentationFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepresentationConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::RepresentationConstFactory self, FileConstHandle fh) -> RepresentationConstFactory
        __init__(RMF::decorator::RepresentationConstFactory self, FileHandle fh) -> RepresentationConstFactory
        """
        this = _RMF.new_RepresentationConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_RepresentationConstFactory
    __del__ = lambda self: None
RepresentationConstFactory_swigregister = _RMF.RepresentationConstFactory_swigregister
RepresentationConstFactory_swigregister(RepresentationConstFactory)

class BondConst(Decorator):
    """Proxy of C++ RMF::decorator::BondConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BondConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BondConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_bonded_0(self):
        """get_bonded_0(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_bonded_0(self)


    def get_frame_bonded_0(self):
        """get_frame_bonded_0(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_frame_bonded_0(self)


    def get_static_bonded_0(self):
        """get_static_bonded_0(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_static_bonded_0(self)


    def get_bonded_1(self):
        """get_bonded_1(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_bonded_1(self)


    def get_frame_bonded_1(self):
        """get_frame_bonded_1(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_frame_bonded_1(self)


    def get_static_bonded_1(self):
        """get_static_bonded_1(BondConst self) -> NodeConstHandle"""
        return _RMF.BondConst_get_static_bonded_1(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.BondConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(BondConst self) -> std::string"""
        return _RMF.BondConst___str__(self)


    def __repr__(self):
        """__repr__(BondConst self) -> std::string"""
        return _RMF.BondConst___repr__(self)

    __swig_destroy__ = _RMF.delete_BondConst
    __del__ = lambda self: None
BondConst_swigregister = _RMF.BondConst_swigregister
BondConst_swigregister(BondConst)

def BondConst_get_decorator_type_name():
    """BondConst_get_decorator_type_name() -> std::string"""
    return _RMF.BondConst_get_decorator_type_name()

class Bond(BondConst):
    """Proxy of C++ RMF::decorator::Bond class."""

    __swig_setmethods__ = {}
    for _s in [BondConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bond, name, value)
    __swig_getmethods__ = {}
    for _s in [BondConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bond, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_bonded_0(self):
        """get_bonded_0(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_bonded_0(self)


    def get_frame_bonded_0(self):
        """get_frame_bonded_0(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_frame_bonded_0(self)


    def get_static_bonded_0(self):
        """get_static_bonded_0(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_static_bonded_0(self)


    def get_bonded_1(self):
        """get_bonded_1(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_bonded_1(self)


    def get_frame_bonded_1(self):
        """get_frame_bonded_1(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_frame_bonded_1(self)


    def get_static_bonded_1(self):
        """get_static_bonded_1(Bond self) -> NodeHandle"""
        return _RMF.Bond_get_static_bonded_1(self)


    def set_bonded_0(self, *args):
        """
        set_bonded_0(Bond self, RMF::Int v)
        set_bonded_0(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_bonded_0(self, *args)


    def set_frame_bonded_0(self, *args):
        """
        set_frame_bonded_0(Bond self, RMF::Int v)
        set_frame_bonded_0(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_frame_bonded_0(self, *args)


    def set_static_bonded_0(self, *args):
        """
        set_static_bonded_0(Bond self, RMF::Int v)
        set_static_bonded_0(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_static_bonded_0(self, *args)


    def set_bonded_1(self, *args):
        """
        set_bonded_1(Bond self, RMF::Int v)
        set_bonded_1(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_bonded_1(self, *args)


    def set_frame_bonded_1(self, *args):
        """
        set_frame_bonded_1(Bond self, RMF::Int v)
        set_frame_bonded_1(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_frame_bonded_1(self, *args)


    def set_static_bonded_1(self, *args):
        """
        set_static_bonded_1(Bond self, RMF::Int v)
        set_static_bonded_1(Bond self, NodeConstHandle v)
        """
        return _RMF.Bond_set_static_bonded_1(self, *args)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Bond_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Bond
    __del__ = lambda self: None
Bond_swigregister = _RMF.Bond_swigregister
Bond_swigregister(Bond)

def Bond_get_decorator_type_name():
    """Bond_get_decorator_type_name() -> std::string"""
    return _RMF.Bond_get_decorator_type_name()

class BondFactory(Factory):
    """Proxy of C++ RMF::decorator::BondFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BondFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BondFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::BondFactory self, FileConstHandle fh) -> BondFactory
        __init__(RMF::decorator::BondFactory self, FileHandle fh) -> BondFactory
        """
        this = _RMF.new_BondFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(BondFactory self, NodeConstHandle nh) -> BondConst
        get(BondFactory self, NodeHandle nh) -> Bond
        """
        return _RMF.BondFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(BondFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BondFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(BondFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.BondFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(BondFactory self) -> std::string"""
        return _RMF.BondFactory___str__(self)


    def __repr__(self):
        """__repr__(BondFactory self) -> std::string"""
        return _RMF.BondFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_BondFactory
    __del__ = lambda self: None
BondFactory_swigregister = _RMF.BondFactory_swigregister
BondFactory_swigregister(BondFactory)

class BondConstFactory(BondFactory):
    """Proxy of C++ RMF::decorator::BondConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [BondFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BondConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [BondFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BondConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::BondConstFactory self, FileConstHandle fh) -> BondConstFactory
        __init__(RMF::decorator::BondConstFactory self, FileHandle fh) -> BondConstFactory
        """
        this = _RMF.new_BondConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_BondConstFactory
    __del__ = lambda self: None
BondConstFactory_swigregister = _RMF.BondConstFactory_swigregister
BondConstFactory_swigregister(BondConstFactory)

class Molecule(Label):
    """Proxy of C++ RMF::decorator::Molecule class."""

    __swig_setmethods__ = {}
    for _s in [Label]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Molecule, name, value)
    __swig_getmethods__ = {}
    for _s in [Label]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Molecule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::Molecule self, FileConstHandle fh) -> Molecule
        __init__(RMF::decorator::Molecule self, FileHandle fh) -> Molecule
        """
        this = _RMF.new_Molecule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_Molecule
    __del__ = lambda self: None
Molecule_swigregister = _RMF.Molecule_swigregister
Molecule_swigregister(Molecule)

class Assembly(Label):
    """Proxy of C++ RMF::decorator::Assembly class."""

    __swig_setmethods__ = {}
    for _s in [Label]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Assembly, name, value)
    __swig_getmethods__ = {}
    for _s in [Label]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Assembly, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::Assembly self, FileConstHandle fh) -> Assembly
        __init__(RMF::decorator::Assembly self, FileHandle fh) -> Assembly
        """
        this = _RMF.new_Assembly(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_Assembly
    __del__ = lambda self: None
Assembly_swigregister = _RMF.Assembly_swigregister
Assembly_swigregister(Assembly)

class ReferenceConst(Decorator):
    """Proxy of C++ RMF::decorator::ReferenceConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_reference(self):
        """get_reference(ReferenceConst self) -> NodeConstHandle"""
        return _RMF.ReferenceConst_get_reference(self)


    def get_frame_reference(self):
        """get_frame_reference(ReferenceConst self) -> NodeConstHandle"""
        return _RMF.ReferenceConst_get_frame_reference(self)


    def get_static_reference(self):
        """get_static_reference(ReferenceConst self) -> NodeConstHandle"""
        return _RMF.ReferenceConst_get_static_reference(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ReferenceConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ReferenceConst self) -> std::string"""
        return _RMF.ReferenceConst___str__(self)


    def __repr__(self):
        """__repr__(ReferenceConst self) -> std::string"""
        return _RMF.ReferenceConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ReferenceConst
    __del__ = lambda self: None
ReferenceConst_swigregister = _RMF.ReferenceConst_swigregister
ReferenceConst_swigregister(ReferenceConst)

def ReferenceConst_get_decorator_type_name():
    """ReferenceConst_get_decorator_type_name() -> std::string"""
    return _RMF.ReferenceConst_get_decorator_type_name()

class Reference(ReferenceConst):
    """Proxy of C++ RMF::decorator::Reference class."""

    __swig_setmethods__ = {}
    for _s in [ReferenceConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reference, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reference, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_reference(self):
        """get_reference(Reference self) -> NodeHandle"""
        return _RMF.Reference_get_reference(self)


    def get_frame_reference(self):
        """get_frame_reference(Reference self) -> NodeHandle"""
        return _RMF.Reference_get_frame_reference(self)


    def get_static_reference(self):
        """get_static_reference(Reference self) -> NodeHandle"""
        return _RMF.Reference_get_static_reference(self)


    def set_reference(self, v):
        """set_reference(Reference self, NodeConstHandle v)"""
        return _RMF.Reference_set_reference(self, v)


    def set_frame_reference(self, v):
        """set_frame_reference(Reference self, NodeConstHandle v)"""
        return _RMF.Reference_set_frame_reference(self, v)


    def set_static_reference(self, v):
        """set_static_reference(Reference self, NodeConstHandle v)"""
        return _RMF.Reference_set_static_reference(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Reference_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Reference
    __del__ = lambda self: None
Reference_swigregister = _RMF.Reference_swigregister
Reference_swigregister(Reference)

def Reference_get_decorator_type_name():
    """Reference_get_decorator_type_name() -> std::string"""
    return _RMF.Reference_get_decorator_type_name()

class ReferenceFactory(Factory):
    """Proxy of C++ RMF::decorator::ReferenceFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ReferenceFactory self, FileConstHandle fh) -> ReferenceFactory
        __init__(RMF::decorator::ReferenceFactory self, FileHandle fh) -> ReferenceFactory
        """
        this = _RMF.new_ReferenceFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ReferenceFactory self, NodeConstHandle nh) -> ReferenceConst
        get(ReferenceFactory self, NodeHandle nh) -> Reference
        """
        return _RMF.ReferenceFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ReferenceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ReferenceFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ReferenceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ReferenceFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ReferenceFactory self) -> std::string"""
        return _RMF.ReferenceFactory___str__(self)


    def __repr__(self):
        """__repr__(ReferenceFactory self) -> std::string"""
        return _RMF.ReferenceFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ReferenceFactory
    __del__ = lambda self: None
ReferenceFactory_swigregister = _RMF.ReferenceFactory_swigregister
ReferenceFactory_swigregister(ReferenceFactory)

class StructureProvenanceConst(Decorator):
    """Proxy of C++ RMF::decorator::StructureProvenanceConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructureProvenanceConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructureProvenanceConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_filename(self):
        """get_filename(StructureProvenanceConst self) -> RMF::String"""
        return _RMF.StructureProvenanceConst_get_filename(self)


    def get_chain(self):
        """get_chain(StructureProvenanceConst self) -> RMF::String"""
        return _RMF.StructureProvenanceConst_get_chain(self)


    def get_frame_chain(self):
        """get_frame_chain(StructureProvenanceConst self) -> RMF::String"""
        return _RMF.StructureProvenanceConst_get_frame_chain(self)


    def get_static_chain(self):
        """get_static_chain(StructureProvenanceConst self) -> RMF::String"""
        return _RMF.StructureProvenanceConst_get_static_chain(self)


    def get_residue_offset(self):
        """get_residue_offset(StructureProvenanceConst self) -> RMF::Int"""
        return _RMF.StructureProvenanceConst_get_residue_offset(self)


    def get_frame_residue_offset(self):
        """get_frame_residue_offset(StructureProvenanceConst self) -> RMF::Int"""
        return _RMF.StructureProvenanceConst_get_frame_residue_offset(self)


    def get_static_residue_offset(self):
        """get_static_residue_offset(StructureProvenanceConst self) -> RMF::Int"""
        return _RMF.StructureProvenanceConst_get_static_residue_offset(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.StructureProvenanceConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(StructureProvenanceConst self) -> std::string"""
        return _RMF.StructureProvenanceConst___str__(self)


    def __repr__(self):
        """__repr__(StructureProvenanceConst self) -> std::string"""
        return _RMF.StructureProvenanceConst___repr__(self)

    __swig_destroy__ = _RMF.delete_StructureProvenanceConst
    __del__ = lambda self: None
StructureProvenanceConst_swigregister = _RMF.StructureProvenanceConst_swigregister
StructureProvenanceConst_swigregister(StructureProvenanceConst)

def StructureProvenanceConst_get_decorator_type_name():
    """StructureProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.StructureProvenanceConst_get_decorator_type_name()

class StructureProvenance(StructureProvenanceConst):
    """Proxy of C++ RMF::decorator::StructureProvenance class."""

    __swig_setmethods__ = {}
    for _s in [StructureProvenanceConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructureProvenance, name, value)
    __swig_getmethods__ = {}
    for _s in [StructureProvenanceConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructureProvenance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_filename(self, path):
        """set_filename(StructureProvenance self, RMF::String path)"""
        return _RMF.StructureProvenance_set_filename(self, path)


    def set_chain(self, v):
        """set_chain(StructureProvenance self, RMF::String v)"""
        return _RMF.StructureProvenance_set_chain(self, v)


    def set_frame_chain(self, v):
        """set_frame_chain(StructureProvenance self, RMF::String v)"""
        return _RMF.StructureProvenance_set_frame_chain(self, v)


    def set_static_chain(self, v):
        """set_static_chain(StructureProvenance self, RMF::String v)"""
        return _RMF.StructureProvenance_set_static_chain(self, v)


    def set_residue_offset(self, v):
        """set_residue_offset(StructureProvenance self, RMF::Int v)"""
        return _RMF.StructureProvenance_set_residue_offset(self, v)


    def set_frame_residue_offset(self, v):
        """set_frame_residue_offset(StructureProvenance self, RMF::Int v)"""
        return _RMF.StructureProvenance_set_frame_residue_offset(self, v)


    def set_static_residue_offset(self, v):
        """set_static_residue_offset(StructureProvenance self, RMF::Int v)"""
        return _RMF.StructureProvenance_set_static_residue_offset(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.StructureProvenance_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_StructureProvenance
    __del__ = lambda self: None
StructureProvenance_swigregister = _RMF.StructureProvenance_swigregister
StructureProvenance_swigregister(StructureProvenance)

def StructureProvenance_get_decorator_type_name():
    """StructureProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.StructureProvenance_get_decorator_type_name()

class StructureProvenanceFactory(Factory):
    """Proxy of C++ RMF::decorator::StructureProvenanceFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructureProvenanceFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructureProvenanceFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::StructureProvenanceFactory self, FileConstHandle fh) -> StructureProvenanceFactory
        __init__(RMF::decorator::StructureProvenanceFactory self, FileHandle fh) -> StructureProvenanceFactory
        """
        this = _RMF.new_StructureProvenanceFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(StructureProvenanceFactory self, NodeConstHandle nh) -> StructureProvenanceConst
        get(StructureProvenanceFactory self, NodeHandle nh) -> StructureProvenance
        """
        return _RMF.StructureProvenanceFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(StructureProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.StructureProvenanceFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(StructureProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.StructureProvenanceFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(StructureProvenanceFactory self) -> std::string"""
        return _RMF.StructureProvenanceFactory___str__(self)


    def __repr__(self):
        """__repr__(StructureProvenanceFactory self) -> std::string"""
        return _RMF.StructureProvenanceFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_StructureProvenanceFactory
    __del__ = lambda self: None
StructureProvenanceFactory_swigregister = _RMF.StructureProvenanceFactory_swigregister
StructureProvenanceFactory_swigregister(StructureProvenanceFactory)

class StructureProvenanceConstFactory(StructureProvenanceFactory):
    """Proxy of C++ RMF::decorator::StructureProvenanceConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [StructureProvenanceFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructureProvenanceConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [StructureProvenanceFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StructureProvenanceConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::StructureProvenanceConstFactory self, FileConstHandle fh) -> StructureProvenanceConstFactory
        __init__(RMF::decorator::StructureProvenanceConstFactory self, FileHandle fh) -> StructureProvenanceConstFactory
        """
        this = _RMF.new_StructureProvenanceConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_StructureProvenanceConstFactory
    __del__ = lambda self: None
StructureProvenanceConstFactory_swigregister = _RMF.StructureProvenanceConstFactory_swigregister
StructureProvenanceConstFactory_swigregister(StructureProvenanceConstFactory)

class SampleProvenanceConst(Decorator):
    """Proxy of C++ RMF::decorator::SampleProvenanceConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleProvenanceConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleProvenanceConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_method(self):
        """get_method(SampleProvenanceConst self) -> RMF::String"""
        return _RMF.SampleProvenanceConst_get_method(self)


    def get_frame_method(self):
        """get_frame_method(SampleProvenanceConst self) -> RMF::String"""
        return _RMF.SampleProvenanceConst_get_frame_method(self)


    def get_static_method(self):
        """get_static_method(SampleProvenanceConst self) -> RMF::String"""
        return _RMF.SampleProvenanceConst_get_static_method(self)


    def get_frames(self):
        """get_frames(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_frames(self)


    def get_frame_frames(self):
        """get_frame_frames(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_frame_frames(self)


    def get_static_frames(self):
        """get_static_frames(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_static_frames(self)


    def get_iterations(self):
        """get_iterations(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_iterations(self)


    def get_frame_iterations(self):
        """get_frame_iterations(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_frame_iterations(self)


    def get_static_iterations(self):
        """get_static_iterations(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_static_iterations(self)


    def get_replicas(self):
        """get_replicas(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_replicas(self)


    def get_frame_replicas(self):
        """get_frame_replicas(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_frame_replicas(self)


    def get_static_replicas(self):
        """get_static_replicas(SampleProvenanceConst self) -> RMF::Int"""
        return _RMF.SampleProvenanceConst_get_static_replicas(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.SampleProvenanceConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(SampleProvenanceConst self) -> std::string"""
        return _RMF.SampleProvenanceConst___str__(self)


    def __repr__(self):
        """__repr__(SampleProvenanceConst self) -> std::string"""
        return _RMF.SampleProvenanceConst___repr__(self)

    __swig_destroy__ = _RMF.delete_SampleProvenanceConst
    __del__ = lambda self: None
SampleProvenanceConst_swigregister = _RMF.SampleProvenanceConst_swigregister
SampleProvenanceConst_swigregister(SampleProvenanceConst)

def SampleProvenanceConst_get_decorator_type_name():
    """SampleProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.SampleProvenanceConst_get_decorator_type_name()

class SampleProvenance(SampleProvenanceConst):
    """Proxy of C++ RMF::decorator::SampleProvenance class."""

    __swig_setmethods__ = {}
    for _s in [SampleProvenanceConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleProvenance, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleProvenanceConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleProvenance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_method(self, v):
        """set_method(SampleProvenance self, RMF::String v)"""
        return _RMF.SampleProvenance_set_method(self, v)


    def set_frame_method(self, v):
        """set_frame_method(SampleProvenance self, RMF::String v)"""
        return _RMF.SampleProvenance_set_frame_method(self, v)


    def set_static_method(self, v):
        """set_static_method(SampleProvenance self, RMF::String v)"""
        return _RMF.SampleProvenance_set_static_method(self, v)


    def set_frames(self, v):
        """set_frames(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_frames(self, v)


    def set_frame_frames(self, v):
        """set_frame_frames(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_frame_frames(self, v)


    def set_static_frames(self, v):
        """set_static_frames(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_static_frames(self, v)


    def set_iterations(self, v):
        """set_iterations(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_iterations(self, v)


    def set_frame_iterations(self, v):
        """set_frame_iterations(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_frame_iterations(self, v)


    def set_static_iterations(self, v):
        """set_static_iterations(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_static_iterations(self, v)


    def set_replicas(self, v):
        """set_replicas(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_replicas(self, v)


    def set_frame_replicas(self, v):
        """set_frame_replicas(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_frame_replicas(self, v)


    def set_static_replicas(self, v):
        """set_static_replicas(SampleProvenance self, RMF::Int v)"""
        return _RMF.SampleProvenance_set_static_replicas(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.SampleProvenance_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_SampleProvenance
    __del__ = lambda self: None
SampleProvenance_swigregister = _RMF.SampleProvenance_swigregister
SampleProvenance_swigregister(SampleProvenance)

def SampleProvenance_get_decorator_type_name():
    """SampleProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.SampleProvenance_get_decorator_type_name()

class SampleProvenanceFactory(Factory):
    """Proxy of C++ RMF::decorator::SampleProvenanceFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleProvenanceFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleProvenanceFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::SampleProvenanceFactory self, FileConstHandle fh) -> SampleProvenanceFactory
        __init__(RMF::decorator::SampleProvenanceFactory self, FileHandle fh) -> SampleProvenanceFactory
        """
        this = _RMF.new_SampleProvenanceFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(SampleProvenanceFactory self, NodeConstHandle nh) -> SampleProvenanceConst
        get(SampleProvenanceFactory self, NodeHandle nh) -> SampleProvenance
        """
        return _RMF.SampleProvenanceFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(SampleProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SampleProvenanceFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(SampleProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SampleProvenanceFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(SampleProvenanceFactory self) -> std::string"""
        return _RMF.SampleProvenanceFactory___str__(self)


    def __repr__(self):
        """__repr__(SampleProvenanceFactory self) -> std::string"""
        return _RMF.SampleProvenanceFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_SampleProvenanceFactory
    __del__ = lambda self: None
SampleProvenanceFactory_swigregister = _RMF.SampleProvenanceFactory_swigregister
SampleProvenanceFactory_swigregister(SampleProvenanceFactory)

class SampleProvenanceConstFactory(SampleProvenanceFactory):
    """Proxy of C++ RMF::decorator::SampleProvenanceConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [SampleProvenanceFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleProvenanceConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleProvenanceFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleProvenanceConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::SampleProvenanceConstFactory self, FileConstHandle fh) -> SampleProvenanceConstFactory
        __init__(RMF::decorator::SampleProvenanceConstFactory self, FileHandle fh) -> SampleProvenanceConstFactory
        """
        this = _RMF.new_SampleProvenanceConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_SampleProvenanceConstFactory
    __del__ = lambda self: None
SampleProvenanceConstFactory_swigregister = _RMF.SampleProvenanceConstFactory_swigregister
SampleProvenanceConstFactory_swigregister(SampleProvenanceConstFactory)

class CombineProvenanceConst(Decorator):
    """Proxy of C++ RMF::decorator::CombineProvenanceConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombineProvenanceConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombineProvenanceConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_runs(self):
        """get_runs(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_runs(self)


    def get_frame_runs(self):
        """get_frame_runs(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_frame_runs(self)


    def get_static_runs(self):
        """get_static_runs(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_static_runs(self)


    def get_frames(self):
        """get_frames(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_frames(self)


    def get_frame_frames(self):
        """get_frame_frames(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_frame_frames(self)


    def get_static_frames(self):
        """get_static_frames(CombineProvenanceConst self) -> RMF::Int"""
        return _RMF.CombineProvenanceConst_get_static_frames(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.CombineProvenanceConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(CombineProvenanceConst self) -> std::string"""
        return _RMF.CombineProvenanceConst___str__(self)


    def __repr__(self):
        """__repr__(CombineProvenanceConst self) -> std::string"""
        return _RMF.CombineProvenanceConst___repr__(self)

    __swig_destroy__ = _RMF.delete_CombineProvenanceConst
    __del__ = lambda self: None
CombineProvenanceConst_swigregister = _RMF.CombineProvenanceConst_swigregister
CombineProvenanceConst_swigregister(CombineProvenanceConst)

def CombineProvenanceConst_get_decorator_type_name():
    """CombineProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.CombineProvenanceConst_get_decorator_type_name()

class CombineProvenance(CombineProvenanceConst):
    """Proxy of C++ RMF::decorator::CombineProvenance class."""

    __swig_setmethods__ = {}
    for _s in [CombineProvenanceConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombineProvenance, name, value)
    __swig_getmethods__ = {}
    for _s in [CombineProvenanceConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombineProvenance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_runs(self, v):
        """set_runs(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_runs(self, v)


    def set_frame_runs(self, v):
        """set_frame_runs(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_frame_runs(self, v)


    def set_static_runs(self, v):
        """set_static_runs(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_static_runs(self, v)


    def set_frames(self, v):
        """set_frames(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_frames(self, v)


    def set_frame_frames(self, v):
        """set_frame_frames(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_frame_frames(self, v)


    def set_static_frames(self, v):
        """set_static_frames(CombineProvenance self, RMF::Int v)"""
        return _RMF.CombineProvenance_set_static_frames(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.CombineProvenance_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_CombineProvenance
    __del__ = lambda self: None
CombineProvenance_swigregister = _RMF.CombineProvenance_swigregister
CombineProvenance_swigregister(CombineProvenance)

def CombineProvenance_get_decorator_type_name():
    """CombineProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.CombineProvenance_get_decorator_type_name()

class CombineProvenanceFactory(Factory):
    """Proxy of C++ RMF::decorator::CombineProvenanceFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombineProvenanceFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombineProvenanceFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::CombineProvenanceFactory self, FileConstHandle fh) -> CombineProvenanceFactory
        __init__(RMF::decorator::CombineProvenanceFactory self, FileHandle fh) -> CombineProvenanceFactory
        """
        this = _RMF.new_CombineProvenanceFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(CombineProvenanceFactory self, NodeConstHandle nh) -> CombineProvenanceConst
        get(CombineProvenanceFactory self, NodeHandle nh) -> CombineProvenance
        """
        return _RMF.CombineProvenanceFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(CombineProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CombineProvenanceFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(CombineProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.CombineProvenanceFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(CombineProvenanceFactory self) -> std::string"""
        return _RMF.CombineProvenanceFactory___str__(self)


    def __repr__(self):
        """__repr__(CombineProvenanceFactory self) -> std::string"""
        return _RMF.CombineProvenanceFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_CombineProvenanceFactory
    __del__ = lambda self: None
CombineProvenanceFactory_swigregister = _RMF.CombineProvenanceFactory_swigregister
CombineProvenanceFactory_swigregister(CombineProvenanceFactory)

class CombineProvenanceConstFactory(CombineProvenanceFactory):
    """Proxy of C++ RMF::decorator::CombineProvenanceConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [CombineProvenanceFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombineProvenanceConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [CombineProvenanceFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombineProvenanceConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::CombineProvenanceConstFactory self, FileConstHandle fh) -> CombineProvenanceConstFactory
        __init__(RMF::decorator::CombineProvenanceConstFactory self, FileHandle fh) -> CombineProvenanceConstFactory
        """
        this = _RMF.new_CombineProvenanceConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_CombineProvenanceConstFactory
    __del__ = lambda self: None
CombineProvenanceConstFactory_swigregister = _RMF.CombineProvenanceConstFactory_swigregister
CombineProvenanceConstFactory_swigregister(CombineProvenanceConstFactory)

class FilterProvenanceConst(Decorator):
    """Proxy of C++ RMF::decorator::FilterProvenanceConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterProvenanceConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterProvenanceConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_method(self):
        """get_method(FilterProvenanceConst self) -> RMF::String"""
        return _RMF.FilterProvenanceConst_get_method(self)


    def get_frame_method(self):
        """get_frame_method(FilterProvenanceConst self) -> RMF::String"""
        return _RMF.FilterProvenanceConst_get_frame_method(self)


    def get_static_method(self):
        """get_static_method(FilterProvenanceConst self) -> RMF::String"""
        return _RMF.FilterProvenanceConst_get_static_method(self)


    def get_threshold(self):
        """get_threshold(FilterProvenanceConst self) -> RMF::Float"""
        return _RMF.FilterProvenanceConst_get_threshold(self)


    def get_frame_threshold(self):
        """get_frame_threshold(FilterProvenanceConst self) -> RMF::Float"""
        return _RMF.FilterProvenanceConst_get_frame_threshold(self)


    def get_static_threshold(self):
        """get_static_threshold(FilterProvenanceConst self) -> RMF::Float"""
        return _RMF.FilterProvenanceConst_get_static_threshold(self)


    def get_frames(self):
        """get_frames(FilterProvenanceConst self) -> RMF::Int"""
        return _RMF.FilterProvenanceConst_get_frames(self)


    def get_frame_frames(self):
        """get_frame_frames(FilterProvenanceConst self) -> RMF::Int"""
        return _RMF.FilterProvenanceConst_get_frame_frames(self)


    def get_static_frames(self):
        """get_static_frames(FilterProvenanceConst self) -> RMF::Int"""
        return _RMF.FilterProvenanceConst_get_static_frames(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.FilterProvenanceConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(FilterProvenanceConst self) -> std::string"""
        return _RMF.FilterProvenanceConst___str__(self)


    def __repr__(self):
        """__repr__(FilterProvenanceConst self) -> std::string"""
        return _RMF.FilterProvenanceConst___repr__(self)

    __swig_destroy__ = _RMF.delete_FilterProvenanceConst
    __del__ = lambda self: None
FilterProvenanceConst_swigregister = _RMF.FilterProvenanceConst_swigregister
FilterProvenanceConst_swigregister(FilterProvenanceConst)

def FilterProvenanceConst_get_decorator_type_name():
    """FilterProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.FilterProvenanceConst_get_decorator_type_name()

class FilterProvenance(FilterProvenanceConst):
    """Proxy of C++ RMF::decorator::FilterProvenance class."""

    __swig_setmethods__ = {}
    for _s in [FilterProvenanceConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterProvenance, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterProvenanceConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterProvenance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_method(self, v):
        """set_method(FilterProvenance self, RMF::String v)"""
        return _RMF.FilterProvenance_set_method(self, v)


    def set_frame_method(self, v):
        """set_frame_method(FilterProvenance self, RMF::String v)"""
        return _RMF.FilterProvenance_set_frame_method(self, v)


    def set_static_method(self, v):
        """set_static_method(FilterProvenance self, RMF::String v)"""
        return _RMF.FilterProvenance_set_static_method(self, v)


    def set_threshold(self, v):
        """set_threshold(FilterProvenance self, RMF::Float v)"""
        return _RMF.FilterProvenance_set_threshold(self, v)


    def set_frame_threshold(self, v):
        """set_frame_threshold(FilterProvenance self, RMF::Float v)"""
        return _RMF.FilterProvenance_set_frame_threshold(self, v)


    def set_static_threshold(self, v):
        """set_static_threshold(FilterProvenance self, RMF::Float v)"""
        return _RMF.FilterProvenance_set_static_threshold(self, v)


    def set_frames(self, v):
        """set_frames(FilterProvenance self, RMF::Int v)"""
        return _RMF.FilterProvenance_set_frames(self, v)


    def set_frame_frames(self, v):
        """set_frame_frames(FilterProvenance self, RMF::Int v)"""
        return _RMF.FilterProvenance_set_frame_frames(self, v)


    def set_static_frames(self, v):
        """set_static_frames(FilterProvenance self, RMF::Int v)"""
        return _RMF.FilterProvenance_set_static_frames(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.FilterProvenance_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_FilterProvenance
    __del__ = lambda self: None
FilterProvenance_swigregister = _RMF.FilterProvenance_swigregister
FilterProvenance_swigregister(FilterProvenance)

def FilterProvenance_get_decorator_type_name():
    """FilterProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.FilterProvenance_get_decorator_type_name()

class FilterProvenanceFactory(Factory):
    """Proxy of C++ RMF::decorator::FilterProvenanceFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterProvenanceFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterProvenanceFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::FilterProvenanceFactory self, FileConstHandle fh) -> FilterProvenanceFactory
        __init__(RMF::decorator::FilterProvenanceFactory self, FileHandle fh) -> FilterProvenanceFactory
        """
        this = _RMF.new_FilterProvenanceFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(FilterProvenanceFactory self, NodeConstHandle nh) -> FilterProvenanceConst
        get(FilterProvenanceFactory self, NodeHandle nh) -> FilterProvenance
        """
        return _RMF.FilterProvenanceFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(FilterProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.FilterProvenanceFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(FilterProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.FilterProvenanceFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(FilterProvenanceFactory self) -> std::string"""
        return _RMF.FilterProvenanceFactory___str__(self)


    def __repr__(self):
        """__repr__(FilterProvenanceFactory self) -> std::string"""
        return _RMF.FilterProvenanceFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_FilterProvenanceFactory
    __del__ = lambda self: None
FilterProvenanceFactory_swigregister = _RMF.FilterProvenanceFactory_swigregister
FilterProvenanceFactory_swigregister(FilterProvenanceFactory)

class FilterProvenanceConstFactory(FilterProvenanceFactory):
    """Proxy of C++ RMF::decorator::FilterProvenanceConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [FilterProvenanceFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterProvenanceConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterProvenanceFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterProvenanceConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::FilterProvenanceConstFactory self, FileConstHandle fh) -> FilterProvenanceConstFactory
        __init__(RMF::decorator::FilterProvenanceConstFactory self, FileHandle fh) -> FilterProvenanceConstFactory
        """
        this = _RMF.new_FilterProvenanceConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_FilterProvenanceConstFactory
    __del__ = lambda self: None
FilterProvenanceConstFactory_swigregister = _RMF.FilterProvenanceConstFactory_swigregister
FilterProvenanceConstFactory_swigregister(FilterProvenanceConstFactory)

class ClusterProvenanceConst(Decorator):
    """Proxy of C++ RMF::decorator::ClusterProvenanceConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterProvenanceConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterProvenanceConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_members(self):
        """get_members(ClusterProvenanceConst self) -> RMF::Int"""
        return _RMF.ClusterProvenanceConst_get_members(self)


    def get_frame_members(self):
        """get_frame_members(ClusterProvenanceConst self) -> RMF::Int"""
        return _RMF.ClusterProvenanceConst_get_frame_members(self)


    def get_static_members(self):
        """get_static_members(ClusterProvenanceConst self) -> RMF::Int"""
        return _RMF.ClusterProvenanceConst_get_static_members(self)


    def get_precision(self):
        """get_precision(ClusterProvenanceConst self) -> RMF::Float"""
        return _RMF.ClusterProvenanceConst_get_precision(self)


    def get_frame_precision(self):
        """get_frame_precision(ClusterProvenanceConst self) -> RMF::Float"""
        return _RMF.ClusterProvenanceConst_get_frame_precision(self)


    def get_static_precision(self):
        """get_static_precision(ClusterProvenanceConst self) -> RMF::Float"""
        return _RMF.ClusterProvenanceConst_get_static_precision(self)


    def get_density(self):
        """get_density(ClusterProvenanceConst self) -> RMF::String"""
        return _RMF.ClusterProvenanceConst_get_density(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ClusterProvenanceConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ClusterProvenanceConst self) -> std::string"""
        return _RMF.ClusterProvenanceConst___str__(self)


    def __repr__(self):
        """__repr__(ClusterProvenanceConst self) -> std::string"""
        return _RMF.ClusterProvenanceConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ClusterProvenanceConst
    __del__ = lambda self: None
ClusterProvenanceConst_swigregister = _RMF.ClusterProvenanceConst_swigregister
ClusterProvenanceConst_swigregister(ClusterProvenanceConst)

def ClusterProvenanceConst_get_decorator_type_name():
    """ClusterProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.ClusterProvenanceConst_get_decorator_type_name()

class ClusterProvenance(ClusterProvenanceConst):
    """Proxy of C++ RMF::decorator::ClusterProvenance class."""

    __swig_setmethods__ = {}
    for _s in [ClusterProvenanceConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterProvenance, name, value)
    __swig_getmethods__ = {}
    for _s in [ClusterProvenanceConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterProvenance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_members(self, v):
        """set_members(ClusterProvenance self, RMF::Int v)"""
        return _RMF.ClusterProvenance_set_members(self, v)


    def set_frame_members(self, v):
        """set_frame_members(ClusterProvenance self, RMF::Int v)"""
        return _RMF.ClusterProvenance_set_frame_members(self, v)


    def set_static_members(self, v):
        """set_static_members(ClusterProvenance self, RMF::Int v)"""
        return _RMF.ClusterProvenance_set_static_members(self, v)


    def set_precision(self, v):
        """set_precision(ClusterProvenance self, RMF::Float v)"""
        return _RMF.ClusterProvenance_set_precision(self, v)


    def set_frame_precision(self, v):
        """set_frame_precision(ClusterProvenance self, RMF::Float v)"""
        return _RMF.ClusterProvenance_set_frame_precision(self, v)


    def set_static_precision(self, v):
        """set_static_precision(ClusterProvenance self, RMF::Float v)"""
        return _RMF.ClusterProvenance_set_static_precision(self, v)


    def set_density(self, path):
        """set_density(ClusterProvenance self, RMF::String path)"""
        return _RMF.ClusterProvenance_set_density(self, path)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ClusterProvenance_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_ClusterProvenance
    __del__ = lambda self: None
ClusterProvenance_swigregister = _RMF.ClusterProvenance_swigregister
ClusterProvenance_swigregister(ClusterProvenance)

def ClusterProvenance_get_decorator_type_name():
    """ClusterProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.ClusterProvenance_get_decorator_type_name()

class ClusterProvenanceFactory(Factory):
    """Proxy of C++ RMF::decorator::ClusterProvenanceFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterProvenanceFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterProvenanceFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ClusterProvenanceFactory self, FileConstHandle fh) -> ClusterProvenanceFactory
        __init__(RMF::decorator::ClusterProvenanceFactory self, FileHandle fh) -> ClusterProvenanceFactory
        """
        this = _RMF.new_ClusterProvenanceFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ClusterProvenanceFactory self, NodeConstHandle nh) -> ClusterProvenanceConst
        get(ClusterProvenanceFactory self, NodeHandle nh) -> ClusterProvenance
        """
        return _RMF.ClusterProvenanceFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ClusterProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ClusterProvenanceFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ClusterProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ClusterProvenanceFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ClusterProvenanceFactory self) -> std::string"""
        return _RMF.ClusterProvenanceFactory___str__(self)


    def __repr__(self):
        """__repr__(ClusterProvenanceFactory self) -> std::string"""
        return _RMF.ClusterProvenanceFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ClusterProvenanceFactory
    __del__ = lambda self: None
ClusterProvenanceFactory_swigregister = _RMF.ClusterProvenanceFactory_swigregister
ClusterProvenanceFactory_swigregister(ClusterProvenanceFactory)

class ClusterProvenanceConstFactory(ClusterProvenanceFactory):
    """Proxy of C++ RMF::decorator::ClusterProvenanceConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ClusterProvenanceFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterProvenanceConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ClusterProvenanceFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterProvenanceConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ClusterProvenanceConstFactory self, FileConstHandle fh) -> ClusterProvenanceConstFactory
        __init__(RMF::decorator::ClusterProvenanceConstFactory self, FileHandle fh) -> ClusterProvenanceConstFactory
        """
        this = _RMF.new_ClusterProvenanceConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ClusterProvenanceConstFactory
    __del__ = lambda self: None
ClusterProvenanceConstFactory_swigregister = _RMF.ClusterProvenanceConstFactory_swigregister
ClusterProvenanceConstFactory_swigregister(ClusterProvenanceConstFactory)

class ScriptProvenanceConst(Decorator):
    """Proxy of C++ RMF::decorator::ScriptProvenanceConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptProvenanceConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptProvenanceConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_filename(self):
        """get_filename(ScriptProvenanceConst self) -> RMF::String"""
        return _RMF.ScriptProvenanceConst_get_filename(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ScriptProvenanceConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ScriptProvenanceConst self) -> std::string"""
        return _RMF.ScriptProvenanceConst___str__(self)


    def __repr__(self):
        """__repr__(ScriptProvenanceConst self) -> std::string"""
        return _RMF.ScriptProvenanceConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ScriptProvenanceConst
    __del__ = lambda self: None
ScriptProvenanceConst_swigregister = _RMF.ScriptProvenanceConst_swigregister
ScriptProvenanceConst_swigregister(ScriptProvenanceConst)

def ScriptProvenanceConst_get_decorator_type_name():
    """ScriptProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.ScriptProvenanceConst_get_decorator_type_name()

class ScriptProvenance(ScriptProvenanceConst):
    """Proxy of C++ RMF::decorator::ScriptProvenance class."""

    __swig_setmethods__ = {}
    for _s in [ScriptProvenanceConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptProvenance, name, value)
    __swig_getmethods__ = {}
    for _s in [ScriptProvenanceConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptProvenance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_filename(self, path):
        """set_filename(ScriptProvenance self, RMF::String path)"""
        return _RMF.ScriptProvenance_set_filename(self, path)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ScriptProvenance_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_ScriptProvenance
    __del__ = lambda self: None
ScriptProvenance_swigregister = _RMF.ScriptProvenance_swigregister
ScriptProvenance_swigregister(ScriptProvenance)

def ScriptProvenance_get_decorator_type_name():
    """ScriptProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.ScriptProvenance_get_decorator_type_name()

class ScriptProvenanceFactory(Factory):
    """Proxy of C++ RMF::decorator::ScriptProvenanceFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptProvenanceFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptProvenanceFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ScriptProvenanceFactory self, FileConstHandle fh) -> ScriptProvenanceFactory
        __init__(RMF::decorator::ScriptProvenanceFactory self, FileHandle fh) -> ScriptProvenanceFactory
        """
        this = _RMF.new_ScriptProvenanceFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ScriptProvenanceFactory self, NodeConstHandle nh) -> ScriptProvenanceConst
        get(ScriptProvenanceFactory self, NodeHandle nh) -> ScriptProvenance
        """
        return _RMF.ScriptProvenanceFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ScriptProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScriptProvenanceFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ScriptProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScriptProvenanceFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ScriptProvenanceFactory self) -> std::string"""
        return _RMF.ScriptProvenanceFactory___str__(self)


    def __repr__(self):
        """__repr__(ScriptProvenanceFactory self) -> std::string"""
        return _RMF.ScriptProvenanceFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ScriptProvenanceFactory
    __del__ = lambda self: None
ScriptProvenanceFactory_swigregister = _RMF.ScriptProvenanceFactory_swigregister
ScriptProvenanceFactory_swigregister(ScriptProvenanceFactory)

class ScriptProvenanceConstFactory(ScriptProvenanceFactory):
    """Proxy of C++ RMF::decorator::ScriptProvenanceConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ScriptProvenanceFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptProvenanceConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ScriptProvenanceFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptProvenanceConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ScriptProvenanceConstFactory self, FileConstHandle fh) -> ScriptProvenanceConstFactory
        __init__(RMF::decorator::ScriptProvenanceConstFactory self, FileHandle fh) -> ScriptProvenanceConstFactory
        """
        this = _RMF.new_ScriptProvenanceConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ScriptProvenanceConstFactory
    __del__ = lambda self: None
ScriptProvenanceConstFactory_swigregister = _RMF.ScriptProvenanceConstFactory_swigregister
ScriptProvenanceConstFactory_swigregister(ScriptProvenanceConstFactory)

class SoftwareProvenanceConst(Decorator):
    """Proxy of C++ RMF::decorator::SoftwareProvenanceConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftwareProvenanceConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoftwareProvenanceConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_name(self):
        """get_name(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_name(self)


    def get_frame_name(self):
        """get_frame_name(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_frame_name(self)


    def get_static_name(self):
        """get_static_name(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_static_name(self)


    def get_version(self):
        """get_version(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_version(self)


    def get_frame_version(self):
        """get_frame_version(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_frame_version(self)


    def get_static_version(self):
        """get_static_version(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_static_version(self)


    def get_location(self):
        """get_location(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_location(self)


    def get_frame_location(self):
        """get_frame_location(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_frame_location(self)


    def get_static_location(self):
        """get_static_location(SoftwareProvenanceConst self) -> RMF::String"""
        return _RMF.SoftwareProvenanceConst_get_static_location(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.SoftwareProvenanceConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(SoftwareProvenanceConst self) -> std::string"""
        return _RMF.SoftwareProvenanceConst___str__(self)


    def __repr__(self):
        """__repr__(SoftwareProvenanceConst self) -> std::string"""
        return _RMF.SoftwareProvenanceConst___repr__(self)

    __swig_destroy__ = _RMF.delete_SoftwareProvenanceConst
    __del__ = lambda self: None
SoftwareProvenanceConst_swigregister = _RMF.SoftwareProvenanceConst_swigregister
SoftwareProvenanceConst_swigregister(SoftwareProvenanceConst)

def SoftwareProvenanceConst_get_decorator_type_name():
    """SoftwareProvenanceConst_get_decorator_type_name() -> std::string"""
    return _RMF.SoftwareProvenanceConst_get_decorator_type_name()

class SoftwareProvenance(SoftwareProvenanceConst):
    """Proxy of C++ RMF::decorator::SoftwareProvenance class."""

    __swig_setmethods__ = {}
    for _s in [SoftwareProvenanceConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftwareProvenance, name, value)
    __swig_getmethods__ = {}
    for _s in [SoftwareProvenanceConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoftwareProvenance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_name(self, v):
        """set_name(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_name(self, v)


    def set_frame_name(self, v):
        """set_frame_name(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_frame_name(self, v)


    def set_static_name(self, v):
        """set_static_name(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_static_name(self, v)


    def set_version(self, v):
        """set_version(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_version(self, v)


    def set_frame_version(self, v):
        """set_frame_version(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_frame_version(self, v)


    def set_static_version(self, v):
        """set_static_version(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_static_version(self, v)


    def set_location(self, v):
        """set_location(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_location(self, v)


    def set_frame_location(self, v):
        """set_frame_location(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_frame_location(self, v)


    def set_static_location(self, v):
        """set_static_location(SoftwareProvenance self, RMF::String v)"""
        return _RMF.SoftwareProvenance_set_static_location(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.SoftwareProvenance_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_SoftwareProvenance
    __del__ = lambda self: None
SoftwareProvenance_swigregister = _RMF.SoftwareProvenance_swigregister
SoftwareProvenance_swigregister(SoftwareProvenance)

def SoftwareProvenance_get_decorator_type_name():
    """SoftwareProvenance_get_decorator_type_name() -> std::string"""
    return _RMF.SoftwareProvenance_get_decorator_type_name()

class SoftwareProvenanceFactory(Factory):
    """Proxy of C++ RMF::decorator::SoftwareProvenanceFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftwareProvenanceFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoftwareProvenanceFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::SoftwareProvenanceFactory self, FileConstHandle fh) -> SoftwareProvenanceFactory
        __init__(RMF::decorator::SoftwareProvenanceFactory self, FileHandle fh) -> SoftwareProvenanceFactory
        """
        this = _RMF.new_SoftwareProvenanceFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(SoftwareProvenanceFactory self, NodeConstHandle nh) -> SoftwareProvenanceConst
        get(SoftwareProvenanceFactory self, NodeHandle nh) -> SoftwareProvenance
        """
        return _RMF.SoftwareProvenanceFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(SoftwareProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SoftwareProvenanceFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(SoftwareProvenanceFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.SoftwareProvenanceFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(SoftwareProvenanceFactory self) -> std::string"""
        return _RMF.SoftwareProvenanceFactory___str__(self)


    def __repr__(self):
        """__repr__(SoftwareProvenanceFactory self) -> std::string"""
        return _RMF.SoftwareProvenanceFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_SoftwareProvenanceFactory
    __del__ = lambda self: None
SoftwareProvenanceFactory_swigregister = _RMF.SoftwareProvenanceFactory_swigregister
SoftwareProvenanceFactory_swigregister(SoftwareProvenanceFactory)

class SoftwareProvenanceConstFactory(SoftwareProvenanceFactory):
    """Proxy of C++ RMF::decorator::SoftwareProvenanceConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [SoftwareProvenanceFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftwareProvenanceConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [SoftwareProvenanceFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoftwareProvenanceConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::SoftwareProvenanceConstFactory self, FileConstHandle fh) -> SoftwareProvenanceConstFactory
        __init__(RMF::decorator::SoftwareProvenanceConstFactory self, FileHandle fh) -> SoftwareProvenanceConstFactory
        """
        this = _RMF.new_SoftwareProvenanceConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_SoftwareProvenanceConstFactory
    __del__ = lambda self: None
SoftwareProvenanceConstFactory_swigregister = _RMF.SoftwareProvenanceConstFactory_swigregister
SoftwareProvenanceConstFactory_swigregister(SoftwareProvenanceConstFactory)

class ScaleConst(Decorator):
    """Proxy of C++ RMF::decorator::ScaleConst class."""

    __swig_setmethods__ = {}
    for _s in [Decorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleConst, name, value)
    __swig_getmethods__ = {}
    for _s in [Decorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleConst, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def get_scale(self):
        """get_scale(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_scale(self)


    def get_frame_scale(self):
        """get_frame_scale(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_frame_scale(self)


    def get_static_scale(self):
        """get_static_scale(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_static_scale(self)


    def get_lower(self):
        """get_lower(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_lower(self)


    def get_frame_lower(self):
        """get_frame_lower(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_frame_lower(self)


    def get_static_lower(self):
        """get_static_lower(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_static_lower(self)


    def get_upper(self):
        """get_upper(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_upper(self)


    def get_frame_upper(self):
        """get_frame_upper(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_frame_upper(self)


    def get_static_upper(self):
        """get_static_upper(ScaleConst self) -> RMF::Float"""
        return _RMF.ScaleConst_get_static_upper(self)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.ScaleConst_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)

    def __str__(self):
        """__str__(ScaleConst self) -> std::string"""
        return _RMF.ScaleConst___str__(self)


    def __repr__(self):
        """__repr__(ScaleConst self) -> std::string"""
        return _RMF.ScaleConst___repr__(self)

    __swig_destroy__ = _RMF.delete_ScaleConst
    __del__ = lambda self: None
ScaleConst_swigregister = _RMF.ScaleConst_swigregister
ScaleConst_swigregister(ScaleConst)

def ScaleConst_get_decorator_type_name():
    """ScaleConst_get_decorator_type_name() -> std::string"""
    return _RMF.ScaleConst_get_decorator_type_name()

class Scale(ScaleConst):
    """Proxy of C++ RMF::decorator::Scale class."""

    __swig_setmethods__ = {}
    for _s in [ScaleConst]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scale, name, value)
    __swig_getmethods__ = {}
    for _s in [ScaleConst]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scale, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_scale(self, v):
        """set_scale(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_scale(self, v)


    def set_frame_scale(self, v):
        """set_frame_scale(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_frame_scale(self, v)


    def set_static_scale(self, v):
        """set_static_scale(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_static_scale(self, v)


    def set_lower(self, v):
        """set_lower(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_lower(self, v)


    def set_frame_lower(self, v):
        """set_frame_lower(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_frame_lower(self, v)


    def set_static_lower(self, v):
        """set_static_lower(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_static_lower(self, v)


    def set_upper(self, v):
        """set_upper(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_upper(self, v)


    def set_frame_upper(self, v):
        """set_frame_upper(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_frame_upper(self, v)


    def set_static_upper(self, v):
        """set_static_upper(Scale self, RMF::Float v)"""
        return _RMF.Scale_set_static_upper(self, v)


    def get_decorator_type_name():
        """get_decorator_type_name() -> std::string"""
        return _RMF.Scale_get_decorator_type_name()

    get_decorator_type_name = staticmethod(get_decorator_type_name)
    __swig_destroy__ = _RMF.delete_Scale
    __del__ = lambda self: None
Scale_swigregister = _RMF.Scale_swigregister
Scale_swigregister(Scale)

def Scale_get_decorator_type_name():
    """Scale_get_decorator_type_name() -> std::string"""
    return _RMF.Scale_get_decorator_type_name()

class ScaleFactory(Factory):
    """Proxy of C++ RMF::decorator::ScaleFactory class."""

    __swig_setmethods__ = {}
    for _s in [Factory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Factory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleFactory, name)

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ScaleFactory self, FileConstHandle fh) -> ScaleFactory
        __init__(RMF::decorator::ScaleFactory self, FileHandle fh) -> ScaleFactory
        """
        this = _RMF.new_ScaleFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args):
        """
        get(ScaleFactory self, NodeConstHandle nh) -> ScaleConst
        get(ScaleFactory self, NodeHandle nh) -> Scale
        """
        return _RMF.ScaleFactory_get(self, *args)


    def get_is(self, nh):
        """get_is(ScaleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScaleFactory_get_is(self, nh)


    def get_is_static(self, nh):
        """get_is_static(ScaleFactory self, NodeConstHandle nh) -> bool"""
        return _RMF.ScaleFactory_get_is_static(self, nh)


    def __str__(self):
        """__str__(ScaleFactory self) -> std::string"""
        return _RMF.ScaleFactory___str__(self)


    def __repr__(self):
        """__repr__(ScaleFactory self) -> std::string"""
        return _RMF.ScaleFactory___repr__(self)

    __swig_destroy__ = _RMF.delete_ScaleFactory
    __del__ = lambda self: None
ScaleFactory_swigregister = _RMF.ScaleFactory_swigregister
ScaleFactory_swigregister(ScaleFactory)

class ScaleConstFactory(ScaleFactory):
    """Proxy of C++ RMF::decorator::ScaleConstFactory class."""

    __swig_setmethods__ = {}
    for _s in [ScaleFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleConstFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ScaleFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleConstFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::decorator::ScaleConstFactory self, FileConstHandle fh) -> ScaleConstFactory
        __init__(RMF::decorator::ScaleConstFactory self, FileHandle fh) -> ScaleConstFactory
        """
        this = _RMF.new_ScaleConstFactory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_ScaleConstFactory
    __del__ = lambda self: None
ScaleConstFactory_swigregister = _RMF.ScaleConstFactory_swigregister
ScaleConstFactory_swigregister(ScaleConstFactory)

class SetCurrentFrame(_object):
    """Proxy of C++ RMF::SetCurrentFrame class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetCurrentFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetCurrentFrame, name)

    def __init__(self, file, current_frame):
        """__init__(RMF::SetCurrentFrame self, FileConstHandle file, FrameID current_frame) -> SetCurrentFrame"""
        this = _RMF.new_SetCurrentFrame(file, current_frame)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_SetCurrentFrame
    __del__ = lambda self: None

    def __str__(self):
        """__str__(SetCurrentFrame self) -> std::string"""
        return _RMF.SetCurrentFrame___str__(self)


    def __repr__(self):
        """__repr__(SetCurrentFrame self) -> std::string"""
        return _RMF.SetCurrentFrame___repr__(self)

SetCurrentFrame_swigregister = _RMF.SetCurrentFrame_swigregister
SetCurrentFrame_swigregister(SetCurrentFrame)

class RestoreCurrentFrame(_object):
    """Proxy of C++ RMF::RestoreCurrentFrame class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RestoreCurrentFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RestoreCurrentFrame, name)

    def __init__(self, file):
        """__init__(RMF::RestoreCurrentFrame self, FileConstHandle file) -> RestoreCurrentFrame"""
        this = _RMF.new_RestoreCurrentFrame(file)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RMF.delete_RestoreCurrentFrame
    __del__ = lambda self: None

    def __str__(self):
        """__str__(RestoreCurrentFrame self) -> std::string"""
        return _RMF.RestoreCurrentFrame___str__(self)


    def __repr__(self):
        """__repr__(RestoreCurrentFrame self) -> std::string"""
        return _RMF.RestoreCurrentFrame___repr__(self)

RestoreCurrentFrame_swigregister = _RMF.RestoreCurrentFrame_swigregister
RestoreCurrentFrame_swigregister(RestoreCurrentFrame)

class CoordinateTransformer(_object):
    """Proxy of C++ RMF::CoordinateTransformer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateTransformer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateTransformer, name)

    def __init__(self, *args):
        """
        __init__(RMF::CoordinateTransformer self) -> CoordinateTransformer
        __init__(RMF::CoordinateTransformer self, CoordinateTransformer base, ReferenceFrameConst rb) -> CoordinateTransformer
        """
        this = _RMF.new_CoordinateTransformer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        """__str__(CoordinateTransformer self) -> std::string"""
        return _RMF.CoordinateTransformer___str__(self)


    def __repr__(self):
        """__repr__(CoordinateTransformer self) -> std::string"""
        return _RMF.CoordinateTransformer___repr__(self)


    def get_global_coordinates(self, internal):
        """get_global_coordinates(CoordinateTransformer self, Vector3 internal) -> Vector3"""
        return _RMF.CoordinateTransformer_get_global_coordinates(self, internal)


    def get_translation(self):
        """get_translation(CoordinateTransformer self) -> Vector3"""
        return _RMF.CoordinateTransformer_get_translation(self)


    def get_rotation(self):
        """get_rotation(CoordinateTransformer self) -> Vector4"""
        return _RMF.CoordinateTransformer_get_rotation(self)

    __swig_destroy__ = _RMF.delete_CoordinateTransformer
    __del__ = lambda self: None
CoordinateTransformer_swigregister = _RMF.CoordinateTransformer_swigregister
CoordinateTransformer_swigregister(CoordinateTransformer)

class TraverseHelper(NodeConstHandle):
    """Proxy of C++ RMF::TraverseHelper class."""

    __swig_setmethods__ = {}
    for _s in [NodeConstHandle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraverseHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeConstHandle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraverseHelper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RMF::TraverseHelper self) -> TraverseHelper
        __init__(RMF::TraverseHelper self, NodeConstHandle root, std::string molecule_name, double resolution=10000, int state_filter=-1) -> TraverseHelper
        __init__(RMF::TraverseHelper self, NodeConstHandle root, std::string molecule_name, double resolution=10000) -> TraverseHelper
        __init__(RMF::TraverseHelper self, NodeConstHandle root, std::string molecule_name) -> TraverseHelper
        """
        this = _RMF.new_TraverseHelper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_chain_id(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_chain_id(self, *args))



    def get_residue_index(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_residue_index(self, *args))



    def get_residue_type(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_residue_type(self, *args))



    def get_molecule_name(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_molecule_name(self, *args))



    def get_rgb_color(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_rgb_color(self, *args))



    def get_state_index(self):
        """get_state_index(TraverseHelper self) -> unsigned int"""
        return _RMF.TraverseHelper_get_state_index(self)


    def get_copy_index(self, *args):
        return _handle_nullable( _RMF.TraverseHelper_get_copy_index(self, *args))



    def get_global_coordinates(self, v):
        """get_global_coordinates(TraverseHelper self, Vector3 v) -> Vector3"""
        return _RMF.TraverseHelper_get_global_coordinates(self, v)


    def set_is_displayed(self):
        """set_is_displayed(TraverseHelper self) -> unsigned int"""
        return _RMF.TraverseHelper_set_is_displayed(self)


    def get_is_displayed(self, n):
        """get_is_displayed(TraverseHelper self, NodeID n) -> bool"""
        return _RMF.TraverseHelper_get_is_displayed(self, n)


    def get_index(self, n):
        """get_index(TraverseHelper self, NodeID n) -> unsigned int"""
        return _RMF.TraverseHelper_get_index(self, n)


    def get_children(self):
        """get_children(TraverseHelper self) -> TraverseHelpers"""
        return _RMF.TraverseHelper_get_children(self)

    __swig_destroy__ = _RMF.delete_TraverseHelper
    __del__ = lambda self: None
TraverseHelper_swigregister = _RMF.TraverseHelper_swigregister
TraverseHelper_swigregister(TraverseHelper)

class TraverseHelpers(_object):
    """Proxy of C++ std::vector<(RMF::TraverseHelper)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraverseHelpers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraverseHelpers, name)

    def iterator(self):
        """iterator(TraverseHelpers self) -> RMF_SwigPyIterator"""
        return _RMF.TraverseHelpers_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(TraverseHelpers self) -> bool"""
        return _RMF.TraverseHelpers___nonzero__(self)


    def __bool__(self):
        """__bool__(TraverseHelpers self) -> bool"""
        return _RMF.TraverseHelpers___bool__(self)


    def __len__(self):
        """__len__(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::size_type"""
        return _RMF.TraverseHelpers___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i, std::vector< RMF::TraverseHelper >::difference_type j) -> TraverseHelpers"""
        return _RMF.TraverseHelpers___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i, std::vector< RMF::TraverseHelper >::difference_type j)
        __setslice__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i, std::vector< RMF::TraverseHelper >::difference_type j, TraverseHelpers v)
        """
        return _RMF.TraverseHelpers___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i, std::vector< RMF::TraverseHelper >::difference_type j)"""
        return _RMF.TraverseHelpers___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i)
        __delitem__(TraverseHelpers self, PySliceObject * slice)
        """
        return _RMF.TraverseHelpers___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(TraverseHelpers self, PySliceObject * slice) -> TraverseHelpers
        __getitem__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i) -> TraverseHelper
        """
        return _RMF.TraverseHelpers___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(TraverseHelpers self, PySliceObject * slice, TraverseHelpers v)
        __setitem__(TraverseHelpers self, PySliceObject * slice)
        __setitem__(TraverseHelpers self, std::vector< RMF::TraverseHelper >::difference_type i, TraverseHelper x)
        """
        return _RMF.TraverseHelpers___setitem__(self, *args)


    def pop(self):
        """pop(TraverseHelpers self) -> TraverseHelper"""
        return _RMF.TraverseHelpers_pop(self)


    def append(self, x):
        """append(TraverseHelpers self, TraverseHelper x)"""
        return _RMF.TraverseHelpers_append(self, x)


    def empty(self):
        """empty(TraverseHelpers self) -> bool"""
        return _RMF.TraverseHelpers_empty(self)


    def size(self):
        """size(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::size_type"""
        return _RMF.TraverseHelpers_size(self)


    def swap(self, v):
        """swap(TraverseHelpers self, TraverseHelpers v)"""
        return _RMF.TraverseHelpers_swap(self, v)


    def begin(self):
        """begin(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::iterator"""
        return _RMF.TraverseHelpers_begin(self)


    def end(self):
        """end(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::iterator"""
        return _RMF.TraverseHelpers_end(self)


    def rbegin(self):
        """rbegin(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::reverse_iterator"""
        return _RMF.TraverseHelpers_rbegin(self)


    def rend(self):
        """rend(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::reverse_iterator"""
        return _RMF.TraverseHelpers_rend(self)


    def clear(self):
        """clear(TraverseHelpers self)"""
        return _RMF.TraverseHelpers_clear(self)


    def get_allocator(self):
        """get_allocator(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::allocator_type"""
        return _RMF.TraverseHelpers_get_allocator(self)


    def pop_back(self):
        """pop_back(TraverseHelpers self)"""
        return _RMF.TraverseHelpers_pop_back(self)


    def erase(self, *args):
        """
        erase(TraverseHelpers self, std::vector< RMF::TraverseHelper >::iterator pos) -> std::vector< RMF::TraverseHelper >::iterator
        erase(TraverseHelpers self, std::vector< RMF::TraverseHelper >::iterator first, std::vector< RMF::TraverseHelper >::iterator last) -> std::vector< RMF::TraverseHelper >::iterator
        """
        return _RMF.TraverseHelpers_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(RMF::TraverseHelper)> self) -> TraverseHelpers
        __init__(std::vector<(RMF::TraverseHelper)> self, TraverseHelpers arg2) -> TraverseHelpers
        __init__(std::vector<(RMF::TraverseHelper)> self, std::vector< RMF::TraverseHelper >::size_type size) -> TraverseHelpers
        __init__(std::vector<(RMF::TraverseHelper)> self, std::vector< RMF::TraverseHelper >::size_type size, TraverseHelper value) -> TraverseHelpers
        """
        this = _RMF.new_TraverseHelpers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(TraverseHelpers self, TraverseHelper x)"""
        return _RMF.TraverseHelpers_push_back(self, x)


    def front(self):
        """front(TraverseHelpers self) -> TraverseHelper"""
        return _RMF.TraverseHelpers_front(self)


    def back(self):
        """back(TraverseHelpers self) -> TraverseHelper"""
        return _RMF.TraverseHelpers_back(self)


    def assign(self, n, x):
        """assign(TraverseHelpers self, std::vector< RMF::TraverseHelper >::size_type n, TraverseHelper x)"""
        return _RMF.TraverseHelpers_assign(self, n, x)


    def resize(self, *args):
        """
        resize(TraverseHelpers self, std::vector< RMF::TraverseHelper >::size_type new_size)
        resize(TraverseHelpers self, std::vector< RMF::TraverseHelper >::size_type new_size, TraverseHelper x)
        """
        return _RMF.TraverseHelpers_resize(self, *args)


    def insert(self, *args):
        """
        insert(TraverseHelpers self, std::vector< RMF::TraverseHelper >::iterator pos, TraverseHelper x) -> std::vector< RMF::TraverseHelper >::iterator
        insert(TraverseHelpers self, std::vector< RMF::TraverseHelper >::iterator pos, std::vector< RMF::TraverseHelper >::size_type n, TraverseHelper x)
        """
        return _RMF.TraverseHelpers_insert(self, *args)


    def reserve(self, n):
        """reserve(TraverseHelpers self, std::vector< RMF::TraverseHelper >::size_type n)"""
        return _RMF.TraverseHelpers_reserve(self, n)


    def capacity(self):
        """capacity(TraverseHelpers self) -> std::vector< RMF::TraverseHelper >::size_type"""
        return _RMF.TraverseHelpers_capacity(self)


    def __str__(self):
        """__str__(TraverseHelpers self) -> std::string"""
        return _RMF.TraverseHelpers___str__(self)


    def __repr__(self):
        """__repr__(TraverseHelpers self) -> std::string"""
        return _RMF.TraverseHelpers___repr__(self)

    __swig_destroy__ = _RMF.delete_TraverseHelpers
    __del__ = lambda self: None
TraverseHelpers_swigregister = _RMF.TraverseHelpers_swigregister
TraverseHelpers_swigregister(TraverseHelpers)


def show_info(*args):
    """
    show_info(FileConstHandle rh, std::ostream & out)
    show_info(FileConstHandle rh)
    """
    return _RMF.show_info(*args)

def set_log_level(level):
    """set_log_level(std::string level)"""
    return _RMF.set_log_level(level)

def get_as_node_name(input):
    """get_as_node_name(std::string input) -> std::string"""
    return _RMF.get_as_node_name(input)

def get_is_valid_key_name(name):
    """get_is_valid_key_name(std::string name) -> bool"""
    return _RMF.get_is_valid_key_name(name)

def get_is_valid_node_name(name):
    """get_is_valid_node_name(std::string name) -> bool"""
    return _RMF.get_is_valid_node_name(name)

def show_hierarchy(*args):
    """
    show_hierarchy(NodeConstHandle root, std::ostream & out)
    show_hierarchy(NodeConstHandle root)
    """
    return _RMF.show_hierarchy(*args)

def show_hierarchy_with_values(*args):
    """
    show_hierarchy_with_values(NodeConstHandle root, std::ostream & out)
    show_hierarchy_with_values(NodeConstHandle root)
    """
    return _RMF.show_hierarchy_with_values(*args)

def show_hierarchy_with_decorators(*args):
    """
    show_hierarchy_with_decorators(NodeConstHandle root, bool verbose=False, std::ostream & out)
    show_hierarchy_with_decorators(NodeConstHandle root, bool verbose=False)
    show_hierarchy_with_decorators(NodeConstHandle root)
    """
    return _RMF.show_hierarchy_with_decorators(*args)

def show_frames(*args):
    """
    show_frames(FileConstHandle fh, std::ostream & out)
    show_frames(FileConstHandle fh)
    """
    return _RMF.show_frames(*args)

def get_signature_string(file):
    """get_signature_string(FileConstHandle file) -> std::string"""
    return _RMF.get_signature_string(file)

def clone_file_info(input, output):
    """clone_file_info(FileConstHandle input, FileHandle output)"""
    return _RMF.clone_file_info(input, output)

def clone_hierarchy(input, output):
    """clone_hierarchy(FileConstHandle input, FileHandle output)"""
    return _RMF.clone_hierarchy(input, output)

def clone_loaded_frame(input, output):
    """clone_loaded_frame(FileConstHandle input, FileHandle output)"""
    return _RMF.clone_loaded_frame(input, output)

def clone_static_frame(input, output):
    """clone_static_frame(FileConstHandle input, FileHandle output)"""
    return _RMF.clone_static_frame(input, output)

def get_equal_structure(input, output, print_diff=False):
    """
    get_equal_structure(FileConstHandle input, FileConstHandle output, bool print_diff=False) -> bool
    get_equal_structure(FileConstHandle input, FileConstHandle output) -> bool
    """
    return _RMF.get_equal_structure(input, output, print_diff)

def get_equal_current_values(input, out):
    """get_equal_current_values(FileConstHandle input, FileConstHandle out) -> bool"""
    return _RMF.get_equal_current_values(input, out)

def get_equal_static_values(input, out):
    """get_equal_static_values(FileConstHandle input, FileConstHandle out) -> bool"""
    return _RMF.get_equal_static_values(input, out)

def test_throw_exception():
    """test_throw_exception()"""
    return _RMF.test_throw_exception()

def get_bounding_box(root):
    """get_bounding_box(NodeConstHandle root) -> std::array< RMF::Vector3,2 >"""
    return _RMF.get_bounding_box(root)

def get_diameter(root):
    """get_diameter(NodeConstHandle root) -> float"""
    return _RMF.get_diameter(root)

def validate(fh):
    """validate(FileConstHandle fh)"""
    return _RMF.validate(fh)

_tmpdir=None

def _get_temporary_file_path(name):
   global _tmpdir
   if not _tmpdir:
       import tempfile
       _tmpdir = tempfile.mkdtemp()
   import os.path
   return os.path.join(_tmpdir, name)

def _get_test_input_file_path(name):
   import sys
   import os.path
   dir= os.path.split(sys.argv[0])[0]
   return os.path.join(dir, "input", name)

def _os_path_split_asunder(path):
    import os.path
    parts = []
    while True:
        newpath, tail = os.path.split(path)
        if newpath == path:
            assert not tail
            if path: parts.append(path)
            break
        parts.append(tail)
        path = newpath
    parts.reverse()
    return parts


def get_example_path(name):
   import sys
   import os.path
   dir= _os_path_split_asunder(sys.argv[0])[:-1]
   dir.append(name)
   return os.path.join(*dir)

def _assert_signatures_equal(sa, sb):
  if sa == sb:
     return
  else:
     import difflib
     for l in difflib.unified_diff(sa.split("\n"), sb.split("\n")):
        stl = str(l)
        print(stl)
     raise RuntimeError("not equal")

suffixes=["rmf", "rmfz"]

try:
  import RMF_HDF5
  HDF5=RMF_HDF5
except:
  pass




suffixes.extend(["rmf-avro", "rmf3", "rmf-hdf5", "_rmf_test_buffer"])


def get_all_global_coordinates(fh, nh, coord):
    """get_all_global_coordinates(FileConstHandle fh, NodeConstHandle nh, PyObject * coord)"""
    return _RMF.get_all_global_coordinates(fh, nh, coord)
# This file is compatible with both classic and new-style classes.

ALL_FRAMES = cvar.ALL_FRAMES

